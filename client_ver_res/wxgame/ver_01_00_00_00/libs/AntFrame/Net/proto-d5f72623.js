"use strict";
var $protobuf = protobuf;
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
var proto = $root;
var module = {}
$root.C2S = (function() {
    function C2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    C2S.prototype.key = "";
    C2S.prototype.gamerLoginC2S = null;
    C2S.prototype.gamerLoginGetDataC2S = null;
    C2S.prototype.serverTimeC2S = null;
    C2S.prototype.gamerSubChatChannelC2S = null;
    C2S.prototype.gamerFriendChatC2S = null;
    C2S.prototype.gamerWorldChatC2S = null;
    C2S.prototype.gamerTestChatC2S = null;
    C2S.prototype.gamerClubRequestC2S = null;
    C2S.prototype.gamerNewFriendReqC2S = null;
    C2S.prototype.gamerProcessFriendReqC2S = null;
    C2S.prototype.gamerGetMailC2S = null;
    C2S.prototype.gamerDelMailC2S = null;
    C2S.prototype.gamerDelHaveReadMailC2S = null;
    C2S.prototype.gamerOneKeyRcvMailRewardC2S = null;
    C2S.prototype.gamerChangeMailStateC2S = null;
    C2S.prototype.gamerMatchC2S = null;
    C2S.prototype.gamerPVPSyncC2S = null;
    C2S.prototype.gamerGetRealTimeRankC2S = null;
    C2S.prototype.gamerCheckPVPBattleC2S = null;
    C2S.prototype.gamerUploadWXInfoC2S = null;
    C2S.prototype.createLeagueC2S = null;
    C2S.prototype.gamerGetBackpackC2S = null;
    C2S.prototype.gamerSellItemC2S = null;
    C2S.prototype.gamerUseItemC2S = null;
    C2S.prototype.gamerCompoundItemC2S = null;
    C2S.prototype.gamerSplitItemC2S = null;
    C2S.prototype.gamerGetActorListC2S = null;
    C2S.prototype.gamerChangeActorNameC2S = null;
    C2S.prototype.gamerActorUpLevelC2S = null;
    C2S.prototype.gamerGetActorSetListC2S = null;
    C2S.prototype.gamerGetActorSetRewardC2S = null;
    C2S.prototype.gamerActorSendGiftC2S = null;
    C2S.prototype.gamerActorLabelUpLevelC2S = null;
    C2S.prototype.gamerActorOpenNewLabelC2S = null;
    C2S.prototype.gamerActorBuyNewLabelC2S = null;
    C2S.prototype.gamerActorAdNewLabelC2S = null;
    C2S.prototype.gamerActorFriendshipUpLevelC2S = null;
    C2S.prototype.gamerActorFriendshipTaskReportC2S = null;
    C2S.prototype.gamerActorSkillUpLevelC2S = null;
    C2S.prototype.gMC2S = null;
    C2S.prototype.storyGiveLikeC2S = null;
    C2S.prototype.storyCommentC2S = null;
    C2S.prototype.storyReadCommentC2S = null;
    C2S.prototype.storyGetCommentC2S = null;
    C2S.prototype.storyChangeNameC2S = null;
    C2S.prototype.buildLevelUpC2S = null;
    C2S.prototype.buildEndOfLevelUpC2S = null;
    C2S.prototype.buildBreakUpC2S = null;
    C2S.prototype.buildSpeedUpC2S = null;
    C2S.prototype.buildGetProductC2S = null;
    C2S.prototype.actorEnterBuildC2S = null;
    C2S.prototype.actorLeaveBuildC2S = null;
    C2S.prototype.gamerExtractGashaponC2S = null;
    C2S.prototype.storyExtractGashaponC2S = null;
    C2S.prototype.gamerGetAllowanceC2S = null;
    C2S.prototype.getStoryExtractInfoC2S = null;
    C2S.prototype.cleanStoryExtractCDC2S = null;
    C2S.prototype.purchaseStoryExtractNumC2S = null;
    C2S.prototype.gamerGetIntelligenceC2S = null;
    C2S.prototype.gamerChangeIntelligenceStateC2S = null;
    C2S.prototype.gamerIntelligenceParseC2S = null;
    C2S.prototype.studioC2S = null;
    C2S.prototype.studioStorySelectC2S = null;
    C2S.prototype.studioActorSelectC2S = null;
    C2S.prototype.studioMatchingDisplayEndC2S = null;
    C2S.prototype.studioEventOptionSelectC2S = null;
    C2S.prototype.studioStartC2S = null;
    C2S.prototype.studioNextStepC2S = null;
    C2S.prototype.studioContinuedListC2S = null;
    C2S.prototype.studioContinuedReceiveC2S = null;
    C2S.prototype.studioContinuedReceiveAllC2S = null;
    C2S.prototype.getActivityRewardC2S = null;
    C2S.create = function create(properties) {
        return new C2S(properties);
    };
    C2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && message.hasOwnProperty("key"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
        if (message.gamerLoginC2S != null && message.hasOwnProperty("gamerLoginC2S"))
            $root.GamerLoginC2S.encode(message.gamerLoginC2S, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.gamerLoginGetDataC2S != null && message.hasOwnProperty("gamerLoginGetDataC2S"))
            $root.GamerLoginGetDataC2S.encode(message.gamerLoginGetDataC2S, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.serverTimeC2S != null && message.hasOwnProperty("serverTimeC2S"))
            $root.ServerTimeC2S.encode(message.serverTimeC2S, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.gamerSubChatChannelC2S != null && message.hasOwnProperty("gamerSubChatChannelC2S"))
            $root.GamerSubChatChannelC2S.encode(message.gamerSubChatChannelC2S, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.gamerFriendChatC2S != null && message.hasOwnProperty("gamerFriendChatC2S"))
            $root.GamerFriendChatC2S.encode(message.gamerFriendChatC2S, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.gamerWorldChatC2S != null && message.hasOwnProperty("gamerWorldChatC2S"))
            $root.GamerWorldChatC2S.encode(message.gamerWorldChatC2S, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.gamerTestChatC2S != null && message.hasOwnProperty("gamerTestChatC2S"))
            $root.GamerTestChatC2S.encode(message.gamerTestChatC2S, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.gamerClubRequestC2S != null && message.hasOwnProperty("gamerClubRequestC2S"))
            $root.GamerClubRequestC2S.encode(message.gamerClubRequestC2S, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.gamerNewFriendReqC2S != null && message.hasOwnProperty("gamerNewFriendReqC2S"))
            $root.GamerNewFriendReqC2S.encode(message.gamerNewFriendReqC2S, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.gamerProcessFriendReqC2S != null && message.hasOwnProperty("gamerProcessFriendReqC2S"))
            $root.GamerProcessFriendReqC2S.encode(message.gamerProcessFriendReqC2S, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.gamerGetMailC2S != null && message.hasOwnProperty("gamerGetMailC2S"))
            $root.GamerGetMailC2S.encode(message.gamerGetMailC2S, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.gamerDelMailC2S != null && message.hasOwnProperty("gamerDelMailC2S"))
            $root.GamerDelMailC2S.encode(message.gamerDelMailC2S, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.gamerDelHaveReadMailC2S != null && message.hasOwnProperty("gamerDelHaveReadMailC2S"))
            $root.GamerDelHaveReadMailC2S.encode(message.gamerDelHaveReadMailC2S, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.gamerOneKeyRcvMailRewardC2S != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardC2S"))
            $root.GamerOneKeyRcvMailRewardC2S.encode(message.gamerOneKeyRcvMailRewardC2S, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.gamerChangeMailStateC2S != null && message.hasOwnProperty("gamerChangeMailStateC2S"))
            $root.GamerChangeMailStateC2S.encode(message.gamerChangeMailStateC2S, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.gamerMatchC2S != null && message.hasOwnProperty("gamerMatchC2S"))
            $root.GamerMatchC2S.encode(message.gamerMatchC2S, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.gamerPVPSyncC2S != null && message.hasOwnProperty("gamerPVPSyncC2S"))
            $root.GamerPVPSyncC2S.encode(message.gamerPVPSyncC2S, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.gamerGetRealTimeRankC2S != null && message.hasOwnProperty("gamerGetRealTimeRankC2S"))
            $root.GamerGetRealTimeRankC2S.encode(message.gamerGetRealTimeRankC2S, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.gamerCheckPVPBattleC2S != null && message.hasOwnProperty("gamerCheckPVPBattleC2S"))
            $root.GamerCheckPVPBattleC2S.encode(message.gamerCheckPVPBattleC2S, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.gamerUploadWXInfoC2S != null && message.hasOwnProperty("gamerUploadWXInfoC2S"))
            $root.GamerUploadWXInfoC2S.encode(message.gamerUploadWXInfoC2S, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.createLeagueC2S != null && message.hasOwnProperty("createLeagueC2S"))
            $root.CreateLeagueC2S.encode(message.createLeagueC2S, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.gamerGetBackpackC2S != null && message.hasOwnProperty("gamerGetBackpackC2S"))
            $root.GamerGetBackpackC2S.encode(message.gamerGetBackpackC2S, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.gamerSellItemC2S != null && message.hasOwnProperty("gamerSellItemC2S"))
            $root.GamerSellItemC2S.encode(message.gamerSellItemC2S, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
        if (message.gamerUseItemC2S != null && message.hasOwnProperty("gamerUseItemC2S"))
            $root.GamerUseItemC2S.encode(message.gamerUseItemC2S, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
        if (message.gamerCompoundItemC2S != null && message.hasOwnProperty("gamerCompoundItemC2S"))
            $root.GamerCompoundItemC2S.encode(message.gamerCompoundItemC2S, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.gamerSplitItemC2S != null && message.hasOwnProperty("gamerSplitItemC2S"))
            $root.GamerSplitItemC2S.encode(message.gamerSplitItemC2S, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
        if (message.gamerGetActorListC2S != null && message.hasOwnProperty("gamerGetActorListC2S"))
            $root.GamerGetActorListC2S.encode(message.gamerGetActorListC2S, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
        if (message.gamerChangeActorNameC2S != null && message.hasOwnProperty("gamerChangeActorNameC2S"))
            $root.GamerChangeActorNameC2S.encode(message.gamerChangeActorNameC2S, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
        if (message.gamerActorUpLevelC2S != null && message.hasOwnProperty("gamerActorUpLevelC2S"))
            $root.GamerActorUpLevelC2S.encode(message.gamerActorUpLevelC2S, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
        if (message.gamerGetActorSetListC2S != null && message.hasOwnProperty("gamerGetActorSetListC2S"))
            $root.GamerGetActorSetListC2S.encode(message.gamerGetActorSetListC2S, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.gamerGetActorSetRewardC2S != null && message.hasOwnProperty("gamerGetActorSetRewardC2S"))
            $root.GamerGetActorSetRewardC2S.encode(message.gamerGetActorSetRewardC2S, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.gamerActorSendGiftC2S != null && message.hasOwnProperty("gamerActorSendGiftC2S"))
            $root.GamerActorSendGiftC2S.encode(message.gamerActorSendGiftC2S, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.gamerActorLabelUpLevelC2S != null && message.hasOwnProperty("gamerActorLabelUpLevelC2S"))
            $root.GamerActorLabelUpLevelC2S.encode(message.gamerActorLabelUpLevelC2S, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.gamerActorOpenNewLabelC2S != null && message.hasOwnProperty("gamerActorOpenNewLabelC2S"))
            $root.GamerActorOpenNewLabelC2S.encode(message.gamerActorOpenNewLabelC2S, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.gamerActorBuyNewLabelC2S != null && message.hasOwnProperty("gamerActorBuyNewLabelC2S"))
            $root.GamerActorBuyNewLabelC2S.encode(message.gamerActorBuyNewLabelC2S, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.gamerActorAdNewLabelC2S != null && message.hasOwnProperty("gamerActorAdNewLabelC2S"))
            $root.GamerActorAdNewLabelC2S.encode(message.gamerActorAdNewLabelC2S, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.gamerActorFriendshipUpLevelC2S != null && message.hasOwnProperty("gamerActorFriendshipUpLevelC2S"))
            $root.GamerActorFriendshipUpLevelC2S.encode(message.gamerActorFriendshipUpLevelC2S, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.gamerActorFriendshipTaskReportC2S != null && message.hasOwnProperty("gamerActorFriendshipTaskReportC2S"))
            $root.GamerActorFriendshipTaskReportC2S.encode(message.gamerActorFriendshipTaskReportC2S, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
        if (message.gamerActorSkillUpLevelC2S != null && message.hasOwnProperty("gamerActorSkillUpLevelC2S"))
            $root.GamerActorSkillUpLevelC2S.encode(message.gamerActorSkillUpLevelC2S, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
        if (message.gMC2S != null && message.hasOwnProperty("gMC2S"))
            $root.GMC2S.encode(message.gMC2S, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
        if (message.storyGiveLikeC2S != null && message.hasOwnProperty("storyGiveLikeC2S"))
            $root.StoryGiveLikeC2S.encode(message.storyGiveLikeC2S, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
        if (message.storyCommentC2S != null && message.hasOwnProperty("storyCommentC2S"))
            $root.StoryCommentC2S.encode(message.storyCommentC2S, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
        if (message.storyReadCommentC2S != null && message.hasOwnProperty("storyReadCommentC2S"))
            $root.StoryReadCommentC2S.encode(message.storyReadCommentC2S, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.storyGetCommentC2S != null && message.hasOwnProperty("storyGetCommentC2S"))
            $root.StoryGetCommentC2S.encode(message.storyGetCommentC2S, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
        if (message.storyChangeNameC2S != null && message.hasOwnProperty("storyChangeNameC2S"))
            $root.StoryChangeNameC2S.encode(message.storyChangeNameC2S, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
        if (message.buildLevelUpC2S != null && message.hasOwnProperty("buildLevelUpC2S"))
            $root.BuildLevelUpC2S.encode(message.buildLevelUpC2S, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.buildEndOfLevelUpC2S != null && message.hasOwnProperty("buildEndOfLevelUpC2S"))
            $root.BuildEndOfLevelUpC2S.encode(message.buildEndOfLevelUpC2S, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
        if (message.buildBreakUpC2S != null && message.hasOwnProperty("buildBreakUpC2S"))
            $root.BuildBreakUpC2S.encode(message.buildBreakUpC2S, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
        if (message.buildSpeedUpC2S != null && message.hasOwnProperty("buildSpeedUpC2S"))
            $root.BuildSpeedUpC2S.encode(message.buildSpeedUpC2S, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
        if (message.buildGetProductC2S != null && message.hasOwnProperty("buildGetProductC2S"))
            $root.BuildGetProductC2S.encode(message.buildGetProductC2S, writer.uint32(/* id 51, wireType 2 =*/410).fork()).ldelim();
        if (message.actorEnterBuildC2S != null && message.hasOwnProperty("actorEnterBuildC2S"))
            $root.ActorEnterBuildC2S.encode(message.actorEnterBuildC2S, writer.uint32(/* id 52, wireType 2 =*/418).fork()).ldelim();
        if (message.actorLeaveBuildC2S != null && message.hasOwnProperty("actorLeaveBuildC2S"))
            $root.ActorLeaveBuildC2S.encode(message.actorLeaveBuildC2S, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
        if (message.gamerExtractGashaponC2S != null && message.hasOwnProperty("gamerExtractGashaponC2S"))
            $root.GamerExtractGashaponC2S.encode(message.gamerExtractGashaponC2S, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
        if (message.storyExtractGashaponC2S != null && message.hasOwnProperty("storyExtractGashaponC2S"))
            $root.StoryExtractGashaponC2S.encode(message.storyExtractGashaponC2S, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
        if (message.gamerGetAllowanceC2S != null && message.hasOwnProperty("gamerGetAllowanceC2S"))
            $root.GamerGetAllowanceC2S.encode(message.gamerGetAllowanceC2S, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.getStoryExtractInfoC2S != null && message.hasOwnProperty("getStoryExtractInfoC2S"))
            $root.GetStoryExtractInfoC2S.encode(message.getStoryExtractInfoC2S, writer.uint32(/* id 57, wireType 2 =*/458).fork()).ldelim();
        if (message.cleanStoryExtractCDC2S != null && message.hasOwnProperty("cleanStoryExtractCDC2S"))
            $root.CleanStoryExtractCDC2S.encode(message.cleanStoryExtractCDC2S, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
        if (message.purchaseStoryExtractNumC2S != null && message.hasOwnProperty("purchaseStoryExtractNumC2S"))
            $root.PurchaseStoryExtractNumC2S.encode(message.purchaseStoryExtractNumC2S, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.gamerGetIntelligenceC2S != null && message.hasOwnProperty("gamerGetIntelligenceC2S"))
            $root.GamerGetIntelligenceC2S.encode(message.gamerGetIntelligenceC2S, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
        if (message.gamerChangeIntelligenceStateC2S != null && message.hasOwnProperty("gamerChangeIntelligenceStateC2S"))
            $root.GamerChangeIntelligenceStateC2S.encode(message.gamerChangeIntelligenceStateC2S, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
        if (message.gamerIntelligenceParseC2S != null && message.hasOwnProperty("gamerIntelligenceParseC2S"))
            $root.GamerIntelligenceParseC2S.encode(message.gamerIntelligenceParseC2S, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
        if (message.studioC2S != null && message.hasOwnProperty("studioC2S"))
            $root.StudioC2S.encode(message.studioC2S, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
        if (message.studioStorySelectC2S != null && message.hasOwnProperty("studioStorySelectC2S"))
            $root.StudioStorySelectC2S.encode(message.studioStorySelectC2S, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
        if (message.studioActorSelectC2S != null && message.hasOwnProperty("studioActorSelectC2S"))
            $root.StudioActorSelectC2S.encode(message.studioActorSelectC2S, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
        if (message.studioMatchingDisplayEndC2S != null && message.hasOwnProperty("studioMatchingDisplayEndC2S"))
            $root.StudioMatchingDisplayEndC2S.encode(message.studioMatchingDisplayEndC2S, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
        if (message.studioEventOptionSelectC2S != null && message.hasOwnProperty("studioEventOptionSelectC2S"))
            $root.StudioEventOptionSelectC2S.encode(message.studioEventOptionSelectC2S, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
        if (message.studioStartC2S != null && message.hasOwnProperty("studioStartC2S"))
            $root.StudioStartC2S.encode(message.studioStartC2S, writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
        if (message.studioNextStepC2S != null && message.hasOwnProperty("studioNextStepC2S"))
            $root.StudioNextStepC2S.encode(message.studioNextStepC2S, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
        if (message.studioContinuedListC2S != null && message.hasOwnProperty("studioContinuedListC2S"))
            $root.StudioContinuedListC2S.encode(message.studioContinuedListC2S, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
        if (message.studioContinuedReceiveC2S != null && message.hasOwnProperty("studioContinuedReceiveC2S"))
            $root.StudioContinuedReceiveC2S.encode(message.studioContinuedReceiveC2S, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
        if (message.studioContinuedReceiveAllC2S != null && message.hasOwnProperty("studioContinuedReceiveAllC2S"))
            $root.StudioContinuedReceiveAllC2S.encode(message.studioContinuedReceiveAllC2S, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
        if (message.getActivityRewardC2S != null && message.hasOwnProperty("getActivityRewardC2S"))
            $root.GetActivityRewardC2S.encode(message.getActivityRewardC2S, writer.uint32(/* id 73, wireType 2 =*/586).fork()).ldelim();
        return writer;
    };
    C2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    C2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.C2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.key = reader.string();
                break;
            case 2:
                message.gamerLoginC2S = $root.GamerLoginC2S.decode(reader, reader.uint32());
                break;
            case 3:
                message.gamerLoginGetDataC2S = $root.GamerLoginGetDataC2S.decode(reader, reader.uint32());
                break;
            case 4:
                message.serverTimeC2S = $root.ServerTimeC2S.decode(reader, reader.uint32());
                break;
            case 5:
                message.gamerSubChatChannelC2S = $root.GamerSubChatChannelC2S.decode(reader, reader.uint32());
                break;
            case 6:
                message.gamerFriendChatC2S = $root.GamerFriendChatC2S.decode(reader, reader.uint32());
                break;
            case 7:
                message.gamerWorldChatC2S = $root.GamerWorldChatC2S.decode(reader, reader.uint32());
                break;
            case 8:
                message.gamerTestChatC2S = $root.GamerTestChatC2S.decode(reader, reader.uint32());
                break;
            case 9:
                message.gamerClubRequestC2S = $root.GamerClubRequestC2S.decode(reader, reader.uint32());
                break;
            case 10:
                message.gamerNewFriendReqC2S = $root.GamerNewFriendReqC2S.decode(reader, reader.uint32());
                break;
            case 11:
                message.gamerProcessFriendReqC2S = $root.GamerProcessFriendReqC2S.decode(reader, reader.uint32());
                break;
            case 12:
                message.gamerGetMailC2S = $root.GamerGetMailC2S.decode(reader, reader.uint32());
                break;
            case 13:
                message.gamerDelMailC2S = $root.GamerDelMailC2S.decode(reader, reader.uint32());
                break;
            case 14:
                message.gamerDelHaveReadMailC2S = $root.GamerDelHaveReadMailC2S.decode(reader, reader.uint32());
                break;
            case 15:
                message.gamerOneKeyRcvMailRewardC2S = $root.GamerOneKeyRcvMailRewardC2S.decode(reader, reader.uint32());
                break;
            case 16:
                message.gamerChangeMailStateC2S = $root.GamerChangeMailStateC2S.decode(reader, reader.uint32());
                break;
            case 17:
                message.gamerMatchC2S = $root.GamerMatchC2S.decode(reader, reader.uint32());
                break;
            case 18:
                message.gamerPVPSyncC2S = $root.GamerPVPSyncC2S.decode(reader, reader.uint32());
                break;
            case 19:
                message.gamerGetRealTimeRankC2S = $root.GamerGetRealTimeRankC2S.decode(reader, reader.uint32());
                break;
            case 20:
                message.gamerCheckPVPBattleC2S = $root.GamerCheckPVPBattleC2S.decode(reader, reader.uint32());
                break;
            case 21:
                message.gamerUploadWXInfoC2S = $root.GamerUploadWXInfoC2S.decode(reader, reader.uint32());
                break;
            case 22:
                message.createLeagueC2S = $root.CreateLeagueC2S.decode(reader, reader.uint32());
                break;
            case 23:
                message.gamerGetBackpackC2S = $root.GamerGetBackpackC2S.decode(reader, reader.uint32());
                break;
            case 24:
                message.gamerSellItemC2S = $root.GamerSellItemC2S.decode(reader, reader.uint32());
                break;
            case 25:
                message.gamerUseItemC2S = $root.GamerUseItemC2S.decode(reader, reader.uint32());
                break;
            case 26:
                message.gamerCompoundItemC2S = $root.GamerCompoundItemC2S.decode(reader, reader.uint32());
                break;
            case 27:
                message.gamerSplitItemC2S = $root.GamerSplitItemC2S.decode(reader, reader.uint32());
                break;
            case 28:
                message.gamerGetActorListC2S = $root.GamerGetActorListC2S.decode(reader, reader.uint32());
                break;
            case 29:
                message.gamerChangeActorNameC2S = $root.GamerChangeActorNameC2S.decode(reader, reader.uint32());
                break;
            case 30:
                message.gamerActorUpLevelC2S = $root.GamerActorUpLevelC2S.decode(reader, reader.uint32());
                break;
            case 31:
                message.gamerGetActorSetListC2S = $root.GamerGetActorSetListC2S.decode(reader, reader.uint32());
                break;
            case 32:
                message.gamerGetActorSetRewardC2S = $root.GamerGetActorSetRewardC2S.decode(reader, reader.uint32());
                break;
            case 33:
                message.gamerActorSendGiftC2S = $root.GamerActorSendGiftC2S.decode(reader, reader.uint32());
                break;
            case 34:
                message.gamerActorLabelUpLevelC2S = $root.GamerActorLabelUpLevelC2S.decode(reader, reader.uint32());
                break;
            case 35:
                message.gamerActorOpenNewLabelC2S = $root.GamerActorOpenNewLabelC2S.decode(reader, reader.uint32());
                break;
            case 36:
                message.gamerActorBuyNewLabelC2S = $root.GamerActorBuyNewLabelC2S.decode(reader, reader.uint32());
                break;
            case 37:
                message.gamerActorAdNewLabelC2S = $root.GamerActorAdNewLabelC2S.decode(reader, reader.uint32());
                break;
            case 38:
                message.gamerActorFriendshipUpLevelC2S = $root.GamerActorFriendshipUpLevelC2S.decode(reader, reader.uint32());
                break;
            case 39:
                message.gamerActorFriendshipTaskReportC2S = $root.GamerActorFriendshipTaskReportC2S.decode(reader, reader.uint32());
                break;
            case 40:
                message.gamerActorSkillUpLevelC2S = $root.GamerActorSkillUpLevelC2S.decode(reader, reader.uint32());
                break;
            case 41:
                message.gMC2S = $root.GMC2S.decode(reader, reader.uint32());
                break;
            case 42:
                message.storyGiveLikeC2S = $root.StoryGiveLikeC2S.decode(reader, reader.uint32());
                break;
            case 43:
                message.storyCommentC2S = $root.StoryCommentC2S.decode(reader, reader.uint32());
                break;
            case 44:
                message.storyReadCommentC2S = $root.StoryReadCommentC2S.decode(reader, reader.uint32());
                break;
            case 45:
                message.storyGetCommentC2S = $root.StoryGetCommentC2S.decode(reader, reader.uint32());
                break;
            case 46:
                message.storyChangeNameC2S = $root.StoryChangeNameC2S.decode(reader, reader.uint32());
                break;
            case 47:
                message.buildLevelUpC2S = $root.BuildLevelUpC2S.decode(reader, reader.uint32());
                break;
            case 48:
                message.buildEndOfLevelUpC2S = $root.BuildEndOfLevelUpC2S.decode(reader, reader.uint32());
                break;
            case 49:
                message.buildBreakUpC2S = $root.BuildBreakUpC2S.decode(reader, reader.uint32());
                break;
            case 50:
                message.buildSpeedUpC2S = $root.BuildSpeedUpC2S.decode(reader, reader.uint32());
                break;
            case 51:
                message.buildGetProductC2S = $root.BuildGetProductC2S.decode(reader, reader.uint32());
                break;
            case 52:
                message.actorEnterBuildC2S = $root.ActorEnterBuildC2S.decode(reader, reader.uint32());
                break;
            case 53:
                message.actorLeaveBuildC2S = $root.ActorLeaveBuildC2S.decode(reader, reader.uint32());
                break;
            case 54:
                message.gamerExtractGashaponC2S = $root.GamerExtractGashaponC2S.decode(reader, reader.uint32());
                break;
            case 55:
                message.storyExtractGashaponC2S = $root.StoryExtractGashaponC2S.decode(reader, reader.uint32());
                break;
            case 56:
                message.gamerGetAllowanceC2S = $root.GamerGetAllowanceC2S.decode(reader, reader.uint32());
                break;
            case 57:
                message.getStoryExtractInfoC2S = $root.GetStoryExtractInfoC2S.decode(reader, reader.uint32());
                break;
            case 58:
                message.cleanStoryExtractCDC2S = $root.CleanStoryExtractCDC2S.decode(reader, reader.uint32());
                break;
            case 59:
                message.purchaseStoryExtractNumC2S = $root.PurchaseStoryExtractNumC2S.decode(reader, reader.uint32());
                break;
            case 60:
                message.gamerGetIntelligenceC2S = $root.GamerGetIntelligenceC2S.decode(reader, reader.uint32());
                break;
            case 61:
                message.gamerChangeIntelligenceStateC2S = $root.GamerChangeIntelligenceStateC2S.decode(reader, reader.uint32());
                break;
            case 62:
                message.gamerIntelligenceParseC2S = $root.GamerIntelligenceParseC2S.decode(reader, reader.uint32());
                break;
            case 63:
                message.studioC2S = $root.StudioC2S.decode(reader, reader.uint32());
                break;
            case 64:
                message.studioStorySelectC2S = $root.StudioStorySelectC2S.decode(reader, reader.uint32());
                break;
            case 65:
                message.studioActorSelectC2S = $root.StudioActorSelectC2S.decode(reader, reader.uint32());
                break;
            case 66:
                message.studioMatchingDisplayEndC2S = $root.StudioMatchingDisplayEndC2S.decode(reader, reader.uint32());
                break;
            case 67:
                message.studioEventOptionSelectC2S = $root.StudioEventOptionSelectC2S.decode(reader, reader.uint32());
                break;
            case 68:
                message.studioStartC2S = $root.StudioStartC2S.decode(reader, reader.uint32());
                break;
            case 69:
                message.studioNextStepC2S = $root.StudioNextStepC2S.decode(reader, reader.uint32());
                break;
            case 70:
                message.studioContinuedListC2S = $root.StudioContinuedListC2S.decode(reader, reader.uint32());
                break;
            case 71:
                message.studioContinuedReceiveC2S = $root.StudioContinuedReceiveC2S.decode(reader, reader.uint32());
                break;
            case 72:
                message.studioContinuedReceiveAllC2S = $root.StudioContinuedReceiveAllC2S.decode(reader, reader.uint32());
                break;
            case 73:
                message.getActivityRewardC2S = $root.GetActivityRewardC2S.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    C2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    C2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        if (message.gamerLoginC2S != null && message.hasOwnProperty("gamerLoginC2S")) {
            var error = $root.GamerLoginC2S.verify(message.gamerLoginC2S);
            if (error)
                return "gamerLoginC2S." + error;
        }
        if (message.gamerLoginGetDataC2S != null && message.hasOwnProperty("gamerLoginGetDataC2S")) {
            var error = $root.GamerLoginGetDataC2S.verify(message.gamerLoginGetDataC2S);
            if (error)
                return "gamerLoginGetDataC2S." + error;
        }
        if (message.serverTimeC2S != null && message.hasOwnProperty("serverTimeC2S")) {
            var error = $root.ServerTimeC2S.verify(message.serverTimeC2S);
            if (error)
                return "serverTimeC2S." + error;
        }
        if (message.gamerSubChatChannelC2S != null && message.hasOwnProperty("gamerSubChatChannelC2S")) {
            var error = $root.GamerSubChatChannelC2S.verify(message.gamerSubChatChannelC2S);
            if (error)
                return "gamerSubChatChannelC2S." + error;
        }
        if (message.gamerFriendChatC2S != null && message.hasOwnProperty("gamerFriendChatC2S")) {
            var error = $root.GamerFriendChatC2S.verify(message.gamerFriendChatC2S);
            if (error)
                return "gamerFriendChatC2S." + error;
        }
        if (message.gamerWorldChatC2S != null && message.hasOwnProperty("gamerWorldChatC2S")) {
            var error = $root.GamerWorldChatC2S.verify(message.gamerWorldChatC2S);
            if (error)
                return "gamerWorldChatC2S." + error;
        }
        if (message.gamerTestChatC2S != null && message.hasOwnProperty("gamerTestChatC2S")) {
            var error = $root.GamerTestChatC2S.verify(message.gamerTestChatC2S);
            if (error)
                return "gamerTestChatC2S." + error;
        }
        if (message.gamerClubRequestC2S != null && message.hasOwnProperty("gamerClubRequestC2S")) {
            var error = $root.GamerClubRequestC2S.verify(message.gamerClubRequestC2S);
            if (error)
                return "gamerClubRequestC2S." + error;
        }
        if (message.gamerNewFriendReqC2S != null && message.hasOwnProperty("gamerNewFriendReqC2S")) {
            var error = $root.GamerNewFriendReqC2S.verify(message.gamerNewFriendReqC2S);
            if (error)
                return "gamerNewFriendReqC2S." + error;
        }
        if (message.gamerProcessFriendReqC2S != null && message.hasOwnProperty("gamerProcessFriendReqC2S")) {
            var error = $root.GamerProcessFriendReqC2S.verify(message.gamerProcessFriendReqC2S);
            if (error)
                return "gamerProcessFriendReqC2S." + error;
        }
        if (message.gamerGetMailC2S != null && message.hasOwnProperty("gamerGetMailC2S")) {
            var error = $root.GamerGetMailC2S.verify(message.gamerGetMailC2S);
            if (error)
                return "gamerGetMailC2S." + error;
        }
        if (message.gamerDelMailC2S != null && message.hasOwnProperty("gamerDelMailC2S")) {
            var error = $root.GamerDelMailC2S.verify(message.gamerDelMailC2S);
            if (error)
                return "gamerDelMailC2S." + error;
        }
        if (message.gamerDelHaveReadMailC2S != null && message.hasOwnProperty("gamerDelHaveReadMailC2S")) {
            var error = $root.GamerDelHaveReadMailC2S.verify(message.gamerDelHaveReadMailC2S);
            if (error)
                return "gamerDelHaveReadMailC2S." + error;
        }
        if (message.gamerOneKeyRcvMailRewardC2S != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardC2S")) {
            var error = $root.GamerOneKeyRcvMailRewardC2S.verify(message.gamerOneKeyRcvMailRewardC2S);
            if (error)
                return "gamerOneKeyRcvMailRewardC2S." + error;
        }
        if (message.gamerChangeMailStateC2S != null && message.hasOwnProperty("gamerChangeMailStateC2S")) {
            var error = $root.GamerChangeMailStateC2S.verify(message.gamerChangeMailStateC2S);
            if (error)
                return "gamerChangeMailStateC2S." + error;
        }
        if (message.gamerMatchC2S != null && message.hasOwnProperty("gamerMatchC2S")) {
            var error = $root.GamerMatchC2S.verify(message.gamerMatchC2S);
            if (error)
                return "gamerMatchC2S." + error;
        }
        if (message.gamerPVPSyncC2S != null && message.hasOwnProperty("gamerPVPSyncC2S")) {
            var error = $root.GamerPVPSyncC2S.verify(message.gamerPVPSyncC2S);
            if (error)
                return "gamerPVPSyncC2S." + error;
        }
        if (message.gamerGetRealTimeRankC2S != null && message.hasOwnProperty("gamerGetRealTimeRankC2S")) {
            var error = $root.GamerGetRealTimeRankC2S.verify(message.gamerGetRealTimeRankC2S);
            if (error)
                return "gamerGetRealTimeRankC2S." + error;
        }
        if (message.gamerCheckPVPBattleC2S != null && message.hasOwnProperty("gamerCheckPVPBattleC2S")) {
            var error = $root.GamerCheckPVPBattleC2S.verify(message.gamerCheckPVPBattleC2S);
            if (error)
                return "gamerCheckPVPBattleC2S." + error;
        }
        if (message.gamerUploadWXInfoC2S != null && message.hasOwnProperty("gamerUploadWXInfoC2S")) {
            var error = $root.GamerUploadWXInfoC2S.verify(message.gamerUploadWXInfoC2S);
            if (error)
                return "gamerUploadWXInfoC2S." + error;
        }
        if (message.createLeagueC2S != null && message.hasOwnProperty("createLeagueC2S")) {
            var error = $root.CreateLeagueC2S.verify(message.createLeagueC2S);
            if (error)
                return "createLeagueC2S." + error;
        }
        if (message.gamerGetBackpackC2S != null && message.hasOwnProperty("gamerGetBackpackC2S")) {
            var error = $root.GamerGetBackpackC2S.verify(message.gamerGetBackpackC2S);
            if (error)
                return "gamerGetBackpackC2S." + error;
        }
        if (message.gamerSellItemC2S != null && message.hasOwnProperty("gamerSellItemC2S")) {
            var error = $root.GamerSellItemC2S.verify(message.gamerSellItemC2S);
            if (error)
                return "gamerSellItemC2S." + error;
        }
        if (message.gamerUseItemC2S != null && message.hasOwnProperty("gamerUseItemC2S")) {
            var error = $root.GamerUseItemC2S.verify(message.gamerUseItemC2S);
            if (error)
                return "gamerUseItemC2S." + error;
        }
        if (message.gamerCompoundItemC2S != null && message.hasOwnProperty("gamerCompoundItemC2S")) {
            var error = $root.GamerCompoundItemC2S.verify(message.gamerCompoundItemC2S);
            if (error)
                return "gamerCompoundItemC2S." + error;
        }
        if (message.gamerSplitItemC2S != null && message.hasOwnProperty("gamerSplitItemC2S")) {
            var error = $root.GamerSplitItemC2S.verify(message.gamerSplitItemC2S);
            if (error)
                return "gamerSplitItemC2S." + error;
        }
        if (message.gamerGetActorListC2S != null && message.hasOwnProperty("gamerGetActorListC2S")) {
            var error = $root.GamerGetActorListC2S.verify(message.gamerGetActorListC2S);
            if (error)
                return "gamerGetActorListC2S." + error;
        }
        if (message.gamerChangeActorNameC2S != null && message.hasOwnProperty("gamerChangeActorNameC2S")) {
            var error = $root.GamerChangeActorNameC2S.verify(message.gamerChangeActorNameC2S);
            if (error)
                return "gamerChangeActorNameC2S." + error;
        }
        if (message.gamerActorUpLevelC2S != null && message.hasOwnProperty("gamerActorUpLevelC2S")) {
            var error = $root.GamerActorUpLevelC2S.verify(message.gamerActorUpLevelC2S);
            if (error)
                return "gamerActorUpLevelC2S." + error;
        }
        if (message.gamerGetActorSetListC2S != null && message.hasOwnProperty("gamerGetActorSetListC2S")) {
            var error = $root.GamerGetActorSetListC2S.verify(message.gamerGetActorSetListC2S);
            if (error)
                return "gamerGetActorSetListC2S." + error;
        }
        if (message.gamerGetActorSetRewardC2S != null && message.hasOwnProperty("gamerGetActorSetRewardC2S")) {
            var error = $root.GamerGetActorSetRewardC2S.verify(message.gamerGetActorSetRewardC2S);
            if (error)
                return "gamerGetActorSetRewardC2S." + error;
        }
        if (message.gamerActorSendGiftC2S != null && message.hasOwnProperty("gamerActorSendGiftC2S")) {
            var error = $root.GamerActorSendGiftC2S.verify(message.gamerActorSendGiftC2S);
            if (error)
                return "gamerActorSendGiftC2S." + error;
        }
        if (message.gamerActorLabelUpLevelC2S != null && message.hasOwnProperty("gamerActorLabelUpLevelC2S")) {
            var error = $root.GamerActorLabelUpLevelC2S.verify(message.gamerActorLabelUpLevelC2S);
            if (error)
                return "gamerActorLabelUpLevelC2S." + error;
        }
        if (message.gamerActorOpenNewLabelC2S != null && message.hasOwnProperty("gamerActorOpenNewLabelC2S")) {
            var error = $root.GamerActorOpenNewLabelC2S.verify(message.gamerActorOpenNewLabelC2S);
            if (error)
                return "gamerActorOpenNewLabelC2S." + error;
        }
        if (message.gamerActorBuyNewLabelC2S != null && message.hasOwnProperty("gamerActorBuyNewLabelC2S")) {
            var error = $root.GamerActorBuyNewLabelC2S.verify(message.gamerActorBuyNewLabelC2S);
            if (error)
                return "gamerActorBuyNewLabelC2S." + error;
        }
        if (message.gamerActorAdNewLabelC2S != null && message.hasOwnProperty("gamerActorAdNewLabelC2S")) {
            var error = $root.GamerActorAdNewLabelC2S.verify(message.gamerActorAdNewLabelC2S);
            if (error)
                return "gamerActorAdNewLabelC2S." + error;
        }
        if (message.gamerActorFriendshipUpLevelC2S != null && message.hasOwnProperty("gamerActorFriendshipUpLevelC2S")) {
            var error = $root.GamerActorFriendshipUpLevelC2S.verify(message.gamerActorFriendshipUpLevelC2S);
            if (error)
                return "gamerActorFriendshipUpLevelC2S." + error;
        }
        if (message.gamerActorFriendshipTaskReportC2S != null && message.hasOwnProperty("gamerActorFriendshipTaskReportC2S")) {
            var error = $root.GamerActorFriendshipTaskReportC2S.verify(message.gamerActorFriendshipTaskReportC2S);
            if (error)
                return "gamerActorFriendshipTaskReportC2S." + error;
        }
        if (message.gamerActorSkillUpLevelC2S != null && message.hasOwnProperty("gamerActorSkillUpLevelC2S")) {
            var error = $root.GamerActorSkillUpLevelC2S.verify(message.gamerActorSkillUpLevelC2S);
            if (error)
                return "gamerActorSkillUpLevelC2S." + error;
        }
        if (message.gMC2S != null && message.hasOwnProperty("gMC2S")) {
            var error = $root.GMC2S.verify(message.gMC2S);
            if (error)
                return "gMC2S." + error;
        }
        if (message.storyGiveLikeC2S != null && message.hasOwnProperty("storyGiveLikeC2S")) {
            var error = $root.StoryGiveLikeC2S.verify(message.storyGiveLikeC2S);
            if (error)
                return "storyGiveLikeC2S." + error;
        }
        if (message.storyCommentC2S != null && message.hasOwnProperty("storyCommentC2S")) {
            var error = $root.StoryCommentC2S.verify(message.storyCommentC2S);
            if (error)
                return "storyCommentC2S." + error;
        }
        if (message.storyReadCommentC2S != null && message.hasOwnProperty("storyReadCommentC2S")) {
            var error = $root.StoryReadCommentC2S.verify(message.storyReadCommentC2S);
            if (error)
                return "storyReadCommentC2S." + error;
        }
        if (message.storyGetCommentC2S != null && message.hasOwnProperty("storyGetCommentC2S")) {
            var error = $root.StoryGetCommentC2S.verify(message.storyGetCommentC2S);
            if (error)
                return "storyGetCommentC2S." + error;
        }
        if (message.storyChangeNameC2S != null && message.hasOwnProperty("storyChangeNameC2S")) {
            var error = $root.StoryChangeNameC2S.verify(message.storyChangeNameC2S);
            if (error)
                return "storyChangeNameC2S." + error;
        }
        if (message.buildLevelUpC2S != null && message.hasOwnProperty("buildLevelUpC2S")) {
            var error = $root.BuildLevelUpC2S.verify(message.buildLevelUpC2S);
            if (error)
                return "buildLevelUpC2S." + error;
        }
        if (message.buildEndOfLevelUpC2S != null && message.hasOwnProperty("buildEndOfLevelUpC2S")) {
            var error = $root.BuildEndOfLevelUpC2S.verify(message.buildEndOfLevelUpC2S);
            if (error)
                return "buildEndOfLevelUpC2S." + error;
        }
        if (message.buildBreakUpC2S != null && message.hasOwnProperty("buildBreakUpC2S")) {
            var error = $root.BuildBreakUpC2S.verify(message.buildBreakUpC2S);
            if (error)
                return "buildBreakUpC2S." + error;
        }
        if (message.buildSpeedUpC2S != null && message.hasOwnProperty("buildSpeedUpC2S")) {
            var error = $root.BuildSpeedUpC2S.verify(message.buildSpeedUpC2S);
            if (error)
                return "buildSpeedUpC2S." + error;
        }
        if (message.buildGetProductC2S != null && message.hasOwnProperty("buildGetProductC2S")) {
            var error = $root.BuildGetProductC2S.verify(message.buildGetProductC2S);
            if (error)
                return "buildGetProductC2S." + error;
        }
        if (message.actorEnterBuildC2S != null && message.hasOwnProperty("actorEnterBuildC2S")) {
            var error = $root.ActorEnterBuildC2S.verify(message.actorEnterBuildC2S);
            if (error)
                return "actorEnterBuildC2S." + error;
        }
        if (message.actorLeaveBuildC2S != null && message.hasOwnProperty("actorLeaveBuildC2S")) {
            var error = $root.ActorLeaveBuildC2S.verify(message.actorLeaveBuildC2S);
            if (error)
                return "actorLeaveBuildC2S." + error;
        }
        if (message.gamerExtractGashaponC2S != null && message.hasOwnProperty("gamerExtractGashaponC2S")) {
            var error = $root.GamerExtractGashaponC2S.verify(message.gamerExtractGashaponC2S);
            if (error)
                return "gamerExtractGashaponC2S." + error;
        }
        if (message.storyExtractGashaponC2S != null && message.hasOwnProperty("storyExtractGashaponC2S")) {
            var error = $root.StoryExtractGashaponC2S.verify(message.storyExtractGashaponC2S);
            if (error)
                return "storyExtractGashaponC2S." + error;
        }
        if (message.gamerGetAllowanceC2S != null && message.hasOwnProperty("gamerGetAllowanceC2S")) {
            var error = $root.GamerGetAllowanceC2S.verify(message.gamerGetAllowanceC2S);
            if (error)
                return "gamerGetAllowanceC2S." + error;
        }
        if (message.getStoryExtractInfoC2S != null && message.hasOwnProperty("getStoryExtractInfoC2S")) {
            var error = $root.GetStoryExtractInfoC2S.verify(message.getStoryExtractInfoC2S);
            if (error)
                return "getStoryExtractInfoC2S." + error;
        }
        if (message.cleanStoryExtractCDC2S != null && message.hasOwnProperty("cleanStoryExtractCDC2S")) {
            var error = $root.CleanStoryExtractCDC2S.verify(message.cleanStoryExtractCDC2S);
            if (error)
                return "cleanStoryExtractCDC2S." + error;
        }
        if (message.purchaseStoryExtractNumC2S != null && message.hasOwnProperty("purchaseStoryExtractNumC2S")) {
            var error = $root.PurchaseStoryExtractNumC2S.verify(message.purchaseStoryExtractNumC2S);
            if (error)
                return "purchaseStoryExtractNumC2S." + error;
        }
        if (message.gamerGetIntelligenceC2S != null && message.hasOwnProperty("gamerGetIntelligenceC2S")) {
            var error = $root.GamerGetIntelligenceC2S.verify(message.gamerGetIntelligenceC2S);
            if (error)
                return "gamerGetIntelligenceC2S." + error;
        }
        if (message.gamerChangeIntelligenceStateC2S != null && message.hasOwnProperty("gamerChangeIntelligenceStateC2S")) {
            var error = $root.GamerChangeIntelligenceStateC2S.verify(message.gamerChangeIntelligenceStateC2S);
            if (error)
                return "gamerChangeIntelligenceStateC2S." + error;
        }
        if (message.gamerIntelligenceParseC2S != null && message.hasOwnProperty("gamerIntelligenceParseC2S")) {
            var error = $root.GamerIntelligenceParseC2S.verify(message.gamerIntelligenceParseC2S);
            if (error)
                return "gamerIntelligenceParseC2S." + error;
        }
        if (message.studioC2S != null && message.hasOwnProperty("studioC2S")) {
            var error = $root.StudioC2S.verify(message.studioC2S);
            if (error)
                return "studioC2S." + error;
        }
        if (message.studioStorySelectC2S != null && message.hasOwnProperty("studioStorySelectC2S")) {
            var error = $root.StudioStorySelectC2S.verify(message.studioStorySelectC2S);
            if (error)
                return "studioStorySelectC2S." + error;
        }
        if (message.studioActorSelectC2S != null && message.hasOwnProperty("studioActorSelectC2S")) {
            var error = $root.StudioActorSelectC2S.verify(message.studioActorSelectC2S);
            if (error)
                return "studioActorSelectC2S." + error;
        }
        if (message.studioMatchingDisplayEndC2S != null && message.hasOwnProperty("studioMatchingDisplayEndC2S")) {
            var error = $root.StudioMatchingDisplayEndC2S.verify(message.studioMatchingDisplayEndC2S);
            if (error)
                return "studioMatchingDisplayEndC2S." + error;
        }
        if (message.studioEventOptionSelectC2S != null && message.hasOwnProperty("studioEventOptionSelectC2S")) {
            var error = $root.StudioEventOptionSelectC2S.verify(message.studioEventOptionSelectC2S);
            if (error)
                return "studioEventOptionSelectC2S." + error;
        }
        if (message.studioStartC2S != null && message.hasOwnProperty("studioStartC2S")) {
            var error = $root.StudioStartC2S.verify(message.studioStartC2S);
            if (error)
                return "studioStartC2S." + error;
        }
        if (message.studioNextStepC2S != null && message.hasOwnProperty("studioNextStepC2S")) {
            var error = $root.StudioNextStepC2S.verify(message.studioNextStepC2S);
            if (error)
                return "studioNextStepC2S." + error;
        }
        if (message.studioContinuedListC2S != null && message.hasOwnProperty("studioContinuedListC2S")) {
            var error = $root.StudioContinuedListC2S.verify(message.studioContinuedListC2S);
            if (error)
                return "studioContinuedListC2S." + error;
        }
        if (message.studioContinuedReceiveC2S != null && message.hasOwnProperty("studioContinuedReceiveC2S")) {
            var error = $root.StudioContinuedReceiveC2S.verify(message.studioContinuedReceiveC2S);
            if (error)
                return "studioContinuedReceiveC2S." + error;
        }
        if (message.studioContinuedReceiveAllC2S != null && message.hasOwnProperty("studioContinuedReceiveAllC2S")) {
            var error = $root.StudioContinuedReceiveAllC2S.verify(message.studioContinuedReceiveAllC2S);
            if (error)
                return "studioContinuedReceiveAllC2S." + error;
        }
        if (message.getActivityRewardC2S != null && message.hasOwnProperty("getActivityRewardC2S")) {
            var error = $root.GetActivityRewardC2S.verify(message.getActivityRewardC2S);
            if (error)
                return "getActivityRewardC2S." + error;
        }
        return null;
    };
    C2S.fromObject = function fromObject(object) {
        if (object instanceof $root.C2S)
            return object;
        var message = new $root.C2S();
        if (object.key != null)
            message.key = String(object.key);
        if (object.gamerLoginC2S != null) {
            if (typeof object.gamerLoginC2S !== "object")
                throw TypeError(".C2S.gamerLoginC2S: object expected");
            message.gamerLoginC2S = $root.GamerLoginC2S.fromObject(object.gamerLoginC2S);
        }
        if (object.gamerLoginGetDataC2S != null) {
            if (typeof object.gamerLoginGetDataC2S !== "object")
                throw TypeError(".C2S.gamerLoginGetDataC2S: object expected");
            message.gamerLoginGetDataC2S = $root.GamerLoginGetDataC2S.fromObject(object.gamerLoginGetDataC2S);
        }
        if (object.serverTimeC2S != null) {
            if (typeof object.serverTimeC2S !== "object")
                throw TypeError(".C2S.serverTimeC2S: object expected");
            message.serverTimeC2S = $root.ServerTimeC2S.fromObject(object.serverTimeC2S);
        }
        if (object.gamerSubChatChannelC2S != null) {
            if (typeof object.gamerSubChatChannelC2S !== "object")
                throw TypeError(".C2S.gamerSubChatChannelC2S: object expected");
            message.gamerSubChatChannelC2S = $root.GamerSubChatChannelC2S.fromObject(object.gamerSubChatChannelC2S);
        }
        if (object.gamerFriendChatC2S != null) {
            if (typeof object.gamerFriendChatC2S !== "object")
                throw TypeError(".C2S.gamerFriendChatC2S: object expected");
            message.gamerFriendChatC2S = $root.GamerFriendChatC2S.fromObject(object.gamerFriendChatC2S);
        }
        if (object.gamerWorldChatC2S != null) {
            if (typeof object.gamerWorldChatC2S !== "object")
                throw TypeError(".C2S.gamerWorldChatC2S: object expected");
            message.gamerWorldChatC2S = $root.GamerWorldChatC2S.fromObject(object.gamerWorldChatC2S);
        }
        if (object.gamerTestChatC2S != null) {
            if (typeof object.gamerTestChatC2S !== "object")
                throw TypeError(".C2S.gamerTestChatC2S: object expected");
            message.gamerTestChatC2S = $root.GamerTestChatC2S.fromObject(object.gamerTestChatC2S);
        }
        if (object.gamerClubRequestC2S != null) {
            if (typeof object.gamerClubRequestC2S !== "object")
                throw TypeError(".C2S.gamerClubRequestC2S: object expected");
            message.gamerClubRequestC2S = $root.GamerClubRequestC2S.fromObject(object.gamerClubRequestC2S);
        }
        if (object.gamerNewFriendReqC2S != null) {
            if (typeof object.gamerNewFriendReqC2S !== "object")
                throw TypeError(".C2S.gamerNewFriendReqC2S: object expected");
            message.gamerNewFriendReqC2S = $root.GamerNewFriendReqC2S.fromObject(object.gamerNewFriendReqC2S);
        }
        if (object.gamerProcessFriendReqC2S != null) {
            if (typeof object.gamerProcessFriendReqC2S !== "object")
                throw TypeError(".C2S.gamerProcessFriendReqC2S: object expected");
            message.gamerProcessFriendReqC2S = $root.GamerProcessFriendReqC2S.fromObject(object.gamerProcessFriendReqC2S);
        }
        if (object.gamerGetMailC2S != null) {
            if (typeof object.gamerGetMailC2S !== "object")
                throw TypeError(".C2S.gamerGetMailC2S: object expected");
            message.gamerGetMailC2S = $root.GamerGetMailC2S.fromObject(object.gamerGetMailC2S);
        }
        if (object.gamerDelMailC2S != null) {
            if (typeof object.gamerDelMailC2S !== "object")
                throw TypeError(".C2S.gamerDelMailC2S: object expected");
            message.gamerDelMailC2S = $root.GamerDelMailC2S.fromObject(object.gamerDelMailC2S);
        }
        if (object.gamerDelHaveReadMailC2S != null) {
            if (typeof object.gamerDelHaveReadMailC2S !== "object")
                throw TypeError(".C2S.gamerDelHaveReadMailC2S: object expected");
            message.gamerDelHaveReadMailC2S = $root.GamerDelHaveReadMailC2S.fromObject(object.gamerDelHaveReadMailC2S);
        }
        if (object.gamerOneKeyRcvMailRewardC2S != null) {
            if (typeof object.gamerOneKeyRcvMailRewardC2S !== "object")
                throw TypeError(".C2S.gamerOneKeyRcvMailRewardC2S: object expected");
            message.gamerOneKeyRcvMailRewardC2S = $root.GamerOneKeyRcvMailRewardC2S.fromObject(object.gamerOneKeyRcvMailRewardC2S);
        }
        if (object.gamerChangeMailStateC2S != null) {
            if (typeof object.gamerChangeMailStateC2S !== "object")
                throw TypeError(".C2S.gamerChangeMailStateC2S: object expected");
            message.gamerChangeMailStateC2S = $root.GamerChangeMailStateC2S.fromObject(object.gamerChangeMailStateC2S);
        }
        if (object.gamerMatchC2S != null) {
            if (typeof object.gamerMatchC2S !== "object")
                throw TypeError(".C2S.gamerMatchC2S: object expected");
            message.gamerMatchC2S = $root.GamerMatchC2S.fromObject(object.gamerMatchC2S);
        }
        if (object.gamerPVPSyncC2S != null) {
            if (typeof object.gamerPVPSyncC2S !== "object")
                throw TypeError(".C2S.gamerPVPSyncC2S: object expected");
            message.gamerPVPSyncC2S = $root.GamerPVPSyncC2S.fromObject(object.gamerPVPSyncC2S);
        }
        if (object.gamerGetRealTimeRankC2S != null) {
            if (typeof object.gamerGetRealTimeRankC2S !== "object")
                throw TypeError(".C2S.gamerGetRealTimeRankC2S: object expected");
            message.gamerGetRealTimeRankC2S = $root.GamerGetRealTimeRankC2S.fromObject(object.gamerGetRealTimeRankC2S);
        }
        if (object.gamerCheckPVPBattleC2S != null) {
            if (typeof object.gamerCheckPVPBattleC2S !== "object")
                throw TypeError(".C2S.gamerCheckPVPBattleC2S: object expected");
            message.gamerCheckPVPBattleC2S = $root.GamerCheckPVPBattleC2S.fromObject(object.gamerCheckPVPBattleC2S);
        }
        if (object.gamerUploadWXInfoC2S != null) {
            if (typeof object.gamerUploadWXInfoC2S !== "object")
                throw TypeError(".C2S.gamerUploadWXInfoC2S: object expected");
            message.gamerUploadWXInfoC2S = $root.GamerUploadWXInfoC2S.fromObject(object.gamerUploadWXInfoC2S);
        }
        if (object.createLeagueC2S != null) {
            if (typeof object.createLeagueC2S !== "object")
                throw TypeError(".C2S.createLeagueC2S: object expected");
            message.createLeagueC2S = $root.CreateLeagueC2S.fromObject(object.createLeagueC2S);
        }
        if (object.gamerGetBackpackC2S != null) {
            if (typeof object.gamerGetBackpackC2S !== "object")
                throw TypeError(".C2S.gamerGetBackpackC2S: object expected");
            message.gamerGetBackpackC2S = $root.GamerGetBackpackC2S.fromObject(object.gamerGetBackpackC2S);
        }
        if (object.gamerSellItemC2S != null) {
            if (typeof object.gamerSellItemC2S !== "object")
                throw TypeError(".C2S.gamerSellItemC2S: object expected");
            message.gamerSellItemC2S = $root.GamerSellItemC2S.fromObject(object.gamerSellItemC2S);
        }
        if (object.gamerUseItemC2S != null) {
            if (typeof object.gamerUseItemC2S !== "object")
                throw TypeError(".C2S.gamerUseItemC2S: object expected");
            message.gamerUseItemC2S = $root.GamerUseItemC2S.fromObject(object.gamerUseItemC2S);
        }
        if (object.gamerCompoundItemC2S != null) {
            if (typeof object.gamerCompoundItemC2S !== "object")
                throw TypeError(".C2S.gamerCompoundItemC2S: object expected");
            message.gamerCompoundItemC2S = $root.GamerCompoundItemC2S.fromObject(object.gamerCompoundItemC2S);
        }
        if (object.gamerSplitItemC2S != null) {
            if (typeof object.gamerSplitItemC2S !== "object")
                throw TypeError(".C2S.gamerSplitItemC2S: object expected");
            message.gamerSplitItemC2S = $root.GamerSplitItemC2S.fromObject(object.gamerSplitItemC2S);
        }
        if (object.gamerGetActorListC2S != null) {
            if (typeof object.gamerGetActorListC2S !== "object")
                throw TypeError(".C2S.gamerGetActorListC2S: object expected");
            message.gamerGetActorListC2S = $root.GamerGetActorListC2S.fromObject(object.gamerGetActorListC2S);
        }
        if (object.gamerChangeActorNameC2S != null) {
            if (typeof object.gamerChangeActorNameC2S !== "object")
                throw TypeError(".C2S.gamerChangeActorNameC2S: object expected");
            message.gamerChangeActorNameC2S = $root.GamerChangeActorNameC2S.fromObject(object.gamerChangeActorNameC2S);
        }
        if (object.gamerActorUpLevelC2S != null) {
            if (typeof object.gamerActorUpLevelC2S !== "object")
                throw TypeError(".C2S.gamerActorUpLevelC2S: object expected");
            message.gamerActorUpLevelC2S = $root.GamerActorUpLevelC2S.fromObject(object.gamerActorUpLevelC2S);
        }
        if (object.gamerGetActorSetListC2S != null) {
            if (typeof object.gamerGetActorSetListC2S !== "object")
                throw TypeError(".C2S.gamerGetActorSetListC2S: object expected");
            message.gamerGetActorSetListC2S = $root.GamerGetActorSetListC2S.fromObject(object.gamerGetActorSetListC2S);
        }
        if (object.gamerGetActorSetRewardC2S != null) {
            if (typeof object.gamerGetActorSetRewardC2S !== "object")
                throw TypeError(".C2S.gamerGetActorSetRewardC2S: object expected");
            message.gamerGetActorSetRewardC2S = $root.GamerGetActorSetRewardC2S.fromObject(object.gamerGetActorSetRewardC2S);
        }
        if (object.gamerActorSendGiftC2S != null) {
            if (typeof object.gamerActorSendGiftC2S !== "object")
                throw TypeError(".C2S.gamerActorSendGiftC2S: object expected");
            message.gamerActorSendGiftC2S = $root.GamerActorSendGiftC2S.fromObject(object.gamerActorSendGiftC2S);
        }
        if (object.gamerActorLabelUpLevelC2S != null) {
            if (typeof object.gamerActorLabelUpLevelC2S !== "object")
                throw TypeError(".C2S.gamerActorLabelUpLevelC2S: object expected");
            message.gamerActorLabelUpLevelC2S = $root.GamerActorLabelUpLevelC2S.fromObject(object.gamerActorLabelUpLevelC2S);
        }
        if (object.gamerActorOpenNewLabelC2S != null) {
            if (typeof object.gamerActorOpenNewLabelC2S !== "object")
                throw TypeError(".C2S.gamerActorOpenNewLabelC2S: object expected");
            message.gamerActorOpenNewLabelC2S = $root.GamerActorOpenNewLabelC2S.fromObject(object.gamerActorOpenNewLabelC2S);
        }
        if (object.gamerActorBuyNewLabelC2S != null) {
            if (typeof object.gamerActorBuyNewLabelC2S !== "object")
                throw TypeError(".C2S.gamerActorBuyNewLabelC2S: object expected");
            message.gamerActorBuyNewLabelC2S = $root.GamerActorBuyNewLabelC2S.fromObject(object.gamerActorBuyNewLabelC2S);
        }
        if (object.gamerActorAdNewLabelC2S != null) {
            if (typeof object.gamerActorAdNewLabelC2S !== "object")
                throw TypeError(".C2S.gamerActorAdNewLabelC2S: object expected");
            message.gamerActorAdNewLabelC2S = $root.GamerActorAdNewLabelC2S.fromObject(object.gamerActorAdNewLabelC2S);
        }
        if (object.gamerActorFriendshipUpLevelC2S != null) {
            if (typeof object.gamerActorFriendshipUpLevelC2S !== "object")
                throw TypeError(".C2S.gamerActorFriendshipUpLevelC2S: object expected");
            message.gamerActorFriendshipUpLevelC2S = $root.GamerActorFriendshipUpLevelC2S.fromObject(object.gamerActorFriendshipUpLevelC2S);
        }
        if (object.gamerActorFriendshipTaskReportC2S != null) {
            if (typeof object.gamerActorFriendshipTaskReportC2S !== "object")
                throw TypeError(".C2S.gamerActorFriendshipTaskReportC2S: object expected");
            message.gamerActorFriendshipTaskReportC2S = $root.GamerActorFriendshipTaskReportC2S.fromObject(object.gamerActorFriendshipTaskReportC2S);
        }
        if (object.gamerActorSkillUpLevelC2S != null) {
            if (typeof object.gamerActorSkillUpLevelC2S !== "object")
                throw TypeError(".C2S.gamerActorSkillUpLevelC2S: object expected");
            message.gamerActorSkillUpLevelC2S = $root.GamerActorSkillUpLevelC2S.fromObject(object.gamerActorSkillUpLevelC2S);
        }
        if (object.gMC2S != null) {
            if (typeof object.gMC2S !== "object")
                throw TypeError(".C2S.gMC2S: object expected");
            message.gMC2S = $root.GMC2S.fromObject(object.gMC2S);
        }
        if (object.storyGiveLikeC2S != null) {
            if (typeof object.storyGiveLikeC2S !== "object")
                throw TypeError(".C2S.storyGiveLikeC2S: object expected");
            message.storyGiveLikeC2S = $root.StoryGiveLikeC2S.fromObject(object.storyGiveLikeC2S);
        }
        if (object.storyCommentC2S != null) {
            if (typeof object.storyCommentC2S !== "object")
                throw TypeError(".C2S.storyCommentC2S: object expected");
            message.storyCommentC2S = $root.StoryCommentC2S.fromObject(object.storyCommentC2S);
        }
        if (object.storyReadCommentC2S != null) {
            if (typeof object.storyReadCommentC2S !== "object")
                throw TypeError(".C2S.storyReadCommentC2S: object expected");
            message.storyReadCommentC2S = $root.StoryReadCommentC2S.fromObject(object.storyReadCommentC2S);
        }
        if (object.storyGetCommentC2S != null) {
            if (typeof object.storyGetCommentC2S !== "object")
                throw TypeError(".C2S.storyGetCommentC2S: object expected");
            message.storyGetCommentC2S = $root.StoryGetCommentC2S.fromObject(object.storyGetCommentC2S);
        }
        if (object.storyChangeNameC2S != null) {
            if (typeof object.storyChangeNameC2S !== "object")
                throw TypeError(".C2S.storyChangeNameC2S: object expected");
            message.storyChangeNameC2S = $root.StoryChangeNameC2S.fromObject(object.storyChangeNameC2S);
        }
        if (object.buildLevelUpC2S != null) {
            if (typeof object.buildLevelUpC2S !== "object")
                throw TypeError(".C2S.buildLevelUpC2S: object expected");
            message.buildLevelUpC2S = $root.BuildLevelUpC2S.fromObject(object.buildLevelUpC2S);
        }
        if (object.buildEndOfLevelUpC2S != null) {
            if (typeof object.buildEndOfLevelUpC2S !== "object")
                throw TypeError(".C2S.buildEndOfLevelUpC2S: object expected");
            message.buildEndOfLevelUpC2S = $root.BuildEndOfLevelUpC2S.fromObject(object.buildEndOfLevelUpC2S);
        }
        if (object.buildBreakUpC2S != null) {
            if (typeof object.buildBreakUpC2S !== "object")
                throw TypeError(".C2S.buildBreakUpC2S: object expected");
            message.buildBreakUpC2S = $root.BuildBreakUpC2S.fromObject(object.buildBreakUpC2S);
        }
        if (object.buildSpeedUpC2S != null) {
            if (typeof object.buildSpeedUpC2S !== "object")
                throw TypeError(".C2S.buildSpeedUpC2S: object expected");
            message.buildSpeedUpC2S = $root.BuildSpeedUpC2S.fromObject(object.buildSpeedUpC2S);
        }
        if (object.buildGetProductC2S != null) {
            if (typeof object.buildGetProductC2S !== "object")
                throw TypeError(".C2S.buildGetProductC2S: object expected");
            message.buildGetProductC2S = $root.BuildGetProductC2S.fromObject(object.buildGetProductC2S);
        }
        if (object.actorEnterBuildC2S != null) {
            if (typeof object.actorEnterBuildC2S !== "object")
                throw TypeError(".C2S.actorEnterBuildC2S: object expected");
            message.actorEnterBuildC2S = $root.ActorEnterBuildC2S.fromObject(object.actorEnterBuildC2S);
        }
        if (object.actorLeaveBuildC2S != null) {
            if (typeof object.actorLeaveBuildC2S !== "object")
                throw TypeError(".C2S.actorLeaveBuildC2S: object expected");
            message.actorLeaveBuildC2S = $root.ActorLeaveBuildC2S.fromObject(object.actorLeaveBuildC2S);
        }
        if (object.gamerExtractGashaponC2S != null) {
            if (typeof object.gamerExtractGashaponC2S !== "object")
                throw TypeError(".C2S.gamerExtractGashaponC2S: object expected");
            message.gamerExtractGashaponC2S = $root.GamerExtractGashaponC2S.fromObject(object.gamerExtractGashaponC2S);
        }
        if (object.storyExtractGashaponC2S != null) {
            if (typeof object.storyExtractGashaponC2S !== "object")
                throw TypeError(".C2S.storyExtractGashaponC2S: object expected");
            message.storyExtractGashaponC2S = $root.StoryExtractGashaponC2S.fromObject(object.storyExtractGashaponC2S);
        }
        if (object.gamerGetAllowanceC2S != null) {
            if (typeof object.gamerGetAllowanceC2S !== "object")
                throw TypeError(".C2S.gamerGetAllowanceC2S: object expected");
            message.gamerGetAllowanceC2S = $root.GamerGetAllowanceC2S.fromObject(object.gamerGetAllowanceC2S);
        }
        if (object.getStoryExtractInfoC2S != null) {
            if (typeof object.getStoryExtractInfoC2S !== "object")
                throw TypeError(".C2S.getStoryExtractInfoC2S: object expected");
            message.getStoryExtractInfoC2S = $root.GetStoryExtractInfoC2S.fromObject(object.getStoryExtractInfoC2S);
        }
        if (object.cleanStoryExtractCDC2S != null) {
            if (typeof object.cleanStoryExtractCDC2S !== "object")
                throw TypeError(".C2S.cleanStoryExtractCDC2S: object expected");
            message.cleanStoryExtractCDC2S = $root.CleanStoryExtractCDC2S.fromObject(object.cleanStoryExtractCDC2S);
        }
        if (object.purchaseStoryExtractNumC2S != null) {
            if (typeof object.purchaseStoryExtractNumC2S !== "object")
                throw TypeError(".C2S.purchaseStoryExtractNumC2S: object expected");
            message.purchaseStoryExtractNumC2S = $root.PurchaseStoryExtractNumC2S.fromObject(object.purchaseStoryExtractNumC2S);
        }
        if (object.gamerGetIntelligenceC2S != null) {
            if (typeof object.gamerGetIntelligenceC2S !== "object")
                throw TypeError(".C2S.gamerGetIntelligenceC2S: object expected");
            message.gamerGetIntelligenceC2S = $root.GamerGetIntelligenceC2S.fromObject(object.gamerGetIntelligenceC2S);
        }
        if (object.gamerChangeIntelligenceStateC2S != null) {
            if (typeof object.gamerChangeIntelligenceStateC2S !== "object")
                throw TypeError(".C2S.gamerChangeIntelligenceStateC2S: object expected");
            message.gamerChangeIntelligenceStateC2S = $root.GamerChangeIntelligenceStateC2S.fromObject(object.gamerChangeIntelligenceStateC2S);
        }
        if (object.gamerIntelligenceParseC2S != null) {
            if (typeof object.gamerIntelligenceParseC2S !== "object")
                throw TypeError(".C2S.gamerIntelligenceParseC2S: object expected");
            message.gamerIntelligenceParseC2S = $root.GamerIntelligenceParseC2S.fromObject(object.gamerIntelligenceParseC2S);
        }
        if (object.studioC2S != null) {
            if (typeof object.studioC2S !== "object")
                throw TypeError(".C2S.studioC2S: object expected");
            message.studioC2S = $root.StudioC2S.fromObject(object.studioC2S);
        }
        if (object.studioStorySelectC2S != null) {
            if (typeof object.studioStorySelectC2S !== "object")
                throw TypeError(".C2S.studioStorySelectC2S: object expected");
            message.studioStorySelectC2S = $root.StudioStorySelectC2S.fromObject(object.studioStorySelectC2S);
        }
        if (object.studioActorSelectC2S != null) {
            if (typeof object.studioActorSelectC2S !== "object")
                throw TypeError(".C2S.studioActorSelectC2S: object expected");
            message.studioActorSelectC2S = $root.StudioActorSelectC2S.fromObject(object.studioActorSelectC2S);
        }
        if (object.studioMatchingDisplayEndC2S != null) {
            if (typeof object.studioMatchingDisplayEndC2S !== "object")
                throw TypeError(".C2S.studioMatchingDisplayEndC2S: object expected");
            message.studioMatchingDisplayEndC2S = $root.StudioMatchingDisplayEndC2S.fromObject(object.studioMatchingDisplayEndC2S);
        }
        if (object.studioEventOptionSelectC2S != null) {
            if (typeof object.studioEventOptionSelectC2S !== "object")
                throw TypeError(".C2S.studioEventOptionSelectC2S: object expected");
            message.studioEventOptionSelectC2S = $root.StudioEventOptionSelectC2S.fromObject(object.studioEventOptionSelectC2S);
        }
        if (object.studioStartC2S != null) {
            if (typeof object.studioStartC2S !== "object")
                throw TypeError(".C2S.studioStartC2S: object expected");
            message.studioStartC2S = $root.StudioStartC2S.fromObject(object.studioStartC2S);
        }
        if (object.studioNextStepC2S != null) {
            if (typeof object.studioNextStepC2S !== "object")
                throw TypeError(".C2S.studioNextStepC2S: object expected");
            message.studioNextStepC2S = $root.StudioNextStepC2S.fromObject(object.studioNextStepC2S);
        }
        if (object.studioContinuedListC2S != null) {
            if (typeof object.studioContinuedListC2S !== "object")
                throw TypeError(".C2S.studioContinuedListC2S: object expected");
            message.studioContinuedListC2S = $root.StudioContinuedListC2S.fromObject(object.studioContinuedListC2S);
        }
        if (object.studioContinuedReceiveC2S != null) {
            if (typeof object.studioContinuedReceiveC2S !== "object")
                throw TypeError(".C2S.studioContinuedReceiveC2S: object expected");
            message.studioContinuedReceiveC2S = $root.StudioContinuedReceiveC2S.fromObject(object.studioContinuedReceiveC2S);
        }
        if (object.studioContinuedReceiveAllC2S != null) {
            if (typeof object.studioContinuedReceiveAllC2S !== "object")
                throw TypeError(".C2S.studioContinuedReceiveAllC2S: object expected");
            message.studioContinuedReceiveAllC2S = $root.StudioContinuedReceiveAllC2S.fromObject(object.studioContinuedReceiveAllC2S);
        }
        if (object.getActivityRewardC2S != null) {
            if (typeof object.getActivityRewardC2S !== "object")
                throw TypeError(".C2S.getActivityRewardC2S: object expected");
            message.getActivityRewardC2S = $root.GetActivityRewardC2S.fromObject(object.getActivityRewardC2S);
        }
        return message;
    };
    C2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = "";
            object.gamerLoginC2S = null;
            object.gamerLoginGetDataC2S = null;
            object.serverTimeC2S = null;
            object.gamerSubChatChannelC2S = null;
            object.gamerFriendChatC2S = null;
            object.gamerWorldChatC2S = null;
            object.gamerTestChatC2S = null;
            object.gamerClubRequestC2S = null;
            object.gamerNewFriendReqC2S = null;
            object.gamerProcessFriendReqC2S = null;
            object.gamerGetMailC2S = null;
            object.gamerDelMailC2S = null;
            object.gamerDelHaveReadMailC2S = null;
            object.gamerOneKeyRcvMailRewardC2S = null;
            object.gamerChangeMailStateC2S = null;
            object.gamerMatchC2S = null;
            object.gamerPVPSyncC2S = null;
            object.gamerGetRealTimeRankC2S = null;
            object.gamerCheckPVPBattleC2S = null;
            object.gamerUploadWXInfoC2S = null;
            object.createLeagueC2S = null;
            object.gamerGetBackpackC2S = null;
            object.gamerSellItemC2S = null;
            object.gamerUseItemC2S = null;
            object.gamerCompoundItemC2S = null;
            object.gamerSplitItemC2S = null;
            object.gamerGetActorListC2S = null;
            object.gamerChangeActorNameC2S = null;
            object.gamerActorUpLevelC2S = null;
            object.gamerGetActorSetListC2S = null;
            object.gamerGetActorSetRewardC2S = null;
            object.gamerActorSendGiftC2S = null;
            object.gamerActorLabelUpLevelC2S = null;
            object.gamerActorOpenNewLabelC2S = null;
            object.gamerActorBuyNewLabelC2S = null;
            object.gamerActorAdNewLabelC2S = null;
            object.gamerActorFriendshipUpLevelC2S = null;
            object.gamerActorFriendshipTaskReportC2S = null;
            object.gamerActorSkillUpLevelC2S = null;
            object.gMC2S = null;
            object.storyGiveLikeC2S = null;
            object.storyCommentC2S = null;
            object.storyReadCommentC2S = null;
            object.storyGetCommentC2S = null;
            object.storyChangeNameC2S = null;
            object.buildLevelUpC2S = null;
            object.buildEndOfLevelUpC2S = null;
            object.buildBreakUpC2S = null;
            object.buildSpeedUpC2S = null;
            object.buildGetProductC2S = null;
            object.actorEnterBuildC2S = null;
            object.actorLeaveBuildC2S = null;
            object.gamerExtractGashaponC2S = null;
            object.storyExtractGashaponC2S = null;
            object.gamerGetAllowanceC2S = null;
            object.getStoryExtractInfoC2S = null;
            object.cleanStoryExtractCDC2S = null;
            object.purchaseStoryExtractNumC2S = null;
            object.gamerGetIntelligenceC2S = null;
            object.gamerChangeIntelligenceStateC2S = null;
            object.gamerIntelligenceParseC2S = null;
            object.studioC2S = null;
            object.studioStorySelectC2S = null;
            object.studioActorSelectC2S = null;
            object.studioMatchingDisplayEndC2S = null;
            object.studioEventOptionSelectC2S = null;
            object.studioStartC2S = null;
            object.studioNextStepC2S = null;
            object.studioContinuedListC2S = null;
            object.studioContinuedReceiveC2S = null;
            object.studioContinuedReceiveAllC2S = null;
            object.getActivityRewardC2S = null;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.gamerLoginC2S != null && message.hasOwnProperty("gamerLoginC2S"))
            object.gamerLoginC2S = $root.GamerLoginC2S.toObject(message.gamerLoginC2S, options);
        if (message.gamerLoginGetDataC2S != null && message.hasOwnProperty("gamerLoginGetDataC2S"))
            object.gamerLoginGetDataC2S = $root.GamerLoginGetDataC2S.toObject(message.gamerLoginGetDataC2S, options);
        if (message.serverTimeC2S != null && message.hasOwnProperty("serverTimeC2S"))
            object.serverTimeC2S = $root.ServerTimeC2S.toObject(message.serverTimeC2S, options);
        if (message.gamerSubChatChannelC2S != null && message.hasOwnProperty("gamerSubChatChannelC2S"))
            object.gamerSubChatChannelC2S = $root.GamerSubChatChannelC2S.toObject(message.gamerSubChatChannelC2S, options);
        if (message.gamerFriendChatC2S != null && message.hasOwnProperty("gamerFriendChatC2S"))
            object.gamerFriendChatC2S = $root.GamerFriendChatC2S.toObject(message.gamerFriendChatC2S, options);
        if (message.gamerWorldChatC2S != null && message.hasOwnProperty("gamerWorldChatC2S"))
            object.gamerWorldChatC2S = $root.GamerWorldChatC2S.toObject(message.gamerWorldChatC2S, options);
        if (message.gamerTestChatC2S != null && message.hasOwnProperty("gamerTestChatC2S"))
            object.gamerTestChatC2S = $root.GamerTestChatC2S.toObject(message.gamerTestChatC2S, options);
        if (message.gamerClubRequestC2S != null && message.hasOwnProperty("gamerClubRequestC2S"))
            object.gamerClubRequestC2S = $root.GamerClubRequestC2S.toObject(message.gamerClubRequestC2S, options);
        if (message.gamerNewFriendReqC2S != null && message.hasOwnProperty("gamerNewFriendReqC2S"))
            object.gamerNewFriendReqC2S = $root.GamerNewFriendReqC2S.toObject(message.gamerNewFriendReqC2S, options);
        if (message.gamerProcessFriendReqC2S != null && message.hasOwnProperty("gamerProcessFriendReqC2S"))
            object.gamerProcessFriendReqC2S = $root.GamerProcessFriendReqC2S.toObject(message.gamerProcessFriendReqC2S, options);
        if (message.gamerGetMailC2S != null && message.hasOwnProperty("gamerGetMailC2S"))
            object.gamerGetMailC2S = $root.GamerGetMailC2S.toObject(message.gamerGetMailC2S, options);
        if (message.gamerDelMailC2S != null && message.hasOwnProperty("gamerDelMailC2S"))
            object.gamerDelMailC2S = $root.GamerDelMailC2S.toObject(message.gamerDelMailC2S, options);
        if (message.gamerDelHaveReadMailC2S != null && message.hasOwnProperty("gamerDelHaveReadMailC2S"))
            object.gamerDelHaveReadMailC2S = $root.GamerDelHaveReadMailC2S.toObject(message.gamerDelHaveReadMailC2S, options);
        if (message.gamerOneKeyRcvMailRewardC2S != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardC2S"))
            object.gamerOneKeyRcvMailRewardC2S = $root.GamerOneKeyRcvMailRewardC2S.toObject(message.gamerOneKeyRcvMailRewardC2S, options);
        if (message.gamerChangeMailStateC2S != null && message.hasOwnProperty("gamerChangeMailStateC2S"))
            object.gamerChangeMailStateC2S = $root.GamerChangeMailStateC2S.toObject(message.gamerChangeMailStateC2S, options);
        if (message.gamerMatchC2S != null && message.hasOwnProperty("gamerMatchC2S"))
            object.gamerMatchC2S = $root.GamerMatchC2S.toObject(message.gamerMatchC2S, options);
        if (message.gamerPVPSyncC2S != null && message.hasOwnProperty("gamerPVPSyncC2S"))
            object.gamerPVPSyncC2S = $root.GamerPVPSyncC2S.toObject(message.gamerPVPSyncC2S, options);
        if (message.gamerGetRealTimeRankC2S != null && message.hasOwnProperty("gamerGetRealTimeRankC2S"))
            object.gamerGetRealTimeRankC2S = $root.GamerGetRealTimeRankC2S.toObject(message.gamerGetRealTimeRankC2S, options);
        if (message.gamerCheckPVPBattleC2S != null && message.hasOwnProperty("gamerCheckPVPBattleC2S"))
            object.gamerCheckPVPBattleC2S = $root.GamerCheckPVPBattleC2S.toObject(message.gamerCheckPVPBattleC2S, options);
        if (message.gamerUploadWXInfoC2S != null && message.hasOwnProperty("gamerUploadWXInfoC2S"))
            object.gamerUploadWXInfoC2S = $root.GamerUploadWXInfoC2S.toObject(message.gamerUploadWXInfoC2S, options);
        if (message.createLeagueC2S != null && message.hasOwnProperty("createLeagueC2S"))
            object.createLeagueC2S = $root.CreateLeagueC2S.toObject(message.createLeagueC2S, options);
        if (message.gamerGetBackpackC2S != null && message.hasOwnProperty("gamerGetBackpackC2S"))
            object.gamerGetBackpackC2S = $root.GamerGetBackpackC2S.toObject(message.gamerGetBackpackC2S, options);
        if (message.gamerSellItemC2S != null && message.hasOwnProperty("gamerSellItemC2S"))
            object.gamerSellItemC2S = $root.GamerSellItemC2S.toObject(message.gamerSellItemC2S, options);
        if (message.gamerUseItemC2S != null && message.hasOwnProperty("gamerUseItemC2S"))
            object.gamerUseItemC2S = $root.GamerUseItemC2S.toObject(message.gamerUseItemC2S, options);
        if (message.gamerCompoundItemC2S != null && message.hasOwnProperty("gamerCompoundItemC2S"))
            object.gamerCompoundItemC2S = $root.GamerCompoundItemC2S.toObject(message.gamerCompoundItemC2S, options);
        if (message.gamerSplitItemC2S != null && message.hasOwnProperty("gamerSplitItemC2S"))
            object.gamerSplitItemC2S = $root.GamerSplitItemC2S.toObject(message.gamerSplitItemC2S, options);
        if (message.gamerGetActorListC2S != null && message.hasOwnProperty("gamerGetActorListC2S"))
            object.gamerGetActorListC2S = $root.GamerGetActorListC2S.toObject(message.gamerGetActorListC2S, options);
        if (message.gamerChangeActorNameC2S != null && message.hasOwnProperty("gamerChangeActorNameC2S"))
            object.gamerChangeActorNameC2S = $root.GamerChangeActorNameC2S.toObject(message.gamerChangeActorNameC2S, options);
        if (message.gamerActorUpLevelC2S != null && message.hasOwnProperty("gamerActorUpLevelC2S"))
            object.gamerActorUpLevelC2S = $root.GamerActorUpLevelC2S.toObject(message.gamerActorUpLevelC2S, options);
        if (message.gamerGetActorSetListC2S != null && message.hasOwnProperty("gamerGetActorSetListC2S"))
            object.gamerGetActorSetListC2S = $root.GamerGetActorSetListC2S.toObject(message.gamerGetActorSetListC2S, options);
        if (message.gamerGetActorSetRewardC2S != null && message.hasOwnProperty("gamerGetActorSetRewardC2S"))
            object.gamerGetActorSetRewardC2S = $root.GamerGetActorSetRewardC2S.toObject(message.gamerGetActorSetRewardC2S, options);
        if (message.gamerActorSendGiftC2S != null && message.hasOwnProperty("gamerActorSendGiftC2S"))
            object.gamerActorSendGiftC2S = $root.GamerActorSendGiftC2S.toObject(message.gamerActorSendGiftC2S, options);
        if (message.gamerActorLabelUpLevelC2S != null && message.hasOwnProperty("gamerActorLabelUpLevelC2S"))
            object.gamerActorLabelUpLevelC2S = $root.GamerActorLabelUpLevelC2S.toObject(message.gamerActorLabelUpLevelC2S, options);
        if (message.gamerActorOpenNewLabelC2S != null && message.hasOwnProperty("gamerActorOpenNewLabelC2S"))
            object.gamerActorOpenNewLabelC2S = $root.GamerActorOpenNewLabelC2S.toObject(message.gamerActorOpenNewLabelC2S, options);
        if (message.gamerActorBuyNewLabelC2S != null && message.hasOwnProperty("gamerActorBuyNewLabelC2S"))
            object.gamerActorBuyNewLabelC2S = $root.GamerActorBuyNewLabelC2S.toObject(message.gamerActorBuyNewLabelC2S, options);
        if (message.gamerActorAdNewLabelC2S != null && message.hasOwnProperty("gamerActorAdNewLabelC2S"))
            object.gamerActorAdNewLabelC2S = $root.GamerActorAdNewLabelC2S.toObject(message.gamerActorAdNewLabelC2S, options);
        if (message.gamerActorFriendshipUpLevelC2S != null && message.hasOwnProperty("gamerActorFriendshipUpLevelC2S"))
            object.gamerActorFriendshipUpLevelC2S = $root.GamerActorFriendshipUpLevelC2S.toObject(message.gamerActorFriendshipUpLevelC2S, options);
        if (message.gamerActorFriendshipTaskReportC2S != null && message.hasOwnProperty("gamerActorFriendshipTaskReportC2S"))
            object.gamerActorFriendshipTaskReportC2S = $root.GamerActorFriendshipTaskReportC2S.toObject(message.gamerActorFriendshipTaskReportC2S, options);
        if (message.gamerActorSkillUpLevelC2S != null && message.hasOwnProperty("gamerActorSkillUpLevelC2S"))
            object.gamerActorSkillUpLevelC2S = $root.GamerActorSkillUpLevelC2S.toObject(message.gamerActorSkillUpLevelC2S, options);
        if (message.gMC2S != null && message.hasOwnProperty("gMC2S"))
            object.gMC2S = $root.GMC2S.toObject(message.gMC2S, options);
        if (message.storyGiveLikeC2S != null && message.hasOwnProperty("storyGiveLikeC2S"))
            object.storyGiveLikeC2S = $root.StoryGiveLikeC2S.toObject(message.storyGiveLikeC2S, options);
        if (message.storyCommentC2S != null && message.hasOwnProperty("storyCommentC2S"))
            object.storyCommentC2S = $root.StoryCommentC2S.toObject(message.storyCommentC2S, options);
        if (message.storyReadCommentC2S != null && message.hasOwnProperty("storyReadCommentC2S"))
            object.storyReadCommentC2S = $root.StoryReadCommentC2S.toObject(message.storyReadCommentC2S, options);
        if (message.storyGetCommentC2S != null && message.hasOwnProperty("storyGetCommentC2S"))
            object.storyGetCommentC2S = $root.StoryGetCommentC2S.toObject(message.storyGetCommentC2S, options);
        if (message.storyChangeNameC2S != null && message.hasOwnProperty("storyChangeNameC2S"))
            object.storyChangeNameC2S = $root.StoryChangeNameC2S.toObject(message.storyChangeNameC2S, options);
        if (message.buildLevelUpC2S != null && message.hasOwnProperty("buildLevelUpC2S"))
            object.buildLevelUpC2S = $root.BuildLevelUpC2S.toObject(message.buildLevelUpC2S, options);
        if (message.buildEndOfLevelUpC2S != null && message.hasOwnProperty("buildEndOfLevelUpC2S"))
            object.buildEndOfLevelUpC2S = $root.BuildEndOfLevelUpC2S.toObject(message.buildEndOfLevelUpC2S, options);
        if (message.buildBreakUpC2S != null && message.hasOwnProperty("buildBreakUpC2S"))
            object.buildBreakUpC2S = $root.BuildBreakUpC2S.toObject(message.buildBreakUpC2S, options);
        if (message.buildSpeedUpC2S != null && message.hasOwnProperty("buildSpeedUpC2S"))
            object.buildSpeedUpC2S = $root.BuildSpeedUpC2S.toObject(message.buildSpeedUpC2S, options);
        if (message.buildGetProductC2S != null && message.hasOwnProperty("buildGetProductC2S"))
            object.buildGetProductC2S = $root.BuildGetProductC2S.toObject(message.buildGetProductC2S, options);
        if (message.actorEnterBuildC2S != null && message.hasOwnProperty("actorEnterBuildC2S"))
            object.actorEnterBuildC2S = $root.ActorEnterBuildC2S.toObject(message.actorEnterBuildC2S, options);
        if (message.actorLeaveBuildC2S != null && message.hasOwnProperty("actorLeaveBuildC2S"))
            object.actorLeaveBuildC2S = $root.ActorLeaveBuildC2S.toObject(message.actorLeaveBuildC2S, options);
        if (message.gamerExtractGashaponC2S != null && message.hasOwnProperty("gamerExtractGashaponC2S"))
            object.gamerExtractGashaponC2S = $root.GamerExtractGashaponC2S.toObject(message.gamerExtractGashaponC2S, options);
        if (message.storyExtractGashaponC2S != null && message.hasOwnProperty("storyExtractGashaponC2S"))
            object.storyExtractGashaponC2S = $root.StoryExtractGashaponC2S.toObject(message.storyExtractGashaponC2S, options);
        if (message.gamerGetAllowanceC2S != null && message.hasOwnProperty("gamerGetAllowanceC2S"))
            object.gamerGetAllowanceC2S = $root.GamerGetAllowanceC2S.toObject(message.gamerGetAllowanceC2S, options);
        if (message.getStoryExtractInfoC2S != null && message.hasOwnProperty("getStoryExtractInfoC2S"))
            object.getStoryExtractInfoC2S = $root.GetStoryExtractInfoC2S.toObject(message.getStoryExtractInfoC2S, options);
        if (message.cleanStoryExtractCDC2S != null && message.hasOwnProperty("cleanStoryExtractCDC2S"))
            object.cleanStoryExtractCDC2S = $root.CleanStoryExtractCDC2S.toObject(message.cleanStoryExtractCDC2S, options);
        if (message.purchaseStoryExtractNumC2S != null && message.hasOwnProperty("purchaseStoryExtractNumC2S"))
            object.purchaseStoryExtractNumC2S = $root.PurchaseStoryExtractNumC2S.toObject(message.purchaseStoryExtractNumC2S, options);
        if (message.gamerGetIntelligenceC2S != null && message.hasOwnProperty("gamerGetIntelligenceC2S"))
            object.gamerGetIntelligenceC2S = $root.GamerGetIntelligenceC2S.toObject(message.gamerGetIntelligenceC2S, options);
        if (message.gamerChangeIntelligenceStateC2S != null && message.hasOwnProperty("gamerChangeIntelligenceStateC2S"))
            object.gamerChangeIntelligenceStateC2S = $root.GamerChangeIntelligenceStateC2S.toObject(message.gamerChangeIntelligenceStateC2S, options);
        if (message.gamerIntelligenceParseC2S != null && message.hasOwnProperty("gamerIntelligenceParseC2S"))
            object.gamerIntelligenceParseC2S = $root.GamerIntelligenceParseC2S.toObject(message.gamerIntelligenceParseC2S, options);
        if (message.studioC2S != null && message.hasOwnProperty("studioC2S"))
            object.studioC2S = $root.StudioC2S.toObject(message.studioC2S, options);
        if (message.studioStorySelectC2S != null && message.hasOwnProperty("studioStorySelectC2S"))
            object.studioStorySelectC2S = $root.StudioStorySelectC2S.toObject(message.studioStorySelectC2S, options);
        if (message.studioActorSelectC2S != null && message.hasOwnProperty("studioActorSelectC2S"))
            object.studioActorSelectC2S = $root.StudioActorSelectC2S.toObject(message.studioActorSelectC2S, options);
        if (message.studioMatchingDisplayEndC2S != null && message.hasOwnProperty("studioMatchingDisplayEndC2S"))
            object.studioMatchingDisplayEndC2S = $root.StudioMatchingDisplayEndC2S.toObject(message.studioMatchingDisplayEndC2S, options);
        if (message.studioEventOptionSelectC2S != null && message.hasOwnProperty("studioEventOptionSelectC2S"))
            object.studioEventOptionSelectC2S = $root.StudioEventOptionSelectC2S.toObject(message.studioEventOptionSelectC2S, options);
        if (message.studioStartC2S != null && message.hasOwnProperty("studioStartC2S"))
            object.studioStartC2S = $root.StudioStartC2S.toObject(message.studioStartC2S, options);
        if (message.studioNextStepC2S != null && message.hasOwnProperty("studioNextStepC2S"))
            object.studioNextStepC2S = $root.StudioNextStepC2S.toObject(message.studioNextStepC2S, options);
        if (message.studioContinuedListC2S != null && message.hasOwnProperty("studioContinuedListC2S"))
            object.studioContinuedListC2S = $root.StudioContinuedListC2S.toObject(message.studioContinuedListC2S, options);
        if (message.studioContinuedReceiveC2S != null && message.hasOwnProperty("studioContinuedReceiveC2S"))
            object.studioContinuedReceiveC2S = $root.StudioContinuedReceiveC2S.toObject(message.studioContinuedReceiveC2S, options);
        if (message.studioContinuedReceiveAllC2S != null && message.hasOwnProperty("studioContinuedReceiveAllC2S"))
            object.studioContinuedReceiveAllC2S = $root.StudioContinuedReceiveAllC2S.toObject(message.studioContinuedReceiveAllC2S, options);
        if (message.getActivityRewardC2S != null && message.hasOwnProperty("getActivityRewardC2S"))
            object.getActivityRewardC2S = $root.GetActivityRewardC2S.toObject(message.getActivityRewardC2S, options);
        return object;
    };
    C2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return C2S;
})();
$root.GamerLoginC2S = (function() {
    function GamerLoginC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginC2S.prototype.id = 0;
    GamerLoginC2S.prototype.session = "";
    GamerLoginC2S.prototype.addr = "";
    GamerLoginC2S.create = function create(properties) {
        return new GamerLoginC2S(properties);
    };
    GamerLoginC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
        return writer;
    };
    GamerLoginC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            case 3:
                message.addr = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        return null;
    };
    GamerLoginC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginC2S)
            return object;
        var message = new $root.GamerLoginC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.addr != null)
            message.addr = String(object.addr);
        return message;
    };
    GamerLoginC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.session = "";
            object.addr = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        return object;
    };
    GamerLoginC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginC2S;
})();
$root.GamerLoginS2C = (function() {
    function GamerLoginS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginS2C.prototype.error = 0;
    GamerLoginS2C.prototype.main = null;
    GamerLoginS2C.create = function create(properties) {
        return new GamerLoginS2C(properties);
    };
    GamerLoginS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.main != null && message.hasOwnProperty("main"))
            $root.GamerMain.encode(message.main, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerLoginS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.main = $root.GamerMain.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.main != null && message.hasOwnProperty("main")) {
            var error = $root.GamerMain.verify(message.main);
            if (error)
                return "main." + error;
        }
        return null;
    };
    GamerLoginS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginS2C)
            return object;
        var message = new $root.GamerLoginS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.main != null) {
            if (typeof object.main !== "object")
                throw TypeError(".GamerLoginS2C.main: object expected");
            message.main = $root.GamerMain.fromObject(object.main);
        }
        return message;
    };
    GamerLoginS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.main = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.main != null && message.hasOwnProperty("main"))
            object.main = $root.GamerMain.toObject(message.main, options);
        return object;
    };
    GamerLoginS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginS2C;
})();
$root.GamerLoginGetDataC2S = (function() {
    function GamerLoginGetDataC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginGetDataC2S.prototype.id = 0;
    GamerLoginGetDataC2S.create = function create(properties) {
        return new GamerLoginGetDataC2S(properties);
    };
    GamerLoginGetDataC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerLoginGetDataC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginGetDataC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginGetDataC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginGetDataC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginGetDataC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerLoginGetDataC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginGetDataC2S)
            return object;
        var message = new $root.GamerLoginGetDataC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerLoginGetDataC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerLoginGetDataC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginGetDataC2S;
})();
$root.GamerLoginGetDataS2C = (function() {
    function GamerLoginGetDataS2C(properties) {
        this.friendReqs = [];
        this.friends = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerLoginGetDataS2C.prototype.error = 0;
    GamerLoginGetDataS2C.prototype.time = null;
    GamerLoginGetDataS2C.prototype.friendReqs = $util.emptyArray;
    GamerLoginGetDataS2C.prototype.friends = $util.emptyArray;
    GamerLoginGetDataS2C.prototype.lengthRank = 0;
    GamerLoginGetDataS2C.create = function create(properties) {
        return new GamerLoginGetDataS2C(properties);
    };
    GamerLoginGetDataS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.time != null && message.hasOwnProperty("time"))
            $root.ServerTime.encode(message.time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.friendReqs != null && message.friendReqs.length)
            for (var i = 0; i < message.friendReqs.length; ++i)
                $root.GamerFriendRequest.encode(message.friendReqs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.friends != null && message.friends.length)
            for (var i = 0; i < message.friends.length; ++i)
                $root.GamerFriend.encode(message.friends[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.lengthRank != null && message.hasOwnProperty("lengthRank"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.lengthRank);
        return writer;
    };
    GamerLoginGetDataS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerLoginGetDataS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerLoginGetDataS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.time = $root.ServerTime.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.friendReqs && message.friendReqs.length))
                    message.friendReqs = [];
                message.friendReqs.push($root.GamerFriendRequest.decode(reader, reader.uint32()));
                break;
            case 4:
                if (!(message.friends && message.friends.length))
                    message.friends = [];
                message.friends.push($root.GamerFriend.decode(reader, reader.uint32()));
                break;
            case 5:
                message.lengthRank = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerLoginGetDataS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerLoginGetDataS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.time != null && message.hasOwnProperty("time")) {
            var error = $root.ServerTime.verify(message.time);
            if (error)
                return "time." + error;
        }
        if (message.friendReqs != null && message.hasOwnProperty("friendReqs")) {
            if (!Array.isArray(message.friendReqs))
                return "friendReqs: array expected";
            for (var i = 0; i < message.friendReqs.length; ++i) {
                var error = $root.GamerFriendRequest.verify(message.friendReqs[i]);
                if (error)
                    return "friendReqs." + error;
            }
        }
        if (message.friends != null && message.hasOwnProperty("friends")) {
            if (!Array.isArray(message.friends))
                return "friends: array expected";
            for (var i = 0; i < message.friends.length; ++i) {
                var error = $root.GamerFriend.verify(message.friends[i]);
                if (error)
                    return "friends." + error;
            }
        }
        if (message.lengthRank != null && message.hasOwnProperty("lengthRank"))
            if (!$util.isInteger(message.lengthRank))
                return "lengthRank: integer expected";
        return null;
    };
    GamerLoginGetDataS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerLoginGetDataS2C)
            return object;
        var message = new $root.GamerLoginGetDataS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.time != null) {
            if (typeof object.time !== "object")
                throw TypeError(".GamerLoginGetDataS2C.time: object expected");
            message.time = $root.ServerTime.fromObject(object.time);
        }
        if (object.friendReqs) {
            if (!Array.isArray(object.friendReqs))
                throw TypeError(".GamerLoginGetDataS2C.friendReqs: array expected");
            message.friendReqs = [];
            for (var i = 0; i < object.friendReqs.length; ++i) {
                if (typeof object.friendReqs[i] !== "object")
                    throw TypeError(".GamerLoginGetDataS2C.friendReqs: object expected");
                message.friendReqs[i] = $root.GamerFriendRequest.fromObject(object.friendReqs[i]);
            }
        }
        if (object.friends) {
            if (!Array.isArray(object.friends))
                throw TypeError(".GamerLoginGetDataS2C.friends: array expected");
            message.friends = [];
            for (var i = 0; i < object.friends.length; ++i) {
                if (typeof object.friends[i] !== "object")
                    throw TypeError(".GamerLoginGetDataS2C.friends: object expected");
                message.friends[i] = $root.GamerFriend.fromObject(object.friends[i]);
            }
        }
        if (object.lengthRank != null)
            message.lengthRank = object.lengthRank | 0;
        return message;
    };
    GamerLoginGetDataS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.friendReqs = [];
            object.friends = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.time = null;
            object.lengthRank = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = $root.ServerTime.toObject(message.time, options);
        if (message.friendReqs && message.friendReqs.length) {
            object.friendReqs = [];
            for (var j = 0; j < message.friendReqs.length; ++j)
                object.friendReqs[j] = $root.GamerFriendRequest.toObject(message.friendReqs[j], options);
        }
        if (message.friends && message.friends.length) {
            object.friends = [];
            for (var j = 0; j < message.friends.length; ++j)
                object.friends[j] = $root.GamerFriend.toObject(message.friends[j], options);
        }
        if (message.lengthRank != null && message.hasOwnProperty("lengthRank"))
            object.lengthRank = message.lengthRank;
        return object;
    };
    GamerLoginGetDataS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerLoginGetDataS2C;
})();
$root.ServerTimeC2S = (function() {
    function ServerTimeC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ServerTimeC2S.prototype.id = 0;
    ServerTimeC2S.create = function create(properties) {
        return new ServerTimeC2S(properties);
    };
    ServerTimeC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    ServerTimeC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ServerTimeC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerTimeC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ServerTimeC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ServerTimeC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    ServerTimeC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ServerTimeC2S)
            return object;
        var message = new $root.ServerTimeC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    ServerTimeC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    ServerTimeC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ServerTimeC2S;
})();
$root.ServerTimeS2C = (function() {
    function ServerTimeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ServerTimeS2C.prototype.error = 0;
    ServerTimeS2C.prototype.time = null;
    ServerTimeS2C.create = function create(properties) {
        return new ServerTimeS2C(properties);
    };
    ServerTimeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.time != null && message.hasOwnProperty("time"))
            $root.ServerTime.encode(message.time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    ServerTimeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ServerTimeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerTimeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.time = $root.ServerTime.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ServerTimeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ServerTimeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.time != null && message.hasOwnProperty("time")) {
            var error = $root.ServerTime.verify(message.time);
            if (error)
                return "time." + error;
        }
        return null;
    };
    ServerTimeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ServerTimeS2C)
            return object;
        var message = new $root.ServerTimeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.time != null) {
            if (typeof object.time !== "object")
                throw TypeError(".ServerTimeS2C.time: object expected");
            message.time = $root.ServerTime.fromObject(object.time);
        }
        return message;
    };
    ServerTimeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.time = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = $root.ServerTime.toObject(message.time, options);
        return object;
    };
    ServerTimeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ServerTimeS2C;
})();
$root.GamerNotifyLoginOtherS2C = (function() {
    function GamerNotifyLoginOtherS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyLoginOtherS2C.prototype.error = 0;
    GamerNotifyLoginOtherS2C.create = function create(properties) {
        return new GamerNotifyLoginOtherS2C(properties);
    };
    GamerNotifyLoginOtherS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerNotifyLoginOtherS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyLoginOtherS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyLoginOtherS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyLoginOtherS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyLoginOtherS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerNotifyLoginOtherS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyLoginOtherS2C)
            return object;
        var message = new $root.GamerNotifyLoginOtherS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerNotifyLoginOtherS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerNotifyLoginOtherS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyLoginOtherS2C;
})();
$root.GamerSubChatChannelC2S = (function() {
    function GamerSubChatChannelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSubChatChannelC2S.prototype.id = 0;
    GamerSubChatChannelC2S.prototype.channel = 0;
    GamerSubChatChannelC2S.prototype.open = false;
    GamerSubChatChannelC2S.create = function create(properties) {
        return new GamerSubChatChannelC2S(properties);
    };
    GamerSubChatChannelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.channel != null && message.hasOwnProperty("channel"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.channel);
        if (message.open != null && message.hasOwnProperty("open"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.open);
        return writer;
    };
    GamerSubChatChannelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSubChatChannelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSubChatChannelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.channel = reader.int32();
                break;
            case 3:
                message.open = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSubChatChannelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSubChatChannelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.channel != null && message.hasOwnProperty("channel"))
            if (!$util.isInteger(message.channel))
                return "channel: integer expected";
        if (message.open != null && message.hasOwnProperty("open"))
            if (typeof message.open !== "boolean")
                return "open: boolean expected";
        return null;
    };
    GamerSubChatChannelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSubChatChannelC2S)
            return object;
        var message = new $root.GamerSubChatChannelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.channel != null)
            message.channel = object.channel | 0;
        if (object.open != null)
            message.open = Boolean(object.open);
        return message;
    };
    GamerSubChatChannelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.channel = 0;
            object.open = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.channel != null && message.hasOwnProperty("channel"))
            object.channel = message.channel;
        if (message.open != null && message.hasOwnProperty("open"))
            object.open = message.open;
        return object;
    };
    GamerSubChatChannelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSubChatChannelC2S;
})();
$root.GamerSubChatChannelS2C = (function() {
    function GamerSubChatChannelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSubChatChannelS2C.prototype.error = 0;
    GamerSubChatChannelS2C.create = function create(properties) {
        return new GamerSubChatChannelS2C(properties);
    };
    GamerSubChatChannelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerSubChatChannelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSubChatChannelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSubChatChannelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSubChatChannelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSubChatChannelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerSubChatChannelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSubChatChannelS2C)
            return object;
        var message = new $root.GamerSubChatChannelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerSubChatChannelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerSubChatChannelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSubChatChannelS2C;
})();
$root.GamerNotifyExpLevelS2C = (function() {
    function GamerNotifyExpLevelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyExpLevelS2C.prototype.error = 0;
    GamerNotifyExpLevelS2C.prototype.exp = 0;
    GamerNotifyExpLevelS2C.prototype.level = 0;
    GamerNotifyExpLevelS2C.create = function create(properties) {
        return new GamerNotifyExpLevelS2C(properties);
    };
    GamerNotifyExpLevelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.exp);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        return writer;
    };
    GamerNotifyExpLevelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyExpLevelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyExpLevelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.exp = reader.int32();
                break;
            case 3:
                message.level = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyExpLevelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyExpLevelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        return null;
    };
    GamerNotifyExpLevelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyExpLevelS2C)
            return object;
        var message = new $root.GamerNotifyExpLevelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.level != null)
            message.level = object.level | 0;
        return message;
    };
    GamerNotifyExpLevelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.exp = 0;
            object.level = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        return object;
    };
    GamerNotifyExpLevelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyExpLevelS2C;
})();
$root.GamerFriendChatC2S = (function() {
    function GamerFriendChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriendChatC2S.prototype.id = 0;
    GamerFriendChatC2S.prototype.toId = 0;
    GamerFriendChatC2S.prototype.msg = "";
    GamerFriendChatC2S.create = function create(properties) {
        return new GamerFriendChatC2S(properties);
    };
    GamerFriendChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.toId != null && message.hasOwnProperty("toId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerFriendChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriendChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriendChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.toId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriendChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriendChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.toId != null && message.hasOwnProperty("toId"))
            if (!$util.isInteger(message.toId))
                return "toId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerFriendChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriendChatC2S)
            return object;
        var message = new $root.GamerFriendChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.toId != null)
            message.toId = object.toId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerFriendChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.toId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.toId != null && message.hasOwnProperty("toId"))
            object.toId = message.toId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerFriendChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriendChatC2S;
})();
$root.GamerFriendChatS2C = (function() {
    function GamerFriendChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriendChatS2C.prototype.error = 0;
    GamerFriendChatS2C.create = function create(properties) {
        return new GamerFriendChatS2C(properties);
    };
    GamerFriendChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerFriendChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriendChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriendChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriendChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriendChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerFriendChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriendChatS2C)
            return object;
        var message = new $root.GamerFriendChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerFriendChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerFriendChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriendChatS2C;
})();
$root.GamerWorldChatC2S = (function() {
    function GamerWorldChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerWorldChatC2S.prototype.id = 0;
    GamerWorldChatC2S.prototype.server = 0;
    GamerWorldChatC2S.prototype.msg = "";
    GamerWorldChatC2S.create = function create(properties) {
        return new GamerWorldChatC2S(properties);
    };
    GamerWorldChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.server != null && message.hasOwnProperty("server"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.server);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerWorldChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerWorldChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerWorldChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.server = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerWorldChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerWorldChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.server != null && message.hasOwnProperty("server"))
            if (!$util.isInteger(message.server))
                return "server: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerWorldChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerWorldChatC2S)
            return object;
        var message = new $root.GamerWorldChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.server != null)
            message.server = object.server | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerWorldChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.server = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.server != null && message.hasOwnProperty("server"))
            object.server = message.server;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerWorldChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerWorldChatC2S;
})();
$root.GamerWorldChatS2C = (function() {
    function GamerWorldChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerWorldChatS2C.prototype.error = 0;
    GamerWorldChatS2C.create = function create(properties) {
        return new GamerWorldChatS2C(properties);
    };
    GamerWorldChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerWorldChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerWorldChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerWorldChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerWorldChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerWorldChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerWorldChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerWorldChatS2C)
            return object;
        var message = new $root.GamerWorldChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerWorldChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerWorldChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerWorldChatS2C;
})();
$root.GamerTestChatC2S = (function() {
    function GamerTestChatC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerTestChatC2S.prototype.id = 0;
    GamerTestChatC2S.prototype.toId = 0;
    GamerTestChatC2S.prototype.msg = "";
    GamerTestChatC2S.create = function create(properties) {
        return new GamerTestChatC2S(properties);
    };
    GamerTestChatC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.toId != null && message.hasOwnProperty("toId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.toId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerTestChatC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerTestChatC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerTestChatC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.toId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerTestChatC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerTestChatC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.toId != null && message.hasOwnProperty("toId"))
            if (!$util.isInteger(message.toId))
                return "toId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerTestChatC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerTestChatC2S)
            return object;
        var message = new $root.GamerTestChatC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.toId != null)
            message.toId = object.toId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerTestChatC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.toId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.toId != null && message.hasOwnProperty("toId"))
            object.toId = message.toId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerTestChatC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerTestChatC2S;
})();
$root.GamerTestChatS2C = (function() {
    function GamerTestChatS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerTestChatS2C.prototype.error = 0;
    GamerTestChatS2C.prototype.id = 0;
    GamerTestChatS2C.create = function create(properties) {
        return new GamerTestChatS2C(properties);
    };
    GamerTestChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
        return writer;
    };
    GamerTestChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerTestChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerTestChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerTestChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerTestChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerTestChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerTestChatS2C)
            return object;
        var message = new $root.GamerTestChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerTestChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.id = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerTestChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerTestChatS2C;
})();
$root.GamerClubRequestC2S = (function() {
    function GamerClubRequestC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerClubRequestC2S.prototype.id = 0;
    GamerClubRequestC2S.prototype.clubId = 0;
    GamerClubRequestC2S.prototype.msg = "";
    GamerClubRequestC2S.create = function create(properties) {
        return new GamerClubRequestC2S(properties);
    };
    GamerClubRequestC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.clubId != null && message.hasOwnProperty("clubId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.clubId);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerClubRequestC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerClubRequestC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerClubRequestC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.clubId = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerClubRequestC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerClubRequestC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.clubId != null && message.hasOwnProperty("clubId"))
            if (!$util.isInteger(message.clubId))
                return "clubId: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerClubRequestC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerClubRequestC2S)
            return object;
        var message = new $root.GamerClubRequestC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.clubId != null)
            message.clubId = object.clubId | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerClubRequestC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.clubId = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.clubId != null && message.hasOwnProperty("clubId"))
            object.clubId = message.clubId;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerClubRequestC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerClubRequestC2S;
})();
$root.GamerClubRequestS2C = (function() {
    function GamerClubRequestS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerClubRequestS2C.prototype.error = 0;
    GamerClubRequestS2C.prototype.id = 0;
    GamerClubRequestS2C.prototype.ok = false;
    GamerClubRequestS2C.create = function create(properties) {
        return new GamerClubRequestS2C(properties);
    };
    GamerClubRequestS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
        if (message.ok != null && message.hasOwnProperty("ok"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ok);
        return writer;
    };
    GamerClubRequestS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerClubRequestS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerClubRequestS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.id = reader.int32();
                break;
            case 3:
                message.ok = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerClubRequestS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerClubRequestS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.ok != null && message.hasOwnProperty("ok"))
            if (typeof message.ok !== "boolean")
                return "ok: boolean expected";
        return null;
    };
    GamerClubRequestS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerClubRequestS2C)
            return object;
        var message = new $root.GamerClubRequestS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.id != null)
            message.id = object.id | 0;
        if (object.ok != null)
            message.ok = Boolean(object.ok);
        return message;
    };
    GamerClubRequestS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.id = 0;
            object.ok = false;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.ok != null && message.hasOwnProperty("ok"))
            object.ok = message.ok;
        return object;
    };
    GamerClubRequestS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerClubRequestS2C;
})();
$root.GamerNotifyNewChatS2C = (function() {
    function GamerNotifyNewChatS2C(properties) {
        this.chats = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewChatS2C.prototype.error = 0;
    GamerNotifyNewChatS2C.prototype.chats = $util.emptyArray;
    GamerNotifyNewChatS2C.create = function create(properties) {
        return new GamerNotifyNewChatS2C(properties);
    };
    GamerNotifyNewChatS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.chats != null && message.chats.length)
            for (var i = 0; i < message.chats.length; ++i)
                $root.ChatData.encode(message.chats[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewChatS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewChatS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewChatS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.chats && message.chats.length))
                    message.chats = [];
                message.chats.push($root.ChatData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewChatS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewChatS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.chats != null && message.hasOwnProperty("chats")) {
            if (!Array.isArray(message.chats))
                return "chats: array expected";
            for (var i = 0; i < message.chats.length; ++i) {
                var error = $root.ChatData.verify(message.chats[i]);
                if (error)
                    return "chats." + error;
            }
        }
        return null;
    };
    GamerNotifyNewChatS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewChatS2C)
            return object;
        var message = new $root.GamerNotifyNewChatS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.chats) {
            if (!Array.isArray(object.chats))
                throw TypeError(".GamerNotifyNewChatS2C.chats: array expected");
            message.chats = [];
            for (var i = 0; i < object.chats.length; ++i) {
                if (typeof object.chats[i] !== "object")
                    throw TypeError(".GamerNotifyNewChatS2C.chats: object expected");
                message.chats[i] = $root.ChatData.fromObject(object.chats[i]);
            }
        }
        return message;
    };
    GamerNotifyNewChatS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.chats = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.chats && message.chats.length) {
            object.chats = [];
            for (var j = 0; j < message.chats.length; ++j)
                object.chats[j] = $root.ChatData.toObject(message.chats[j], options);
        }
        return object;
    };
    GamerNotifyNewChatS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewChatS2C;
})();
$root.GamerNewFriendReqC2S = (function() {
    function GamerNewFriendReqC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNewFriendReqC2S.prototype.id = 0;
    GamerNewFriendReqC2S.prototype.oid = 0;
    GamerNewFriendReqC2S.prototype.msg = "";
    GamerNewFriendReqC2S.create = function create(properties) {
        return new GamerNewFriendReqC2S(properties);
    };
    GamerNewFriendReqC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        return writer;
    };
    GamerNewFriendReqC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNewFriendReqC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNewFriendReqC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            case 3:
                message.msg = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNewFriendReqC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNewFriendReqC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        return null;
    };
    GamerNewFriendReqC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNewFriendReqC2S)
            return object;
        var message = new $root.GamerNewFriendReqC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        return message;
    };
    GamerNewFriendReqC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.oid = 0;
            object.msg = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        return object;
    };
    GamerNewFriendReqC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNewFriendReqC2S;
})();
$root.GamerNewFriendReqS2C = (function() {
    function GamerNewFriendReqS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNewFriendReqS2C.prototype.error = 0;
    GamerNewFriendReqS2C.create = function create(properties) {
        return new GamerNewFriendReqS2C(properties);
    };
    GamerNewFriendReqS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerNewFriendReqS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNewFriendReqS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNewFriendReqS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNewFriendReqS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNewFriendReqS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerNewFriendReqS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNewFriendReqS2C)
            return object;
        var message = new $root.GamerNewFriendReqS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerNewFriendReqS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerNewFriendReqS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNewFriendReqS2C;
})();
$root.GamerNotifyNewFriendReqS2C = (function() {
    function GamerNotifyNewFriendReqS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewFriendReqS2C.prototype.error = 0;
    GamerNotifyNewFriendReqS2C.prototype.request = null;
    GamerNotifyNewFriendReqS2C.create = function create(properties) {
        return new GamerNotifyNewFriendReqS2C(properties);
    };
    GamerNotifyNewFriendReqS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.request != null && message.hasOwnProperty("request"))
            $root.GamerFriendRequest.encode(message.request, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewFriendReqS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewFriendReqS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewFriendReqS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.request = $root.GamerFriendRequest.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewFriendReqS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewFriendReqS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.request != null && message.hasOwnProperty("request")) {
            var error = $root.GamerFriendRequest.verify(message.request);
            if (error)
                return "request." + error;
        }
        return null;
    };
    GamerNotifyNewFriendReqS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewFriendReqS2C)
            return object;
        var message = new $root.GamerNotifyNewFriendReqS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.request != null) {
            if (typeof object.request !== "object")
                throw TypeError(".GamerNotifyNewFriendReqS2C.request: object expected");
            message.request = $root.GamerFriendRequest.fromObject(object.request);
        }
        return message;
    };
    GamerNotifyNewFriendReqS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.request = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.request != null && message.hasOwnProperty("request"))
            object.request = $root.GamerFriendRequest.toObject(message.request, options);
        return object;
    };
    GamerNotifyNewFriendReqS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewFriendReqS2C;
})();
$root.GamerProcessFriendReqC2S = (function() {
    function GamerProcessFriendReqC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerProcessFriendReqC2S.prototype.id = 0;
    GamerProcessFriendReqC2S.prototype.oid = 0;
    GamerProcessFriendReqC2S.prototype.result = false;
    GamerProcessFriendReqC2S.create = function create(properties) {
        return new GamerProcessFriendReqC2S(properties);
    };
    GamerProcessFriendReqC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.oid != null && message.hasOwnProperty("oid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.oid);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.result);
        return writer;
    };
    GamerProcessFriendReqC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerProcessFriendReqC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerProcessFriendReqC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.oid = reader.int32();
                break;
            case 3:
                message.result = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerProcessFriendReqC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerProcessFriendReqC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.oid != null && message.hasOwnProperty("oid"))
            if (!$util.isInteger(message.oid))
                return "oid: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            if (typeof message.result !== "boolean")
                return "result: boolean expected";
        return null;
    };
    GamerProcessFriendReqC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerProcessFriendReqC2S)
            return object;
        var message = new $root.GamerProcessFriendReqC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.oid != null)
            message.oid = object.oid | 0;
        if (object.result != null)
            message.result = Boolean(object.result);
        return message;
    };
    GamerProcessFriendReqC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.oid = 0;
            object.result = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.oid != null && message.hasOwnProperty("oid"))
            object.oid = message.oid;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        return object;
    };
    GamerProcessFriendReqC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerProcessFriendReqC2S;
})();
$root.GamerProcessFriendReqS2C = (function() {
    function GamerProcessFriendReqS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerProcessFriendReqS2C.prototype.error = 0;
    GamerProcessFriendReqS2C.create = function create(properties) {
        return new GamerProcessFriendReqS2C(properties);
    };
    GamerProcessFriendReqS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerProcessFriendReqS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerProcessFriendReqS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerProcessFriendReqS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerProcessFriendReqS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerProcessFriendReqS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerProcessFriendReqS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerProcessFriendReqS2C)
            return object;
        var message = new $root.GamerProcessFriendReqS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerProcessFriendReqS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerProcessFriendReqS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerProcessFriendReqS2C;
})();
$root.GamerNotifyNewFriendS2C = (function() {
    function GamerNotifyNewFriendS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewFriendS2C.prototype.error = 0;
    GamerNotifyNewFriendS2C.prototype.friend = null;
    GamerNotifyNewFriendS2C.create = function create(properties) {
        return new GamerNotifyNewFriendS2C(properties);
    };
    GamerNotifyNewFriendS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.friend != null && message.hasOwnProperty("friend"))
            $root.GamerFriend.encode(message.friend, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewFriendS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewFriendS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewFriendS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.friend = $root.GamerFriend.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewFriendS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewFriendS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.friend != null && message.hasOwnProperty("friend")) {
            var error = $root.GamerFriend.verify(message.friend);
            if (error)
                return "friend." + error;
        }
        return null;
    };
    GamerNotifyNewFriendS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewFriendS2C)
            return object;
        var message = new $root.GamerNotifyNewFriendS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.friend != null) {
            if (typeof object.friend !== "object")
                throw TypeError(".GamerNotifyNewFriendS2C.friend: object expected");
            message.friend = $root.GamerFriend.fromObject(object.friend);
        }
        return message;
    };
    GamerNotifyNewFriendS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.friend = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.friend != null && message.hasOwnProperty("friend"))
            object.friend = $root.GamerFriend.toObject(message.friend, options);
        return object;
    };
    GamerNotifyNewFriendS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewFriendS2C;
})();
$root.GamerNotifyMailS2C = (function() {
    function GamerNotifyMailS2C(properties) {
        this.mails = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyMailS2C.prototype.error = 0;
    GamerNotifyMailS2C.prototype.leftMailNum = 0;
    GamerNotifyMailS2C.prototype.mails = $util.emptyArray;
    GamerNotifyMailS2C.create = function create(properties) {
        return new GamerNotifyMailS2C(properties);
    };
    GamerNotifyMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.leftMailNum != null && message.hasOwnProperty("leftMailNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.leftMailNum);
        if (message.mails != null && message.mails.length)
            for (var i = 0; i < message.mails.length; ++i)
                $root.Mail.encode(message.mails[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerNotifyMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.leftMailNum = reader.int32();
                break;
            case 3:
                if (!(message.mails && message.mails.length))
                    message.mails = [];
                message.mails.push($root.Mail.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.leftMailNum != null && message.hasOwnProperty("leftMailNum"))
            if (!$util.isInteger(message.leftMailNum))
                return "leftMailNum: integer expected";
        if (message.mails != null && message.hasOwnProperty("mails")) {
            if (!Array.isArray(message.mails))
                return "mails: array expected";
            for (var i = 0; i < message.mails.length; ++i) {
                var error = $root.Mail.verify(message.mails[i]);
                if (error)
                    return "mails." + error;
            }
        }
        return null;
    };
    GamerNotifyMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyMailS2C)
            return object;
        var message = new $root.GamerNotifyMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.leftMailNum != null)
            message.leftMailNum = object.leftMailNum | 0;
        if (object.mails) {
            if (!Array.isArray(object.mails))
                throw TypeError(".GamerNotifyMailS2C.mails: array expected");
            message.mails = [];
            for (var i = 0; i < object.mails.length; ++i) {
                if (typeof object.mails[i] !== "object")
                    throw TypeError(".GamerNotifyMailS2C.mails: object expected");
                message.mails[i] = $root.Mail.fromObject(object.mails[i]);
            }
        }
        return message;
    };
    GamerNotifyMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mails = [];
        if (options.defaults) {
            object.error = 0;
            object.leftMailNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.leftMailNum != null && message.hasOwnProperty("leftMailNum"))
            object.leftMailNum = message.leftMailNum;
        if (message.mails && message.mails.length) {
            object.mails = [];
            for (var j = 0; j < message.mails.length; ++j)
                object.mails[j] = $root.Mail.toObject(message.mails[j], options);
        }
        return object;
    };
    GamerNotifyMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyMailS2C;
})();
$root.GamerNotifyNewMailS2C = (function() {
    function GamerNotifyNewMailS2C(properties) {
        this.mails = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewMailS2C.prototype.error = 0;
    GamerNotifyNewMailS2C.prototype.mails = $util.emptyArray;
    GamerNotifyNewMailS2C.create = function create(properties) {
        return new GamerNotifyNewMailS2C(properties);
    };
    GamerNotifyNewMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.mails != null && message.mails.length)
            for (var i = 0; i < message.mails.length; ++i)
                $root.Mail.encode(message.mails[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.mails && message.mails.length))
                    message.mails = [];
                message.mails.push($root.Mail.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.mails != null && message.hasOwnProperty("mails")) {
            if (!Array.isArray(message.mails))
                return "mails: array expected";
            for (var i = 0; i < message.mails.length; ++i) {
                var error = $root.Mail.verify(message.mails[i]);
                if (error)
                    return "mails." + error;
            }
        }
        return null;
    };
    GamerNotifyNewMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewMailS2C)
            return object;
        var message = new $root.GamerNotifyNewMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.mails) {
            if (!Array.isArray(object.mails))
                throw TypeError(".GamerNotifyNewMailS2C.mails: array expected");
            message.mails = [];
            for (var i = 0; i < object.mails.length; ++i) {
                if (typeof object.mails[i] !== "object")
                    throw TypeError(".GamerNotifyNewMailS2C.mails: object expected");
                message.mails[i] = $root.Mail.fromObject(object.mails[i]);
            }
        }
        return message;
    };
    GamerNotifyNewMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mails = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.mails && message.mails.length) {
            object.mails = [];
            for (var j = 0; j < message.mails.length; ++j)
                object.mails[j] = $root.Mail.toObject(message.mails[j], options);
        }
        return object;
    };
    GamerNotifyNewMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewMailS2C;
})();
$root.GamerGetMailC2S = (function() {
    function GamerGetMailC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetMailC2S.prototype.id = 0;
    GamerGetMailC2S.create = function create(properties) {
        return new GamerGetMailC2S(properties);
    };
    GamerGetMailC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetMailC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetMailC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetMailC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetMailC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetMailC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetMailC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetMailC2S)
            return object;
        var message = new $root.GamerGetMailC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetMailC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetMailC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetMailC2S;
})();
$root.GamerGetMailS2C = (function() {
    function GamerGetMailS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetMailS2C.prototype.error = 0;
    GamerGetMailS2C.create = function create(properties) {
        return new GamerGetMailS2C(properties);
    };
    GamerGetMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerGetMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerGetMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetMailS2C)
            return object;
        var message = new $root.GamerGetMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerGetMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerGetMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetMailS2C;
})();
$root.GamerDelMailC2S = (function() {
    function GamerDelMailC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelMailC2S.prototype.id = 0;
    GamerDelMailC2S.prototype.mailId = "";
    GamerDelMailC2S.create = function create(properties) {
        return new GamerDelMailC2S(properties);
    };
    GamerDelMailC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mailId);
        return writer;
    };
    GamerDelMailC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelMailC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelMailC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.mailId = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelMailC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelMailC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            if (!$util.isString(message.mailId))
                return "mailId: string expected";
        return null;
    };
    GamerDelMailC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelMailC2S)
            return object;
        var message = new $root.GamerDelMailC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.mailId != null)
            message.mailId = String(object.mailId);
        return message;
    };
    GamerDelMailC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.mailId = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            object.mailId = message.mailId;
        return object;
    };
    GamerDelMailC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelMailC2S;
})();
$root.GamerDelMailS2C = (function() {
    function GamerDelMailS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelMailS2C.prototype.error = 0;
    GamerDelMailS2C.create = function create(properties) {
        return new GamerDelMailS2C(properties);
    };
    GamerDelMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerDelMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerDelMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelMailS2C)
            return object;
        var message = new $root.GamerDelMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerDelMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerDelMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelMailS2C;
})();
$root.GamerDelHaveReadMailC2S = (function() {
    function GamerDelHaveReadMailC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelHaveReadMailC2S.prototype.id = 0;
    GamerDelHaveReadMailC2S.create = function create(properties) {
        return new GamerDelHaveReadMailC2S(properties);
    };
    GamerDelHaveReadMailC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerDelHaveReadMailC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelHaveReadMailC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelHaveReadMailC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelHaveReadMailC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelHaveReadMailC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerDelHaveReadMailC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelHaveReadMailC2S)
            return object;
        var message = new $root.GamerDelHaveReadMailC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerDelHaveReadMailC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerDelHaveReadMailC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelHaveReadMailC2S;
})();
$root.GamerDelHaveReadMailS2C = (function() {
    function GamerDelHaveReadMailS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerDelHaveReadMailS2C.prototype.error = 0;
    GamerDelHaveReadMailS2C.create = function create(properties) {
        return new GamerDelHaveReadMailS2C(properties);
    };
    GamerDelHaveReadMailS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerDelHaveReadMailS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerDelHaveReadMailS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerDelHaveReadMailS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerDelHaveReadMailS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerDelHaveReadMailS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerDelHaveReadMailS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerDelHaveReadMailS2C)
            return object;
        var message = new $root.GamerDelHaveReadMailS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerDelHaveReadMailS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerDelHaveReadMailS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerDelHaveReadMailS2C;
})();
$root.GamerOneKeyRcvMailRewardC2S = (function() {
    function GamerOneKeyRcvMailRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerOneKeyRcvMailRewardC2S.prototype.id = 0;
    GamerOneKeyRcvMailRewardC2S.create = function create(properties) {
        return new GamerOneKeyRcvMailRewardC2S(properties);
    };
    GamerOneKeyRcvMailRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerOneKeyRcvMailRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerOneKeyRcvMailRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerOneKeyRcvMailRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerOneKeyRcvMailRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerOneKeyRcvMailRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerOneKeyRcvMailRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerOneKeyRcvMailRewardC2S)
            return object;
        var message = new $root.GamerOneKeyRcvMailRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerOneKeyRcvMailRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerOneKeyRcvMailRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerOneKeyRcvMailRewardC2S;
})();
$root.GamerOneKeyRcvMailRewardS2C = (function() {
    function GamerOneKeyRcvMailRewardS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerOneKeyRcvMailRewardS2C.prototype.error = 0;
    GamerOneKeyRcvMailRewardS2C.create = function create(properties) {
        return new GamerOneKeyRcvMailRewardS2C(properties);
    };
    GamerOneKeyRcvMailRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerOneKeyRcvMailRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerOneKeyRcvMailRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerOneKeyRcvMailRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerOneKeyRcvMailRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerOneKeyRcvMailRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerOneKeyRcvMailRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerOneKeyRcvMailRewardS2C)
            return object;
        var message = new $root.GamerOneKeyRcvMailRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerOneKeyRcvMailRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerOneKeyRcvMailRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerOneKeyRcvMailRewardS2C;
})();
$root.GamerChangeMailStateC2S = (function() {
    function GamerChangeMailStateC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeMailStateC2S.prototype.id = 0;
    GamerChangeMailStateC2S.prototype.mailId = "";
    GamerChangeMailStateC2S.prototype.state = 0;
    GamerChangeMailStateC2S.create = function create(properties) {
        return new GamerChangeMailStateC2S(properties);
    };
    GamerChangeMailStateC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.mailId);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
        return writer;
    };
    GamerChangeMailStateC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeMailStateC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeMailStateC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.mailId = reader.string();
                break;
            case 3:
                message.state = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeMailStateC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeMailStateC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            if (!$util.isString(message.mailId))
                return "mailId: string expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        return null;
    };
    GamerChangeMailStateC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeMailStateC2S)
            return object;
        var message = new $root.GamerChangeMailStateC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.mailId != null)
            message.mailId = String(object.mailId);
        switch (object.state) {
        case "MailUnRead":
        case 0:
            message.state = 0;
            break;
        case "MailRead":
        case 1:
            message.state = 1;
            break;
        case "MailReceived":
        case 2:
            message.state = 2;
            break;
        }
        return message;
    };
    GamerChangeMailStateC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.mailId = "";
            object.state = options.enums === String ? "MailUnRead" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.mailId != null && message.hasOwnProperty("mailId"))
            object.mailId = message.mailId;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.MailState[message.state] : message.state;
        return object;
    };
    GamerChangeMailStateC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeMailStateC2S;
})();
$root.GamerChangeMailStateS2C = (function() {
    function GamerChangeMailStateS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeMailStateS2C.prototype.error = 0;
    GamerChangeMailStateS2C.create = function create(properties) {
        return new GamerChangeMailStateS2C(properties);
    };
    GamerChangeMailStateS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerChangeMailStateS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeMailStateS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeMailStateS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeMailStateS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeMailStateS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerChangeMailStateS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeMailStateS2C)
            return object;
        var message = new $root.GamerChangeMailStateS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerChangeMailStateS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerChangeMailStateS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeMailStateS2C;
})();
$root.GamerMatchC2S = (function() {
    function GamerMatchC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMatchC2S.prototype.id = 0;
    GamerMatchC2S.prototype.type = 0;
    GamerMatchC2S.create = function create(properties) {
        return new GamerMatchC2S(properties);
    };
    GamerMatchC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };
    GamerMatchC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMatchC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMatchC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMatchC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMatchC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };
    GamerMatchC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMatchC2S)
            return object;
        var message = new $root.GamerMatchC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };
    GamerMatchC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };
    GamerMatchC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMatchC2S;
})();
$root.GamerMatchS2C = (function() {
    function GamerMatchS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMatchS2C.prototype.error = 0;
    GamerMatchS2C.create = function create(properties) {
        return new GamerMatchS2C(properties);
    };
    GamerMatchS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerMatchS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMatchS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMatchS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMatchS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMatchS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerMatchS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMatchS2C)
            return object;
        var message = new $root.GamerMatchS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerMatchS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerMatchS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMatchS2C;
})();
$root.GamerNotifyMatchInfoS2C = (function() {
    function GamerNotifyMatchInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyMatchInfoS2C.prototype.error = 0;
    GamerNotifyMatchInfoS2C.prototype.matchInfo = null;
    GamerNotifyMatchInfoS2C.prototype.reconn = false;
    GamerNotifyMatchInfoS2C.create = function create(properties) {
        return new GamerNotifyMatchInfoS2C(properties);
    };
    GamerNotifyMatchInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            $root.MatchInfo.encode(message.matchInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.reconn);
        return writer;
    };
    GamerNotifyMatchInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyMatchInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyMatchInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.matchInfo = $root.MatchInfo.decode(reader, reader.uint32());
                break;
            case 3:
                message.reconn = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyMatchInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyMatchInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo")) {
            var error = $root.MatchInfo.verify(message.matchInfo);
            if (error)
                return "matchInfo." + error;
        }
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            if (typeof message.reconn !== "boolean")
                return "reconn: boolean expected";
        return null;
    };
    GamerNotifyMatchInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyMatchInfoS2C)
            return object;
        var message = new $root.GamerNotifyMatchInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.matchInfo != null) {
            if (typeof object.matchInfo !== "object")
                throw TypeError(".GamerNotifyMatchInfoS2C.matchInfo: object expected");
            message.matchInfo = $root.MatchInfo.fromObject(object.matchInfo);
        }
        if (object.reconn != null)
            message.reconn = Boolean(object.reconn);
        return message;
    };
    GamerNotifyMatchInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.matchInfo = null;
            object.reconn = false;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            object.matchInfo = $root.MatchInfo.toObject(message.matchInfo, options);
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            object.reconn = message.reconn;
        return object;
    };
    GamerNotifyMatchInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyMatchInfoS2C;
})();
$root.GamerPVPSyncC2S = (function() {
    function GamerPVPSyncC2S(properties) {
        this.needFrames = [];
        this.crc = [];
        this.agents = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerPVPSyncC2S.prototype.id = 0;
    GamerPVPSyncC2S.prototype.session = "";
    GamerPVPSyncC2S.prototype.input = null;
    GamerPVPSyncC2S.prototype.needFrames = $util.emptyArray;
    GamerPVPSyncC2S.prototype.crc = $util.emptyArray;
    GamerPVPSyncC2S.prototype.agents = $util.emptyArray;
    GamerPVPSyncC2S.prototype.reconn = false;
    GamerPVPSyncC2S.prototype.index = 0;
    GamerPVPSyncC2S.prototype.addr = "";
    GamerPVPSyncC2S.prototype.result = null;
    GamerPVPSyncC2S.create = function create(properties) {
        return new GamerPVPSyncC2S(properties);
    };
    GamerPVPSyncC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        if (message.input != null && message.hasOwnProperty("input"))
            $root.PVPInput.encode(message.input, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.needFrames != null && message.needFrames.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.needFrames.length; ++i)
                writer.int32(message.needFrames[i]);
            writer.ldelim();
        }
        if (message.crc != null && message.crc.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.crc.length; ++i)
                writer.uint64(message.crc[i]);
            writer.ldelim();
        }
        if (message.agents != null && message.agents.length)
            for (var i = 0; i < message.agents.length; ++i)
                $root.PVPInput.encode(message.agents[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.reconn);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.index);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.addr);
        if (message.result != null && message.hasOwnProperty("result"))
            $root.PVPResult.encode(message.result, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        return writer;
    };
    GamerPVPSyncC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerPVPSyncC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerPVPSyncC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            case 3:
                message.input = $root.PVPInput.decode(reader, reader.uint32());
                break;
            case 4:
                if (!(message.needFrames && message.needFrames.length))
                    message.needFrames = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.needFrames.push(reader.int32());
                } else
                    message.needFrames.push(reader.int32());
                break;
            case 5:
                if (!(message.crc && message.crc.length))
                    message.crc = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.crc.push(reader.uint64());
                } else
                    message.crc.push(reader.uint64());
                break;
            case 6:
                if (!(message.agents && message.agents.length))
                    message.agents = [];
                message.agents.push($root.PVPInput.decode(reader, reader.uint32()));
                break;
            case 7:
                message.reconn = reader.bool();
                break;
            case 8:
                message.index = reader.int32();
                break;
            case 9:
                message.addr = reader.string();
                break;
            case 10:
                message.result = $root.PVPResult.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerPVPSyncC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerPVPSyncC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.input != null && message.hasOwnProperty("input")) {
            var error = $root.PVPInput.verify(message.input);
            if (error)
                return "input." + error;
        }
        if (message.needFrames != null && message.hasOwnProperty("needFrames")) {
            if (!Array.isArray(message.needFrames))
                return "needFrames: array expected";
            for (var i = 0; i < message.needFrames.length; ++i)
                if (!$util.isInteger(message.needFrames[i]))
                    return "needFrames: integer[] expected";
        }
        if (message.crc != null && message.hasOwnProperty("crc")) {
            if (!Array.isArray(message.crc))
                return "crc: array expected";
            for (var i = 0; i < message.crc.length; ++i)
                if (!$util.isInteger(message.crc[i]) && !(message.crc[i] && $util.isInteger(message.crc[i].low) && $util.isInteger(message.crc[i].high)))
                    return "crc: integer|Long[] expected";
        }
        if (message.agents != null && message.hasOwnProperty("agents")) {
            if (!Array.isArray(message.agents))
                return "agents: array expected";
            for (var i = 0; i < message.agents.length; ++i) {
                var error = $root.PVPInput.verify(message.agents[i]);
                if (error)
                    return "agents." + error;
            }
        }
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            if (typeof message.reconn !== "boolean")
                return "reconn: boolean expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        if (message.result != null && message.hasOwnProperty("result")) {
            var error = $root.PVPResult.verify(message.result);
            if (error)
                return "result." + error;
        }
        return null;
    };
    GamerPVPSyncC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerPVPSyncC2S)
            return object;
        var message = new $root.GamerPVPSyncC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.input != null) {
            if (typeof object.input !== "object")
                throw TypeError(".GamerPVPSyncC2S.input: object expected");
            message.input = $root.PVPInput.fromObject(object.input);
        }
        if (object.needFrames) {
            if (!Array.isArray(object.needFrames))
                throw TypeError(".GamerPVPSyncC2S.needFrames: array expected");
            message.needFrames = [];
            for (var i = 0; i < object.needFrames.length; ++i)
                message.needFrames[i] = object.needFrames[i] | 0;
        }
        if (object.crc) {
            if (!Array.isArray(object.crc))
                throw TypeError(".GamerPVPSyncC2S.crc: array expected");
            message.crc = [];
            for (var i = 0; i < object.crc.length; ++i)
                if ($util.Long)
                    (message.crc[i] = $util.Long.fromValue(object.crc[i])).unsigned = true;
                else if (typeof object.crc[i] === "string")
                    message.crc[i] = parseInt(object.crc[i], 10);
                else if (typeof object.crc[i] === "number")
                    message.crc[i] = object.crc[i];
                else if (typeof object.crc[i] === "object")
                    message.crc[i] = new $util.LongBits(object.crc[i].low >>> 0, object.crc[i].high >>> 0).toNumber(true);
        }
        if (object.agents) {
            if (!Array.isArray(object.agents))
                throw TypeError(".GamerPVPSyncC2S.agents: array expected");
            message.agents = [];
            for (var i = 0; i < object.agents.length; ++i) {
                if (typeof object.agents[i] !== "object")
                    throw TypeError(".GamerPVPSyncC2S.agents: object expected");
                message.agents[i] = $root.PVPInput.fromObject(object.agents[i]);
            }
        }
        if (object.reconn != null)
            message.reconn = Boolean(object.reconn);
        if (object.index != null)
            message.index = object.index | 0;
        if (object.addr != null)
            message.addr = String(object.addr);
        if (object.result != null) {
            if (typeof object.result !== "object")
                throw TypeError(".GamerPVPSyncC2S.result: object expected");
            message.result = $root.PVPResult.fromObject(object.result);
        }
        return message;
    };
    GamerPVPSyncC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.needFrames = [];
            object.crc = [];
            object.agents = [];
        }
        if (options.defaults) {
            object.id = 0;
            object.session = "";
            object.input = null;
            object.reconn = false;
            object.index = 0;
            object.addr = "";
            object.result = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.input != null && message.hasOwnProperty("input"))
            object.input = $root.PVPInput.toObject(message.input, options);
        if (message.needFrames && message.needFrames.length) {
            object.needFrames = [];
            for (var j = 0; j < message.needFrames.length; ++j)
                object.needFrames[j] = message.needFrames[j];
        }
        if (message.crc && message.crc.length) {
            object.crc = [];
            for (var j = 0; j < message.crc.length; ++j)
                if (typeof message.crc[j] === "number")
                    object.crc[j] = options.longs === String ? String(message.crc[j]) : message.crc[j];
                else
                    object.crc[j] = options.longs === String ? $util.Long.prototype.toString.call(message.crc[j]) : options.longs === Number ? new $util.LongBits(message.crc[j].low >>> 0, message.crc[j].high >>> 0).toNumber(true) : message.crc[j];
        }
        if (message.agents && message.agents.length) {
            object.agents = [];
            for (var j = 0; j < message.agents.length; ++j)
                object.agents[j] = $root.PVPInput.toObject(message.agents[j], options);
        }
        if (message.reconn != null && message.hasOwnProperty("reconn"))
            object.reconn = message.reconn;
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = $root.PVPResult.toObject(message.result, options);
        return object;
    };
    GamerPVPSyncC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerPVPSyncC2S;
})();
$root.GamerPVPSyncS2C = (function() {
    function GamerPVPSyncS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerPVPSyncS2C.prototype.error = 0;
    GamerPVPSyncS2C.create = function create(properties) {
        return new GamerPVPSyncS2C(properties);
    };
    GamerPVPSyncS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerPVPSyncS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerPVPSyncS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerPVPSyncS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerPVPSyncS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerPVPSyncS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerPVPSyncS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerPVPSyncS2C)
            return object;
        var message = new $root.GamerPVPSyncS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerPVPSyncS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerPVPSyncS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerPVPSyncS2C;
})();
$root.GamerNotifyPVPSyncS2C = (function() {
    function GamerNotifyPVPSyncS2C(properties) {
        this.frames = [];
        this.frameData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyPVPSyncS2C.prototype.maxFrameCount = 0;
    GamerNotifyPVPSyncS2C.prototype.frames = $util.emptyArray;
    GamerNotifyPVPSyncS2C.prototype.framesData = $util.newBuffer([]);
    GamerNotifyPVPSyncS2C.prototype.frameData = $util.emptyArray;
    GamerNotifyPVPSyncS2C.prototype.index = 0;
    GamerNotifyPVPSyncS2C.prototype.delta = 0;
    GamerNotifyPVPSyncS2C.prototype.session = "";
    GamerNotifyPVPSyncS2C.create = function create(properties) {
        return new GamerNotifyPVPSyncS2C(properties);
    };
    GamerNotifyPVPSyncS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.maxFrameCount != null && message.hasOwnProperty("maxFrameCount"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.maxFrameCount);
        if (message.frames != null && message.frames.length)
            for (var i = 0; i < message.frames.length; ++i)
                $root.PVPFrame.encode(message.frames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.framesData != null && message.hasOwnProperty("framesData"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.framesData);
        if (message.frameData != null && message.frameData.length)
            for (var i = 0; i < message.frameData.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.frameData[i]);
        if (message.index != null && message.hasOwnProperty("index"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.index);
        if (message.delta != null && message.hasOwnProperty("delta"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.delta);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.session);
        return writer;
    };
    GamerNotifyPVPSyncS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyPVPSyncS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyPVPSyncS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.maxFrameCount = reader.int32();
                break;
            case 2:
                if (!(message.frames && message.frames.length))
                    message.frames = [];
                message.frames.push($root.PVPFrame.decode(reader, reader.uint32()));
                break;
            case 3:
                message.framesData = reader.bytes();
                break;
            case 4:
                if (!(message.frameData && message.frameData.length))
                    message.frameData = [];
                message.frameData.push(reader.bytes());
                break;
            case 5:
                message.index = reader.int32();
                break;
            case 6:
                message.delta = reader.int32();
                break;
            case 7:
                message.session = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyPVPSyncS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyPVPSyncS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.maxFrameCount != null && message.hasOwnProperty("maxFrameCount"))
            if (!$util.isInteger(message.maxFrameCount))
                return "maxFrameCount: integer expected";
        if (message.frames != null && message.hasOwnProperty("frames")) {
            if (!Array.isArray(message.frames))
                return "frames: array expected";
            for (var i = 0; i < message.frames.length; ++i) {
                var error = $root.PVPFrame.verify(message.frames[i]);
                if (error)
                    return "frames." + error;
            }
        }
        if (message.framesData != null && message.hasOwnProperty("framesData"))
            if (!(message.framesData && typeof message.framesData.length === "number" || $util.isString(message.framesData)))
                return "framesData: buffer expected";
        if (message.frameData != null && message.hasOwnProperty("frameData")) {
            if (!Array.isArray(message.frameData))
                return "frameData: array expected";
            for (var i = 0; i < message.frameData.length; ++i)
                if (!(message.frameData[i] && typeof message.frameData[i].length === "number" || $util.isString(message.frameData[i])))
                    return "frameData: buffer[] expected";
        }
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index))
                return "index: integer expected";
        if (message.delta != null && message.hasOwnProperty("delta"))
            if (!$util.isInteger(message.delta))
                return "delta: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        return null;
    };
    GamerNotifyPVPSyncS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyPVPSyncS2C)
            return object;
        var message = new $root.GamerNotifyPVPSyncS2C();
        if (object.maxFrameCount != null)
            message.maxFrameCount = object.maxFrameCount | 0;
        if (object.frames) {
            if (!Array.isArray(object.frames))
                throw TypeError(".GamerNotifyPVPSyncS2C.frames: array expected");
            message.frames = [];
            for (var i = 0; i < object.frames.length; ++i) {
                if (typeof object.frames[i] !== "object")
                    throw TypeError(".GamerNotifyPVPSyncS2C.frames: object expected");
                message.frames[i] = $root.PVPFrame.fromObject(object.frames[i]);
            }
        }
        if (object.framesData != null)
            if (typeof object.framesData === "string")
                $util.base64.decode(object.framesData, message.framesData = $util.newBuffer($util.base64.length(object.framesData)), 0);
            else if (object.framesData.length)
                message.framesData = object.framesData;
        if (object.frameData) {
            if (!Array.isArray(object.frameData))
                throw TypeError(".GamerNotifyPVPSyncS2C.frameData: array expected");
            message.frameData = [];
            for (var i = 0; i < object.frameData.length; ++i)
                if (typeof object.frameData[i] === "string")
                    $util.base64.decode(object.frameData[i], message.frameData[i] = $util.newBuffer($util.base64.length(object.frameData[i])), 0);
                else if (object.frameData[i].length)
                    message.frameData[i] = object.frameData[i];
        }
        if (object.index != null)
            message.index = object.index | 0;
        if (object.delta != null)
            message.delta = object.delta | 0;
        if (object.session != null)
            message.session = String(object.session);
        return message;
    };
    GamerNotifyPVPSyncS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.frames = [];
            object.frameData = [];
        }
        if (options.defaults) {
            object.maxFrameCount = 0;
            if (options.bytes === String)
                object.framesData = "";
            else {
                object.framesData = [];
                if (options.bytes !== Array)
                    object.framesData = $util.newBuffer(object.framesData);
            }
            object.index = 0;
            object.delta = 0;
            object.session = "";
        }
        if (message.maxFrameCount != null && message.hasOwnProperty("maxFrameCount"))
            object.maxFrameCount = message.maxFrameCount;
        if (message.frames && message.frames.length) {
            object.frames = [];
            for (var j = 0; j < message.frames.length; ++j)
                object.frames[j] = $root.PVPFrame.toObject(message.frames[j], options);
        }
        if (message.framesData != null && message.hasOwnProperty("framesData"))
            object.framesData = options.bytes === String ? $util.base64.encode(message.framesData, 0, message.framesData.length) : options.bytes === Array ? Array.prototype.slice.call(message.framesData) : message.framesData;
        if (message.frameData && message.frameData.length) {
            object.frameData = [];
            for (var j = 0; j < message.frameData.length; ++j)
                object.frameData[j] = options.bytes === String ? $util.base64.encode(message.frameData[j], 0, message.frameData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.frameData[j]) : message.frameData[j];
        }
        if (message.index != null && message.hasOwnProperty("index"))
            object.index = message.index;
        if (message.delta != null && message.hasOwnProperty("delta"))
            object.delta = message.delta;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        return object;
    };
    GamerNotifyPVPSyncS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyPVPSyncS2C;
})();
$root.GamerNotifyNewPVPResultS2C = (function() {
    function GamerNotifyNewPVPResultS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyNewPVPResultS2C.prototype.error = 0;
    GamerNotifyNewPVPResultS2C.prototype.icon = 0;
    GamerNotifyNewPVPResultS2C.prototype.oldLengthRank = 0;
    GamerNotifyNewPVPResultS2C.prototype.newLengthRank = 0;
    GamerNotifyNewPVPResultS2C.prototype.result = null;
    GamerNotifyNewPVPResultS2C.create = function create(properties) {
        return new GamerNotifyNewPVPResultS2C(properties);
    };
    GamerNotifyNewPVPResultS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.icon != null && message.hasOwnProperty("icon"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.icon);
        if (message.oldLengthRank != null && message.hasOwnProperty("oldLengthRank"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.oldLengthRank);
        if (message.newLengthRank != null && message.hasOwnProperty("newLengthRank"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.newLengthRank);
        if (message.result != null && message.hasOwnProperty("result"))
            $root.PVPResult.encode(message.result, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GamerNotifyNewPVPResultS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyNewPVPResultS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyNewPVPResultS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.icon = reader.int32();
                break;
            case 3:
                message.oldLengthRank = reader.int32();
                break;
            case 4:
                message.newLengthRank = reader.int32();
                break;
            case 5:
                message.result = $root.PVPResult.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyNewPVPResultS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyNewPVPResultS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isInteger(message.icon))
                return "icon: integer expected";
        if (message.oldLengthRank != null && message.hasOwnProperty("oldLengthRank"))
            if (!$util.isInteger(message.oldLengthRank))
                return "oldLengthRank: integer expected";
        if (message.newLengthRank != null && message.hasOwnProperty("newLengthRank"))
            if (!$util.isInteger(message.newLengthRank))
                return "newLengthRank: integer expected";
        if (message.result != null && message.hasOwnProperty("result")) {
            var error = $root.PVPResult.verify(message.result);
            if (error)
                return "result." + error;
        }
        return null;
    };
    GamerNotifyNewPVPResultS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyNewPVPResultS2C)
            return object;
        var message = new $root.GamerNotifyNewPVPResultS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.icon != null)
            message.icon = object.icon | 0;
        if (object.oldLengthRank != null)
            message.oldLengthRank = object.oldLengthRank | 0;
        if (object.newLengthRank != null)
            message.newLengthRank = object.newLengthRank | 0;
        if (object.result != null) {
            if (typeof object.result !== "object")
                throw TypeError(".GamerNotifyNewPVPResultS2C.result: object expected");
            message.result = $root.PVPResult.fromObject(object.result);
        }
        return message;
    };
    GamerNotifyNewPVPResultS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.icon = 0;
            object.oldLengthRank = 0;
            object.newLengthRank = 0;
            object.result = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.oldLengthRank != null && message.hasOwnProperty("oldLengthRank"))
            object.oldLengthRank = message.oldLengthRank;
        if (message.newLengthRank != null && message.hasOwnProperty("newLengthRank"))
            object.newLengthRank = message.newLengthRank;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = $root.PVPResult.toObject(message.result, options);
        return object;
    };
    GamerNotifyNewPVPResultS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyNewPVPResultS2C;
})();
$root.GamerNotifyIconChangeS2C = (function() {
    function GamerNotifyIconChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyIconChangeS2C.prototype.error = 0;
    GamerNotifyIconChangeS2C.prototype.icon = 0;
    GamerNotifyIconChangeS2C.create = function create(properties) {
        return new GamerNotifyIconChangeS2C(properties);
    };
    GamerNotifyIconChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.icon != null && message.hasOwnProperty("icon"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.icon);
        return writer;
    };
    GamerNotifyIconChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyIconChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyIconChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.icon = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyIconChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyIconChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isInteger(message.icon))
                return "icon: integer expected";
        return null;
    };
    GamerNotifyIconChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyIconChangeS2C)
            return object;
        var message = new $root.GamerNotifyIconChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.icon != null)
            message.icon = object.icon | 0;
        return message;
    };
    GamerNotifyIconChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.icon = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        return object;
    };
    GamerNotifyIconChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyIconChangeS2C;
})();
$root.GamerGetRealTimeRankC2S = (function() {
    function GamerGetRealTimeRankC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetRealTimeRankC2S.prototype.id = 0;
    GamerGetRealTimeRankC2S.create = function create(properties) {
        return new GamerGetRealTimeRankC2S(properties);
    };
    GamerGetRealTimeRankC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetRealTimeRankC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetRealTimeRankC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetRealTimeRankC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetRealTimeRankC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetRealTimeRankC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetRealTimeRankC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetRealTimeRankC2S)
            return object;
        var message = new $root.GamerGetRealTimeRankC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetRealTimeRankC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetRealTimeRankC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetRealTimeRankC2S;
})();
$root.GamerGetRealTimeRankS2C = (function() {
    function GamerGetRealTimeRankS2C(properties) {
        this.ranks = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetRealTimeRankS2C.prototype.error = 0;
    GamerGetRealTimeRankS2C.prototype.ranks = $util.emptyArray;
    GamerGetRealTimeRankS2C.create = function create(properties) {
        return new GamerGetRealTimeRankS2C(properties);
    };
    GamerGetRealTimeRankS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.ranks != null && message.ranks.length)
            for (var i = 0; i < message.ranks.length; ++i)
                $root.RankLength.encode(message.ranks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetRealTimeRankS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetRealTimeRankS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetRealTimeRankS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.ranks && message.ranks.length))
                    message.ranks = [];
                message.ranks.push($root.RankLength.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetRealTimeRankS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetRealTimeRankS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.ranks != null && message.hasOwnProperty("ranks")) {
            if (!Array.isArray(message.ranks))
                return "ranks: array expected";
            for (var i = 0; i < message.ranks.length; ++i) {
                var error = $root.RankLength.verify(message.ranks[i]);
                if (error)
                    return "ranks." + error;
            }
        }
        return null;
    };
    GamerGetRealTimeRankS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetRealTimeRankS2C)
            return object;
        var message = new $root.GamerGetRealTimeRankS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.ranks) {
            if (!Array.isArray(object.ranks))
                throw TypeError(".GamerGetRealTimeRankS2C.ranks: array expected");
            message.ranks = [];
            for (var i = 0; i < object.ranks.length; ++i) {
                if (typeof object.ranks[i] !== "object")
                    throw TypeError(".GamerGetRealTimeRankS2C.ranks: object expected");
                message.ranks[i] = $root.RankLength.fromObject(object.ranks[i]);
            }
        }
        return message;
    };
    GamerGetRealTimeRankS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.ranks = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.ranks && message.ranks.length) {
            object.ranks = [];
            for (var j = 0; j < message.ranks.length; ++j)
                object.ranks[j] = $root.RankLength.toObject(message.ranks[j], options);
        }
        return object;
    };
    GamerGetRealTimeRankS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetRealTimeRankS2C;
})();
$root.GamerCheckPVPBattleC2S = (function() {
    function GamerCheckPVPBattleC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCheckPVPBattleC2S.prototype.id = 0;
    GamerCheckPVPBattleC2S.prototype.session = "";
    GamerCheckPVPBattleC2S.create = function create(properties) {
        return new GamerCheckPVPBattleC2S(properties);
    };
    GamerCheckPVPBattleC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.session);
        return writer;
    };
    GamerCheckPVPBattleC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCheckPVPBattleC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCheckPVPBattleC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.session = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCheckPVPBattleC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCheckPVPBattleC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        return null;
    };
    GamerCheckPVPBattleC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCheckPVPBattleC2S)
            return object;
        var message = new $root.GamerCheckPVPBattleC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.session != null)
            message.session = String(object.session);
        return message;
    };
    GamerCheckPVPBattleC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.session = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        return object;
    };
    GamerCheckPVPBattleC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCheckPVPBattleC2S;
})();
$root.GamerCheckPVPBattleS2C = (function() {
    function GamerCheckPVPBattleS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCheckPVPBattleS2C.prototype.error = 0;
    GamerCheckPVPBattleS2C.prototype.matchInfo = null;
    GamerCheckPVPBattleS2C.create = function create(properties) {
        return new GamerCheckPVPBattleS2C(properties);
    };
    GamerCheckPVPBattleS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            $root.MatchInfo.encode(message.matchInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerCheckPVPBattleS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCheckPVPBattleS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCheckPVPBattleS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.matchInfo = $root.MatchInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCheckPVPBattleS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCheckPVPBattleS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo")) {
            var error = $root.MatchInfo.verify(message.matchInfo);
            if (error)
                return "matchInfo." + error;
        }
        return null;
    };
    GamerCheckPVPBattleS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCheckPVPBattleS2C)
            return object;
        var message = new $root.GamerCheckPVPBattleS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.matchInfo != null) {
            if (typeof object.matchInfo !== "object")
                throw TypeError(".GamerCheckPVPBattleS2C.matchInfo: object expected");
            message.matchInfo = $root.MatchInfo.fromObject(object.matchInfo);
        }
        return message;
    };
    GamerCheckPVPBattleS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.matchInfo = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            object.matchInfo = $root.MatchInfo.toObject(message.matchInfo, options);
        return object;
    };
    GamerCheckPVPBattleS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCheckPVPBattleS2C;
})();
$root.GamerUploadWXInfoC2S = (function() {
    function GamerUploadWXInfoC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUploadWXInfoC2S.prototype.id = 0;
    GamerUploadWXInfoC2S.prototype.wxInfo = null;
    GamerUploadWXInfoC2S.create = function create(properties) {
        return new GamerUploadWXInfoC2S(properties);
    };
    GamerUploadWXInfoC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.wxInfo != null && message.hasOwnProperty("wxInfo"))
            $root.WXInfo.encode(message.wxInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerUploadWXInfoC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUploadWXInfoC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUploadWXInfoC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.wxInfo = $root.WXInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUploadWXInfoC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUploadWXInfoC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.wxInfo != null && message.hasOwnProperty("wxInfo")) {
            var error = $root.WXInfo.verify(message.wxInfo);
            if (error)
                return "wxInfo." + error;
        }
        return null;
    };
    GamerUploadWXInfoC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUploadWXInfoC2S)
            return object;
        var message = new $root.GamerUploadWXInfoC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.wxInfo != null) {
            if (typeof object.wxInfo !== "object")
                throw TypeError(".GamerUploadWXInfoC2S.wxInfo: object expected");
            message.wxInfo = $root.WXInfo.fromObject(object.wxInfo);
        }
        return message;
    };
    GamerUploadWXInfoC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.wxInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.wxInfo != null && message.hasOwnProperty("wxInfo"))
            object.wxInfo = $root.WXInfo.toObject(message.wxInfo, options);
        return object;
    };
    GamerUploadWXInfoC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUploadWXInfoC2S;
})();
$root.GamerUploadWXInfoS2C = (function() {
    function GamerUploadWXInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUploadWXInfoS2C.prototype.error = 0;
    GamerUploadWXInfoS2C.create = function create(properties) {
        return new GamerUploadWXInfoS2C(properties);
    };
    GamerUploadWXInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerUploadWXInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUploadWXInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUploadWXInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUploadWXInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUploadWXInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerUploadWXInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUploadWXInfoS2C)
            return object;
        var message = new $root.GamerUploadWXInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerUploadWXInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerUploadWXInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUploadWXInfoS2C;
})();
$root.CreateLeagueC2S = (function() {
    function CreateLeagueC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CreateLeagueC2S.prototype.id = 0;
    CreateLeagueC2S.prototype.name = "";
    CreateLeagueC2S.prototype.declaration = "";
    CreateLeagueC2S.create = function create(properties) {
        return new CreateLeagueC2S(properties);
    };
    CreateLeagueC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.declaration != null && message.hasOwnProperty("declaration"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.declaration);
        return writer;
    };
    CreateLeagueC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CreateLeagueC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CreateLeagueC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.declaration = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CreateLeagueC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CreateLeagueC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.declaration != null && message.hasOwnProperty("declaration"))
            if (!$util.isString(message.declaration))
                return "declaration: string expected";
        return null;
    };
    CreateLeagueC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.CreateLeagueC2S)
            return object;
        var message = new $root.CreateLeagueC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.declaration != null)
            message.declaration = String(object.declaration);
        return message;
    };
    CreateLeagueC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.declaration = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.declaration != null && message.hasOwnProperty("declaration"))
            object.declaration = message.declaration;
        return object;
    };
    CreateLeagueC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CreateLeagueC2S;
})();
$root.CreateLeagueS2C = (function() {
    function CreateLeagueS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CreateLeagueS2C.prototype.error = 0;
    CreateLeagueS2C.prototype.data = null;
    CreateLeagueS2C.create = function create(properties) {
        return new CreateLeagueS2C(properties);
    };
    CreateLeagueS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.LeagueData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    CreateLeagueS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CreateLeagueS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CreateLeagueS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.LeagueData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CreateLeagueS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CreateLeagueS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.LeagueData.verify(message.data);
            if (error)
                return "data." + error;
        }
        return null;
    };
    CreateLeagueS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.CreateLeagueS2C)
            return object;
        var message = new $root.CreateLeagueS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".CreateLeagueS2C.data: object expected");
            message.data = $root.LeagueData.fromObject(object.data);
        }
        return message;
    };
    CreateLeagueS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.LeagueData.toObject(message.data, options);
        return object;
    };
    CreateLeagueS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CreateLeagueS2C;
})();
$root.GamerNotifyLeagueDataS2C = (function() {
    function GamerNotifyLeagueDataS2C(properties) {
        this.onlineGamerList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyLeagueDataS2C.prototype.error = 0;
    GamerNotifyLeagueDataS2C.prototype.data = null;
    GamerNotifyLeagueDataS2C.prototype.onlineGamerList = $util.emptyArray;
    GamerNotifyLeagueDataS2C.create = function create(properties) {
        return new GamerNotifyLeagueDataS2C(properties);
    };
    GamerNotifyLeagueDataS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.LeagueData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.onlineGamerList != null && message.onlineGamerList.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.onlineGamerList.length; ++i)
                writer.int32(message.onlineGamerList[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerNotifyLeagueDataS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyLeagueDataS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyLeagueDataS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.LeagueData.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.onlineGamerList && message.onlineGamerList.length))
                    message.onlineGamerList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.onlineGamerList.push(reader.int32());
                } else
                    message.onlineGamerList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyLeagueDataS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyLeagueDataS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.LeagueData.verify(message.data);
            if (error)
                return "data." + error;
        }
        if (message.onlineGamerList != null && message.hasOwnProperty("onlineGamerList")) {
            if (!Array.isArray(message.onlineGamerList))
                return "onlineGamerList: array expected";
            for (var i = 0; i < message.onlineGamerList.length; ++i)
                if (!$util.isInteger(message.onlineGamerList[i]))
                    return "onlineGamerList: integer[] expected";
        }
        return null;
    };
    GamerNotifyLeagueDataS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyLeagueDataS2C)
            return object;
        var message = new $root.GamerNotifyLeagueDataS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".GamerNotifyLeagueDataS2C.data: object expected");
            message.data = $root.LeagueData.fromObject(object.data);
        }
        if (object.onlineGamerList) {
            if (!Array.isArray(object.onlineGamerList))
                throw TypeError(".GamerNotifyLeagueDataS2C.onlineGamerList: array expected");
            message.onlineGamerList = [];
            for (var i = 0; i < object.onlineGamerList.length; ++i)
                message.onlineGamerList[i] = object.onlineGamerList[i] | 0;
        }
        return message;
    };
    GamerNotifyLeagueDataS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.onlineGamerList = [];
        if (options.defaults) {
            object.error = 0;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.LeagueData.toObject(message.data, options);
        if (message.onlineGamerList && message.onlineGamerList.length) {
            object.onlineGamerList = [];
            for (var j = 0; j < message.onlineGamerList.length; ++j)
                object.onlineGamerList[j] = message.onlineGamerList[j];
        }
        return object;
    };
    GamerNotifyLeagueDataS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyLeagueDataS2C;
})();
$root.GamerNotifyLeagueGamerOnlineS2C = (function() {
    function GamerNotifyLeagueGamerOnlineS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyLeagueGamerOnlineS2C.prototype.error = 0;
    GamerNotifyLeagueGamerOnlineS2C.prototype.gid = 0;
    GamerNotifyLeagueGamerOnlineS2C.create = function create(properties) {
        return new GamerNotifyLeagueGamerOnlineS2C(properties);
    };
    GamerNotifyLeagueGamerOnlineS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gid);
        return writer;
    };
    GamerNotifyLeagueGamerOnlineS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyLeagueGamerOnlineS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyLeagueGamerOnlineS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyLeagueGamerOnlineS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyLeagueGamerOnlineS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        return null;
    };
    GamerNotifyLeagueGamerOnlineS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyLeagueGamerOnlineS2C)
            return object;
        var message = new $root.GamerNotifyLeagueGamerOnlineS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gid != null)
            message.gid = object.gid | 0;
        return message;
    };
    GamerNotifyLeagueGamerOnlineS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.gid = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        return object;
    };
    GamerNotifyLeagueGamerOnlineS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyLeagueGamerOnlineS2C;
})();
$root.GamerGetBackpackC2S = (function() {
    function GamerGetBackpackC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetBackpackC2S.prototype.id = 0;
    GamerGetBackpackC2S.create = function create(properties) {
        return new GamerGetBackpackC2S(properties);
    };
    GamerGetBackpackC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetBackpackC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetBackpackC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetBackpackC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetBackpackC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetBackpackC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetBackpackC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetBackpackC2S)
            return object;
        var message = new $root.GamerGetBackpackC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetBackpackC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetBackpackC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetBackpackC2S;
})();
$root.GamerGetBackpackS2C = (function() {
    function GamerGetBackpackS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetBackpackS2C.prototype.error = 0;
    GamerGetBackpackS2C.prototype.items = $util.emptyArray;
    GamerGetBackpackS2C.create = function create(properties) {
        return new GamerGetBackpackS2C(properties);
    };
    GamerGetBackpackS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetBackpackS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetBackpackS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetBackpackS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetBackpackS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetBackpackS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerGetBackpackS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetBackpackS2C)
            return object;
        var message = new $root.GamerGetBackpackS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerGetBackpackS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerGetBackpackS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerGetBackpackS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerGetBackpackS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetBackpackS2C;
})();
$root.GamerNotifyItemS2C = (function() {
    function GamerNotifyItemS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyItemS2C.prototype.error = 0;
    GamerNotifyItemS2C.prototype.item = null;
    GamerNotifyItemS2C.create = function create(properties) {
        return new GamerNotifyItemS2C(properties);
    };
    GamerNotifyItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.item != null && message.hasOwnProperty("item"))
            $root.GameItem.encode(message.item, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.item = $root.GameItem.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.item != null && message.hasOwnProperty("item")) {
            var error = $root.GameItem.verify(message.item);
            if (error)
                return "item." + error;
        }
        return null;
    };
    GamerNotifyItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyItemS2C)
            return object;
        var message = new $root.GamerNotifyItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.item != null) {
            if (typeof object.item !== "object")
                throw TypeError(".GamerNotifyItemS2C.item: object expected");
            message.item = $root.GameItem.fromObject(object.item);
        }
        return message;
    };
    GamerNotifyItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.item = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.item != null && message.hasOwnProperty("item"))
            object.item = $root.GameItem.toObject(message.item, options);
        return object;
    };
    GamerNotifyItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyItemS2C;
})();
$root.GamerSellItemC2S = (function() {
    function GamerSellItemC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSellItemC2S.prototype.id = 0;
    GamerSellItemC2S.prototype.itemId = 0;
    GamerSellItemC2S.prototype.num = 0;
    GamerSellItemC2S.create = function create(properties) {
        return new GamerSellItemC2S(properties);
    };
    GamerSellItemC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
        return writer;
    };
    GamerSellItemC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSellItemC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSellItemC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            case 3:
                message.num = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSellItemC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSellItemC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        return null;
    };
    GamerSellItemC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSellItemC2S)
            return object;
        var message = new $root.GamerSellItemC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.num != null)
            message.num = object.num | 0;
        return message;
    };
    GamerSellItemC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.itemId = 0;
            object.num = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        return object;
    };
    GamerSellItemC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSellItemC2S;
})();
$root.GamerSellItemS2C = (function() {
    function GamerSellItemS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSellItemS2C.prototype.error = 0;
    GamerSellItemS2C.create = function create(properties) {
        return new GamerSellItemS2C(properties);
    };
    GamerSellItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerSellItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSellItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSellItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSellItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSellItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerSellItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSellItemS2C)
            return object;
        var message = new $root.GamerSellItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerSellItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerSellItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSellItemS2C;
})();
$root.GamerUseItemC2S = (function() {
    function GamerUseItemC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseItemC2S.prototype.id = 0;
    GamerUseItemC2S.prototype.itemId = 0;
    GamerUseItemC2S.prototype.num = 0;
    GamerUseItemC2S.create = function create(properties) {
        return new GamerUseItemC2S(properties);
    };
    GamerUseItemC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
        return writer;
    };
    GamerUseItemC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseItemC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseItemC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            case 3:
                message.num = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseItemC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseItemC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        return null;
    };
    GamerUseItemC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseItemC2S)
            return object;
        var message = new $root.GamerUseItemC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.num != null)
            message.num = object.num | 0;
        return message;
    };
    GamerUseItemC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.itemId = 0;
            object.num = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        return object;
    };
    GamerUseItemC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseItemC2S;
})();
$root.GamerUseItemS2C = (function() {
    function GamerUseItemS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerUseItemS2C.prototype.error = 0;
    GamerUseItemS2C.prototype.useItemId = 0;
    GamerUseItemS2C.prototype.items = $util.emptyArray;
    GamerUseItemS2C.create = function create(properties) {
        return new GamerUseItemS2C(properties);
    };
    GamerUseItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.useItemId != null && message.hasOwnProperty("useItemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.useItemId);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerUseItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerUseItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerUseItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.useItemId = reader.int32();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerUseItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerUseItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.useItemId != null && message.hasOwnProperty("useItemId"))
            if (!$util.isInteger(message.useItemId))
                return "useItemId: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerUseItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerUseItemS2C)
            return object;
        var message = new $root.GamerUseItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.useItemId != null)
            message.useItemId = object.useItemId | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerUseItemS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerUseItemS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerUseItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.useItemId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.useItemId != null && message.hasOwnProperty("useItemId"))
            object.useItemId = message.useItemId;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerUseItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerUseItemS2C;
})();
$root.GamerCompoundItemC2S = (function() {
    function GamerCompoundItemC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCompoundItemC2S.prototype.id = 0;
    GamerCompoundItemC2S.prototype.itemId = 0;
    GamerCompoundItemC2S.prototype.num = 0;
    GamerCompoundItemC2S.create = function create(properties) {
        return new GamerCompoundItemC2S(properties);
    };
    GamerCompoundItemC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.itemId);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.num);
        return writer;
    };
    GamerCompoundItemC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCompoundItemC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCompoundItemC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 3:
                message.itemId = reader.int32();
                break;
            case 4:
                message.num = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCompoundItemC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCompoundItemC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        return null;
    };
    GamerCompoundItemC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCompoundItemC2S)
            return object;
        var message = new $root.GamerCompoundItemC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.num != null)
            message.num = object.num | 0;
        return message;
    };
    GamerCompoundItemC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.itemId = 0;
            object.num = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        return object;
    };
    GamerCompoundItemC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCompoundItemC2S;
})();
$root.GamerCompoundItemS2C = (function() {
    function GamerCompoundItemS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerCompoundItemS2C.prototype.error = 0;
    GamerCompoundItemS2C.create = function create(properties) {
        return new GamerCompoundItemS2C(properties);
    };
    GamerCompoundItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerCompoundItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerCompoundItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerCompoundItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerCompoundItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerCompoundItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerCompoundItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerCompoundItemS2C)
            return object;
        var message = new $root.GamerCompoundItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerCompoundItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerCompoundItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerCompoundItemS2C;
})();
$root.GamerSplitItemC2S = (function() {
    function GamerSplitItemC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSplitItemC2S.prototype.id = 0;
    GamerSplitItemC2S.prototype.itemId = 0;
    GamerSplitItemC2S.prototype.num = 0;
    GamerSplitItemC2S.create = function create(properties) {
        return new GamerSplitItemC2S(properties);
    };
    GamerSplitItemC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        if (message.num != null && message.hasOwnProperty("num"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.num);
        return writer;
    };
    GamerSplitItemC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSplitItemC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSplitItemC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            case 3:
                message.num = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSplitItemC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSplitItemC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.num != null && message.hasOwnProperty("num"))
            if (!$util.isInteger(message.num))
                return "num: integer expected";
        return null;
    };
    GamerSplitItemC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSplitItemC2S)
            return object;
        var message = new $root.GamerSplitItemC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.num != null)
            message.num = object.num | 0;
        return message;
    };
    GamerSplitItemC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.itemId = 0;
            object.num = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.num != null && message.hasOwnProperty("num"))
            object.num = message.num;
        return object;
    };
    GamerSplitItemC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSplitItemC2S;
})();
$root.GamerSplitItemS2C = (function() {
    function GamerSplitItemS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerSplitItemS2C.prototype.error = 0;
    GamerSplitItemS2C.create = function create(properties) {
        return new GamerSplitItemS2C(properties);
    };
    GamerSplitItemS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerSplitItemS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerSplitItemS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerSplitItemS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerSplitItemS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerSplitItemS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerSplitItemS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerSplitItemS2C)
            return object;
        var message = new $root.GamerSplitItemS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerSplitItemS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerSplitItemS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerSplitItemS2C;
})();
$root.GamerNotifyItemChangeS2C = (function() {
    function GamerNotifyItemChangeS2C(properties) {
        this.itemsChange = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyItemChangeS2C.prototype.error = 0;
    GamerNotifyItemChangeS2C.prototype.itemsChange = $util.emptyArray;
    GamerNotifyItemChangeS2C.create = function create(properties) {
        return new GamerNotifyItemChangeS2C(properties);
    };
    GamerNotifyItemChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.itemsChange != null && message.itemsChange.length)
            for (var i = 0; i < message.itemsChange.length; ++i)
                $root.GameItem.encode(message.itemsChange[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyItemChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyItemChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyItemChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.itemsChange && message.itemsChange.length))
                    message.itemsChange = [];
                message.itemsChange.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyItemChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyItemChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.itemsChange != null && message.hasOwnProperty("itemsChange")) {
            if (!Array.isArray(message.itemsChange))
                return "itemsChange: array expected";
            for (var i = 0; i < message.itemsChange.length; ++i) {
                var error = $root.GameItem.verify(message.itemsChange[i]);
                if (error)
                    return "itemsChange." + error;
            }
        }
        return null;
    };
    GamerNotifyItemChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyItemChangeS2C)
            return object;
        var message = new $root.GamerNotifyItemChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.itemsChange) {
            if (!Array.isArray(object.itemsChange))
                throw TypeError(".GamerNotifyItemChangeS2C.itemsChange: array expected");
            message.itemsChange = [];
            for (var i = 0; i < object.itemsChange.length; ++i) {
                if (typeof object.itemsChange[i] !== "object")
                    throw TypeError(".GamerNotifyItemChangeS2C.itemsChange: object expected");
                message.itemsChange[i] = $root.GameItem.fromObject(object.itemsChange[i]);
            }
        }
        return message;
    };
    GamerNotifyItemChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.itemsChange = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.itemsChange && message.itemsChange.length) {
            object.itemsChange = [];
            for (var j = 0; j < message.itemsChange.length; ++j)
                object.itemsChange[j] = $root.GameItem.toObject(message.itemsChange[j], options);
        }
        return object;
    };
    GamerNotifyItemChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyItemChangeS2C;
})();
$root.GamerGetActorListC2S = (function() {
    function GamerGetActorListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetActorListC2S.prototype.id = 0;
    GamerGetActorListC2S.create = function create(properties) {
        return new GamerGetActorListC2S(properties);
    };
    GamerGetActorListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetActorListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetActorListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetActorListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetActorListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetActorListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetActorListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetActorListC2S)
            return object;
        var message = new $root.GamerGetActorListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetActorListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetActorListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetActorListC2S;
})();
$root.GamerGetActorListS2C = (function() {
    function GamerGetActorListS2C(properties) {
        this.actors = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetActorListS2C.prototype.error = 0;
    GamerGetActorListS2C.prototype.maxActorNum = 0;
    GamerGetActorListS2C.prototype.actors = $util.emptyArray;
    GamerGetActorListS2C.create = function create(properties) {
        return new GamerGetActorListS2C(properties);
    };
    GamerGetActorListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.maxActorNum != null && message.hasOwnProperty("maxActorNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxActorNum);
        if (message.actors != null && message.actors.length)
            for (var i = 0; i < message.actors.length; ++i)
                $root.Actor.encode(message.actors[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerGetActorListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetActorListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetActorListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.maxActorNum = reader.int32();
                break;
            case 3:
                if (!(message.actors && message.actors.length))
                    message.actors = [];
                message.actors.push($root.Actor.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetActorListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetActorListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.maxActorNum != null && message.hasOwnProperty("maxActorNum"))
            if (!$util.isInteger(message.maxActorNum))
                return "maxActorNum: integer expected";
        if (message.actors != null && message.hasOwnProperty("actors")) {
            if (!Array.isArray(message.actors))
                return "actors: array expected";
            for (var i = 0; i < message.actors.length; ++i) {
                var error = $root.Actor.verify(message.actors[i]);
                if (error)
                    return "actors." + error;
            }
        }
        return null;
    };
    GamerGetActorListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetActorListS2C)
            return object;
        var message = new $root.GamerGetActorListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.maxActorNum != null)
            message.maxActorNum = object.maxActorNum | 0;
        if (object.actors) {
            if (!Array.isArray(object.actors))
                throw TypeError(".GamerGetActorListS2C.actors: array expected");
            message.actors = [];
            for (var i = 0; i < object.actors.length; ++i) {
                if (typeof object.actors[i] !== "object")
                    throw TypeError(".GamerGetActorListS2C.actors: object expected");
                message.actors[i] = $root.Actor.fromObject(object.actors[i]);
            }
        }
        return message;
    };
    GamerGetActorListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.actors = [];
        if (options.defaults) {
            object.error = 0;
            object.maxActorNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.maxActorNum != null && message.hasOwnProperty("maxActorNum"))
            object.maxActorNum = message.maxActorNum;
        if (message.actors && message.actors.length) {
            object.actors = [];
            for (var j = 0; j < message.actors.length; ++j)
                object.actors[j] = $root.Actor.toObject(message.actors[j], options);
        }
        return object;
    };
    GamerGetActorListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetActorListS2C;
})();
$root.GamerChangeActorNameC2S = (function() {
    function GamerChangeActorNameC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeActorNameC2S.prototype.id = 0;
    GamerChangeActorNameC2S.prototype.actorId = 0;
    GamerChangeActorNameC2S.prototype.name = "";
    GamerChangeActorNameC2S.create = function create(properties) {
        return new GamerChangeActorNameC2S(properties);
    };
    GamerChangeActorNameC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        return writer;
    };
    GamerChangeActorNameC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeActorNameC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeActorNameC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeActorNameC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeActorNameC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };
    GamerChangeActorNameC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeActorNameC2S)
            return object;
        var message = new $root.GamerChangeActorNameC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };
    GamerChangeActorNameC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };
    GamerChangeActorNameC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeActorNameC2S;
})();
$root.GamerChangeActorNameS2C = (function() {
    function GamerChangeActorNameS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeActorNameS2C.prototype.error = 0;
    GamerChangeActorNameS2C.create = function create(properties) {
        return new GamerChangeActorNameS2C(properties);
    };
    GamerChangeActorNameS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerChangeActorNameS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeActorNameS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeActorNameS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeActorNameS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeActorNameS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerChangeActorNameS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeActorNameS2C)
            return object;
        var message = new $root.GamerChangeActorNameS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerChangeActorNameS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerChangeActorNameS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeActorNameS2C;
})();
$root.GamerActorUpLevelC2S = (function() {
    function GamerActorUpLevelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorUpLevelC2S.prototype.id = 0;
    GamerActorUpLevelC2S.prototype.actorId = 0;
    GamerActorUpLevelC2S.create = function create(properties) {
        return new GamerActorUpLevelC2S(properties);
    };
    GamerActorUpLevelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        return writer;
    };
    GamerActorUpLevelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorUpLevelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorUpLevelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorUpLevelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorUpLevelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    GamerActorUpLevelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorUpLevelC2S)
            return object;
        var message = new $root.GamerActorUpLevelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    GamerActorUpLevelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    GamerActorUpLevelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorUpLevelC2S;
})();
$root.GamerActorUpLevelS2C = (function() {
    function GamerActorUpLevelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorUpLevelS2C.prototype.error = 0;
    GamerActorUpLevelS2C.create = function create(properties) {
        return new GamerActorUpLevelS2C(properties);
    };
    GamerActorUpLevelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorUpLevelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorUpLevelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorUpLevelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorUpLevelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorUpLevelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorUpLevelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorUpLevelS2C)
            return object;
        var message = new $root.GamerActorUpLevelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorUpLevelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorUpLevelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorUpLevelS2C;
})();
$root.GamerNotifyActorChangeS2C = (function() {
    function GamerNotifyActorChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyActorChangeS2C.prototype.error = 0;
    GamerNotifyActorChangeS2C.prototype.actor = null;
    GamerNotifyActorChangeS2C.create = function create(properties) {
        return new GamerNotifyActorChangeS2C(properties);
    };
    GamerNotifyActorChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.actor != null && message.hasOwnProperty("actor"))
            $root.Actor.encode(message.actor, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyActorChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyActorChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyActorChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.actor = $root.Actor.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyActorChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyActorChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.actor != null && message.hasOwnProperty("actor")) {
            var error = $root.Actor.verify(message.actor);
            if (error)
                return "actor." + error;
        }
        return null;
    };
    GamerNotifyActorChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyActorChangeS2C)
            return object;
        var message = new $root.GamerNotifyActorChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.actor != null) {
            if (typeof object.actor !== "object")
                throw TypeError(".GamerNotifyActorChangeS2C.actor: object expected");
            message.actor = $root.Actor.fromObject(object.actor);
        }
        return message;
    };
    GamerNotifyActorChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.actor = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.actor != null && message.hasOwnProperty("actor"))
            object.actor = $root.Actor.toObject(message.actor, options);
        return object;
    };
    GamerNotifyActorChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyActorChangeS2C;
})();
$root.GamerGetActorSetListC2S = (function() {
    function GamerGetActorSetListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetActorSetListC2S.prototype.id = 0;
    GamerGetActorSetListC2S.create = function create(properties) {
        return new GamerGetActorSetListC2S(properties);
    };
    GamerGetActorSetListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetActorSetListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetActorSetListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetActorSetListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetActorSetListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetActorSetListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetActorSetListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetActorSetListC2S)
            return object;
        var message = new $root.GamerGetActorSetListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetActorSetListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetActorSetListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetActorSetListC2S;
})();
$root.GamerGetActorSetListS2C = (function() {
    function GamerGetActorSetListS2C(properties) {
        this.actorSet = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetActorSetListS2C.prototype.error = 0;
    GamerGetActorSetListS2C.prototype.actorSet = $util.emptyArray;
    GamerGetActorSetListS2C.create = function create(properties) {
        return new GamerGetActorSetListS2C(properties);
    };
    GamerGetActorSetListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.actorSet != null && message.actorSet.length)
            for (var i = 0; i < message.actorSet.length; ++i)
                $root.ActorSet.encode(message.actorSet[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetActorSetListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetActorSetListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetActorSetListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.actorSet && message.actorSet.length))
                    message.actorSet = [];
                message.actorSet.push($root.ActorSet.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetActorSetListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetActorSetListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.actorSet != null && message.hasOwnProperty("actorSet")) {
            if (!Array.isArray(message.actorSet))
                return "actorSet: array expected";
            for (var i = 0; i < message.actorSet.length; ++i) {
                var error = $root.ActorSet.verify(message.actorSet[i]);
                if (error)
                    return "actorSet." + error;
            }
        }
        return null;
    };
    GamerGetActorSetListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetActorSetListS2C)
            return object;
        var message = new $root.GamerGetActorSetListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.actorSet) {
            if (!Array.isArray(object.actorSet))
                throw TypeError(".GamerGetActorSetListS2C.actorSet: array expected");
            message.actorSet = [];
            for (var i = 0; i < object.actorSet.length; ++i) {
                if (typeof object.actorSet[i] !== "object")
                    throw TypeError(".GamerGetActorSetListS2C.actorSet: object expected");
                message.actorSet[i] = $root.ActorSet.fromObject(object.actorSet[i]);
            }
        }
        return message;
    };
    GamerGetActorSetListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.actorSet = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.actorSet && message.actorSet.length) {
            object.actorSet = [];
            for (var j = 0; j < message.actorSet.length; ++j)
                object.actorSet[j] = $root.ActorSet.toObject(message.actorSet[j], options);
        }
        return object;
    };
    GamerGetActorSetListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetActorSetListS2C;
})();
$root.GamerGetActorSetRewardC2S = (function() {
    function GamerGetActorSetRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetActorSetRewardC2S.prototype.id = 0;
    GamerGetActorSetRewardC2S.prototype.actorSetId = 0;
    GamerGetActorSetRewardC2S.create = function create(properties) {
        return new GamerGetActorSetRewardC2S(properties);
    };
    GamerGetActorSetRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorSetId != null && message.hasOwnProperty("actorSetId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorSetId);
        return writer;
    };
    GamerGetActorSetRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetActorSetRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetActorSetRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorSetId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetActorSetRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetActorSetRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorSetId != null && message.hasOwnProperty("actorSetId"))
            if (!$util.isInteger(message.actorSetId))
                return "actorSetId: integer expected";
        return null;
    };
    GamerGetActorSetRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetActorSetRewardC2S)
            return object;
        var message = new $root.GamerGetActorSetRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorSetId != null)
            message.actorSetId = object.actorSetId | 0;
        return message;
    };
    GamerGetActorSetRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorSetId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorSetId != null && message.hasOwnProperty("actorSetId"))
            object.actorSetId = message.actorSetId;
        return object;
    };
    GamerGetActorSetRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetActorSetRewardC2S;
})();
$root.GamerGetActorSetRewardS2C = (function() {
    function GamerGetActorSetRewardS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetActorSetRewardS2C.prototype.error = 0;
    GamerGetActorSetRewardS2C.prototype.items = $util.emptyArray;
    GamerGetActorSetRewardS2C.create = function create(properties) {
        return new GamerGetActorSetRewardS2C(properties);
    };
    GamerGetActorSetRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetActorSetRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetActorSetRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetActorSetRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetActorSetRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetActorSetRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerGetActorSetRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetActorSetRewardS2C)
            return object;
        var message = new $root.GamerGetActorSetRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerGetActorSetRewardS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerGetActorSetRewardS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerGetActorSetRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerGetActorSetRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetActorSetRewardS2C;
})();
$root.GamerNotifyActorSetChangeS2C = (function() {
    function GamerNotifyActorSetChangeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyActorSetChangeS2C.prototype.error = 0;
    GamerNotifyActorSetChangeS2C.prototype.actorSet = null;
    GamerNotifyActorSetChangeS2C.create = function create(properties) {
        return new GamerNotifyActorSetChangeS2C(properties);
    };
    GamerNotifyActorSetChangeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.actorSet != null && message.hasOwnProperty("actorSet"))
            $root.ActorSet.encode(message.actorSet, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyActorSetChangeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyActorSetChangeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyActorSetChangeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.actorSet = $root.ActorSet.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyActorSetChangeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyActorSetChangeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.actorSet != null && message.hasOwnProperty("actorSet")) {
            var error = $root.ActorSet.verify(message.actorSet);
            if (error)
                return "actorSet." + error;
        }
        return null;
    };
    GamerNotifyActorSetChangeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyActorSetChangeS2C)
            return object;
        var message = new $root.GamerNotifyActorSetChangeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.actorSet != null) {
            if (typeof object.actorSet !== "object")
                throw TypeError(".GamerNotifyActorSetChangeS2C.actorSet: object expected");
            message.actorSet = $root.ActorSet.fromObject(object.actorSet);
        }
        return message;
    };
    GamerNotifyActorSetChangeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.actorSet = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.actorSet != null && message.hasOwnProperty("actorSet"))
            object.actorSet = $root.ActorSet.toObject(message.actorSet, options);
        return object;
    };
    GamerNotifyActorSetChangeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyActorSetChangeS2C;
})();
$root.GamerActorSendGiftC2S = (function() {
    function GamerActorSendGiftC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorSendGiftC2S.prototype.id = 0;
    GamerActorSendGiftC2S.prototype.actorId = 0;
    GamerActorSendGiftC2S.prototype.giftId = 0;
    GamerActorSendGiftC2S.prototype.giftNum = 0;
    GamerActorSendGiftC2S.create = function create(properties) {
        return new GamerActorSendGiftC2S(properties);
    };
    GamerActorSendGiftC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.giftId != null && message.hasOwnProperty("giftId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.giftId);
        if (message.giftNum != null && message.hasOwnProperty("giftNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.giftNum);
        return writer;
    };
    GamerActorSendGiftC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorSendGiftC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorSendGiftC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.giftId = reader.int32();
                break;
            case 4:
                message.giftNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorSendGiftC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorSendGiftC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.giftId != null && message.hasOwnProperty("giftId"))
            if (!$util.isInteger(message.giftId))
                return "giftId: integer expected";
        if (message.giftNum != null && message.hasOwnProperty("giftNum"))
            if (!$util.isInteger(message.giftNum))
                return "giftNum: integer expected";
        return null;
    };
    GamerActorSendGiftC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorSendGiftC2S)
            return object;
        var message = new $root.GamerActorSendGiftC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.giftId != null)
            message.giftId = object.giftId | 0;
        if (object.giftNum != null)
            message.giftNum = object.giftNum | 0;
        return message;
    };
    GamerActorSendGiftC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.giftId = 0;
            object.giftNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.giftId != null && message.hasOwnProperty("giftId"))
            object.giftId = message.giftId;
        if (message.giftNum != null && message.hasOwnProperty("giftNum"))
            object.giftNum = message.giftNum;
        return object;
    };
    GamerActorSendGiftC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorSendGiftC2S;
})();
$root.GamerActorSendGiftS2C = (function() {
    function GamerActorSendGiftS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorSendGiftS2C.prototype.error = 0;
    GamerActorSendGiftS2C.create = function create(properties) {
        return new GamerActorSendGiftS2C(properties);
    };
    GamerActorSendGiftS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorSendGiftS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorSendGiftS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorSendGiftS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorSendGiftS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorSendGiftS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorSendGiftS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorSendGiftS2C)
            return object;
        var message = new $root.GamerActorSendGiftS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorSendGiftS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorSendGiftS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorSendGiftS2C;
})();
$root.GamerActorLabelUpLevelC2S = (function() {
    function GamerActorLabelUpLevelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorLabelUpLevelC2S.prototype.id = 0;
    GamerActorLabelUpLevelC2S.prototype.actorId = 0;
    GamerActorLabelUpLevelC2S.prototype.labelId = 0;
    GamerActorLabelUpLevelC2S.prototype.itemId = 0;
    GamerActorLabelUpLevelC2S.prototype.itemNum = 0;
    GamerActorLabelUpLevelC2S.create = function create(properties) {
        return new GamerActorLabelUpLevelC2S(properties);
    };
    GamerActorLabelUpLevelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.labelId);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.itemId);
        if (message.itemNum != null && message.hasOwnProperty("itemNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.itemNum);
        return writer;
    };
    GamerActorLabelUpLevelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorLabelUpLevelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorLabelUpLevelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.labelId = reader.int32();
                break;
            case 4:
                message.itemId = reader.int32();
                break;
            case 5:
                message.itemNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorLabelUpLevelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorLabelUpLevelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            if (!$util.isInteger(message.labelId))
                return "labelId: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.itemNum != null && message.hasOwnProperty("itemNum"))
            if (!$util.isInteger(message.itemNum))
                return "itemNum: integer expected";
        return null;
    };
    GamerActorLabelUpLevelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorLabelUpLevelC2S)
            return object;
        var message = new $root.GamerActorLabelUpLevelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.labelId != null)
            message.labelId = object.labelId | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.itemNum != null)
            message.itemNum = object.itemNum | 0;
        return message;
    };
    GamerActorLabelUpLevelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.labelId = 0;
            object.itemId = 0;
            object.itemNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            object.labelId = message.labelId;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.itemNum != null && message.hasOwnProperty("itemNum"))
            object.itemNum = message.itemNum;
        return object;
    };
    GamerActorLabelUpLevelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorLabelUpLevelC2S;
})();
$root.GamerActorLabelUpLevelS2C = (function() {
    function GamerActorLabelUpLevelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorLabelUpLevelS2C.prototype.error = 0;
    GamerActorLabelUpLevelS2C.create = function create(properties) {
        return new GamerActorLabelUpLevelS2C(properties);
    };
    GamerActorLabelUpLevelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorLabelUpLevelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorLabelUpLevelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorLabelUpLevelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorLabelUpLevelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorLabelUpLevelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorLabelUpLevelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorLabelUpLevelS2C)
            return object;
        var message = new $root.GamerActorLabelUpLevelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorLabelUpLevelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorLabelUpLevelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorLabelUpLevelS2C;
})();
$root.GamerActorOpenNewLabelC2S = (function() {
    function GamerActorOpenNewLabelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorOpenNewLabelC2S.prototype.id = 0;
    GamerActorOpenNewLabelC2S.prototype.actorId = 0;
    GamerActorOpenNewLabelC2S.prototype.slotId = 0;
    GamerActorOpenNewLabelC2S.prototype.labelId = 0;
    GamerActorOpenNewLabelC2S.create = function create(properties) {
        return new GamerActorOpenNewLabelC2S(properties);
    };
    GamerActorOpenNewLabelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.slotId != null && message.hasOwnProperty("slotId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.slotId);
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.labelId);
        return writer;
    };
    GamerActorOpenNewLabelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorOpenNewLabelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorOpenNewLabelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.slotId = reader.int32();
                break;
            case 4:
                message.labelId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorOpenNewLabelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorOpenNewLabelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.slotId != null && message.hasOwnProperty("slotId"))
            if (!$util.isInteger(message.slotId))
                return "slotId: integer expected";
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            if (!$util.isInteger(message.labelId))
                return "labelId: integer expected";
        return null;
    };
    GamerActorOpenNewLabelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorOpenNewLabelC2S)
            return object;
        var message = new $root.GamerActorOpenNewLabelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.slotId != null)
            message.slotId = object.slotId | 0;
        if (object.labelId != null)
            message.labelId = object.labelId | 0;
        return message;
    };
    GamerActorOpenNewLabelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.slotId = 0;
            object.labelId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.slotId != null && message.hasOwnProperty("slotId"))
            object.slotId = message.slotId;
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            object.labelId = message.labelId;
        return object;
    };
    GamerActorOpenNewLabelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorOpenNewLabelC2S;
})();
$root.GamerActorOpenNewLabelS2C = (function() {
    function GamerActorOpenNewLabelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorOpenNewLabelS2C.prototype.error = 0;
    GamerActorOpenNewLabelS2C.create = function create(properties) {
        return new GamerActorOpenNewLabelS2C(properties);
    };
    GamerActorOpenNewLabelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorOpenNewLabelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorOpenNewLabelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorOpenNewLabelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorOpenNewLabelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorOpenNewLabelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorOpenNewLabelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorOpenNewLabelS2C)
            return object;
        var message = new $root.GamerActorOpenNewLabelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorOpenNewLabelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorOpenNewLabelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorOpenNewLabelS2C;
})();
$root.GamerActorBuyNewLabelC2S = (function() {
    function GamerActorBuyNewLabelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorBuyNewLabelC2S.prototype.id = 0;
    GamerActorBuyNewLabelC2S.prototype.actorId = 0;
    GamerActorBuyNewLabelC2S.prototype.labelId = 0;
    GamerActorBuyNewLabelC2S.create = function create(properties) {
        return new GamerActorBuyNewLabelC2S(properties);
    };
    GamerActorBuyNewLabelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.labelId);
        return writer;
    };
    GamerActorBuyNewLabelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorBuyNewLabelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorBuyNewLabelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.labelId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorBuyNewLabelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorBuyNewLabelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            if (!$util.isInteger(message.labelId))
                return "labelId: integer expected";
        return null;
    };
    GamerActorBuyNewLabelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorBuyNewLabelC2S)
            return object;
        var message = new $root.GamerActorBuyNewLabelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.labelId != null)
            message.labelId = object.labelId | 0;
        return message;
    };
    GamerActorBuyNewLabelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.labelId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            object.labelId = message.labelId;
        return object;
    };
    GamerActorBuyNewLabelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorBuyNewLabelC2S;
})();
$root.GamerActorBuyNewLabelS2C = (function() {
    function GamerActorBuyNewLabelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorBuyNewLabelS2C.prototype.error = 0;
    GamerActorBuyNewLabelS2C.create = function create(properties) {
        return new GamerActorBuyNewLabelS2C(properties);
    };
    GamerActorBuyNewLabelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorBuyNewLabelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorBuyNewLabelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorBuyNewLabelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorBuyNewLabelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorBuyNewLabelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorBuyNewLabelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorBuyNewLabelS2C)
            return object;
        var message = new $root.GamerActorBuyNewLabelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorBuyNewLabelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorBuyNewLabelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorBuyNewLabelS2C;
})();
$root.GamerActorAdNewLabelC2S = (function() {
    function GamerActorAdNewLabelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorAdNewLabelC2S.prototype.id = 0;
    GamerActorAdNewLabelC2S.prototype.actorId = 0;
    GamerActorAdNewLabelC2S.prototype.labelId = 0;
    GamerActorAdNewLabelC2S.create = function create(properties) {
        return new GamerActorAdNewLabelC2S(properties);
    };
    GamerActorAdNewLabelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.labelId);
        return writer;
    };
    GamerActorAdNewLabelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorAdNewLabelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorAdNewLabelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.labelId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorAdNewLabelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorAdNewLabelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            if (!$util.isInteger(message.labelId))
                return "labelId: integer expected";
        return null;
    };
    GamerActorAdNewLabelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorAdNewLabelC2S)
            return object;
        var message = new $root.GamerActorAdNewLabelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.labelId != null)
            message.labelId = object.labelId | 0;
        return message;
    };
    GamerActorAdNewLabelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.labelId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.labelId != null && message.hasOwnProperty("labelId"))
            object.labelId = message.labelId;
        return object;
    };
    GamerActorAdNewLabelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorAdNewLabelC2S;
})();
$root.GamerActorAdNewLabelS2C = (function() {
    function GamerActorAdNewLabelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorAdNewLabelS2C.prototype.error = 0;
    GamerActorAdNewLabelS2C.create = function create(properties) {
        return new GamerActorAdNewLabelS2C(properties);
    };
    GamerActorAdNewLabelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorAdNewLabelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorAdNewLabelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorAdNewLabelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorAdNewLabelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorAdNewLabelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorAdNewLabelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorAdNewLabelS2C)
            return object;
        var message = new $root.GamerActorAdNewLabelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorAdNewLabelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorAdNewLabelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorAdNewLabelS2C;
})();
$root.GamerActorFriendshipUpLevelC2S = (function() {
    function GamerActorFriendshipUpLevelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorFriendshipUpLevelC2S.prototype.id = 0;
    GamerActorFriendshipUpLevelC2S.prototype.actorId = 0;
    GamerActorFriendshipUpLevelC2S.prototype.itemNum = 0;
    GamerActorFriendshipUpLevelC2S.create = function create(properties) {
        return new GamerActorFriendshipUpLevelC2S(properties);
    };
    GamerActorFriendshipUpLevelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.itemNum != null && message.hasOwnProperty("itemNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.itemNum);
        return writer;
    };
    GamerActorFriendshipUpLevelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorFriendshipUpLevelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorFriendshipUpLevelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.itemNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorFriendshipUpLevelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorFriendshipUpLevelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.itemNum != null && message.hasOwnProperty("itemNum"))
            if (!$util.isInteger(message.itemNum))
                return "itemNum: integer expected";
        return null;
    };
    GamerActorFriendshipUpLevelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorFriendshipUpLevelC2S)
            return object;
        var message = new $root.GamerActorFriendshipUpLevelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.itemNum != null)
            message.itemNum = object.itemNum | 0;
        return message;
    };
    GamerActorFriendshipUpLevelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.itemNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.itemNum != null && message.hasOwnProperty("itemNum"))
            object.itemNum = message.itemNum;
        return object;
    };
    GamerActorFriendshipUpLevelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorFriendshipUpLevelC2S;
})();
$root.GamerActorFriendshipUpLevelS2C = (function() {
    function GamerActorFriendshipUpLevelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorFriendshipUpLevelS2C.prototype.error = 0;
    GamerActorFriendshipUpLevelS2C.create = function create(properties) {
        return new GamerActorFriendshipUpLevelS2C(properties);
    };
    GamerActorFriendshipUpLevelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorFriendshipUpLevelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorFriendshipUpLevelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorFriendshipUpLevelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorFriendshipUpLevelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorFriendshipUpLevelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorFriendshipUpLevelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorFriendshipUpLevelS2C)
            return object;
        var message = new $root.GamerActorFriendshipUpLevelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorFriendshipUpLevelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorFriendshipUpLevelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorFriendshipUpLevelS2C;
})();
$root.GamerActorFriendshipTaskReportC2S = (function() {
    function GamerActorFriendshipTaskReportC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorFriendshipTaskReportC2S.prototype.id = 0;
    GamerActorFriendshipTaskReportC2S.prototype.actorId = 0;
    GamerActorFriendshipTaskReportC2S.prototype.taskId = 0;
    GamerActorFriendshipTaskReportC2S.prototype.progress = 0;
    GamerActorFriendshipTaskReportC2S.prototype.state = 0;
    GamerActorFriendshipTaskReportC2S.create = function create(properties) {
        return new GamerActorFriendshipTaskReportC2S(properties);
    };
    GamerActorFriendshipTaskReportC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.taskId != null && message.hasOwnProperty("taskId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.taskId);
        if (message.progress != null && message.hasOwnProperty("progress"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.progress);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
        return writer;
    };
    GamerActorFriendshipTaskReportC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorFriendshipTaskReportC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorFriendshipTaskReportC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.taskId = reader.int32();
                break;
            case 4:
                message.progress = reader.int32();
                break;
            case 5:
                message.state = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorFriendshipTaskReportC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorFriendshipTaskReportC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.taskId != null && message.hasOwnProperty("taskId"))
            if (!$util.isInteger(message.taskId))
                return "taskId: integer expected";
        if (message.progress != null && message.hasOwnProperty("progress"))
            if (!$util.isInteger(message.progress))
                return "progress: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        return null;
    };
    GamerActorFriendshipTaskReportC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorFriendshipTaskReportC2S)
            return object;
        var message = new $root.GamerActorFriendshipTaskReportC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.taskId != null)
            message.taskId = object.taskId | 0;
        if (object.progress != null)
            message.progress = object.progress | 0;
        switch (object.state) {
        case "CannotAccept":
        case 0:
            message.state = 0;
            break;
        case "CanAccept":
        case 1:
            message.state = 1;
            break;
        case "Doing":
        case 2:
            message.state = 2;
            break;
        case "Complete":
        case 3:
            message.state = 3;
            break;
        case "TaskFinish":
        case 4:
            message.state = 4;
            break;
        }
        return message;
    };
    GamerActorFriendshipTaskReportC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.taskId = 0;
            object.progress = 0;
            object.state = options.enums === String ? "CannotAccept" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.taskId != null && message.hasOwnProperty("taskId"))
            object.taskId = message.taskId;
        if (message.progress != null && message.hasOwnProperty("progress"))
            object.progress = message.progress;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.TaskState[message.state] : message.state;
        return object;
    };
    GamerActorFriendshipTaskReportC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorFriendshipTaskReportC2S;
})();
$root.GamerActorFriendshipTaskReportS2C = (function() {
    function GamerActorFriendshipTaskReportS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorFriendshipTaskReportS2C.prototype.error = 0;
    GamerActorFriendshipTaskReportS2C.create = function create(properties) {
        return new GamerActorFriendshipTaskReportS2C(properties);
    };
    GamerActorFriendshipTaskReportS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorFriendshipTaskReportS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorFriendshipTaskReportS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorFriendshipTaskReportS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorFriendshipTaskReportS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorFriendshipTaskReportS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorFriendshipTaskReportS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorFriendshipTaskReportS2C)
            return object;
        var message = new $root.GamerActorFriendshipTaskReportS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorFriendshipTaskReportS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorFriendshipTaskReportS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorFriendshipTaskReportS2C;
})();
$root.GamerActorSkillUpLevelC2S = (function() {
    function GamerActorSkillUpLevelC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorSkillUpLevelC2S.prototype.id = 0;
    GamerActorSkillUpLevelC2S.prototype.actorId = 0;
    GamerActorSkillUpLevelC2S.prototype.skillType = 0;
    GamerActorSkillUpLevelC2S.create = function create(properties) {
        return new GamerActorSkillUpLevelC2S(properties);
    };
    GamerActorSkillUpLevelC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.skillType != null && message.hasOwnProperty("skillType"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.skillType);
        return writer;
    };
    GamerActorSkillUpLevelC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorSkillUpLevelC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorSkillUpLevelC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.skillType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorSkillUpLevelC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorSkillUpLevelC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.skillType != null && message.hasOwnProperty("skillType"))
            if (!$util.isInteger(message.skillType))
                return "skillType: integer expected";
        return null;
    };
    GamerActorSkillUpLevelC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorSkillUpLevelC2S)
            return object;
        var message = new $root.GamerActorSkillUpLevelC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.skillType != null)
            message.skillType = object.skillType | 0;
        return message;
    };
    GamerActorSkillUpLevelC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.skillType = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.skillType != null && message.hasOwnProperty("skillType"))
            object.skillType = message.skillType;
        return object;
    };
    GamerActorSkillUpLevelC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorSkillUpLevelC2S;
})();
$root.GamerActorSkillUpLevelS2C = (function() {
    function GamerActorSkillUpLevelS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerActorSkillUpLevelS2C.prototype.error = 0;
    GamerActorSkillUpLevelS2C.create = function create(properties) {
        return new GamerActorSkillUpLevelS2C(properties);
    };
    GamerActorSkillUpLevelS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerActorSkillUpLevelS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerActorSkillUpLevelS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerActorSkillUpLevelS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerActorSkillUpLevelS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerActorSkillUpLevelS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerActorSkillUpLevelS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerActorSkillUpLevelS2C)
            return object;
        var message = new $root.GamerActorSkillUpLevelS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerActorSkillUpLevelS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerActorSkillUpLevelS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerActorSkillUpLevelS2C;
})();
$root.GMC2S = (function() {
    function GMC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GMC2S.prototype.id = 0;
    GMC2S.prototype.gm = "";
    GMC2S.create = function create(properties) {
        return new GMC2S(properties);
    };
    GMC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gm != null && message.hasOwnProperty("gm"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.gm);
        return writer;
    };
    GMC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GMC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gm = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GMC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GMC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gm != null && message.hasOwnProperty("gm"))
            if (!$util.isString(message.gm))
                return "gm: string expected";
        return null;
    };
    GMC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GMC2S)
            return object;
        var message = new $root.GMC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gm != null)
            message.gm = String(object.gm);
        return message;
    };
    GMC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gm = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gm != null && message.hasOwnProperty("gm"))
            object.gm = message.gm;
        return object;
    };
    GMC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GMC2S;
})();
$root.GMS2C = (function() {
    function GMS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GMS2C.prototype.error = 0;
    GMS2C.create = function create(properties) {
        return new GMS2C(properties);
    };
    GMS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GMS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GMS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GMS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GMS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GMS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GMS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GMS2C)
            return object;
        var message = new $root.GMS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GMS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GMS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GMS2C;
})();
$root.GamerNotifyStoryListS2C = (function() {
    function GamerNotifyStoryListS2C(properties) {
        this.storyList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyStoryListS2C.prototype.error = 0;
    GamerNotifyStoryListS2C.prototype.storyList = $util.emptyArray;
    GamerNotifyStoryListS2C.create = function create(properties) {
        return new GamerNotifyStoryListS2C(properties);
    };
    GamerNotifyStoryListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.storyList != null && message.storyList.length)
            for (var i = 0; i < message.storyList.length; ++i)
                $root.Story.encode(message.storyList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyStoryListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyStoryListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyStoryListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.storyList && message.storyList.length))
                    message.storyList = [];
                message.storyList.push($root.Story.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyStoryListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyStoryListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.storyList != null && message.hasOwnProperty("storyList")) {
            if (!Array.isArray(message.storyList))
                return "storyList: array expected";
            for (var i = 0; i < message.storyList.length; ++i) {
                var error = $root.Story.verify(message.storyList[i]);
                if (error)
                    return "storyList." + error;
            }
        }
        return null;
    };
    GamerNotifyStoryListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyStoryListS2C)
            return object;
        var message = new $root.GamerNotifyStoryListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.storyList) {
            if (!Array.isArray(object.storyList))
                throw TypeError(".GamerNotifyStoryListS2C.storyList: array expected");
            message.storyList = [];
            for (var i = 0; i < object.storyList.length; ++i) {
                if (typeof object.storyList[i] !== "object")
                    throw TypeError(".GamerNotifyStoryListS2C.storyList: object expected");
                message.storyList[i] = $root.Story.fromObject(object.storyList[i]);
            }
        }
        return message;
    };
    GamerNotifyStoryListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.storyList = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.storyList && message.storyList.length) {
            object.storyList = [];
            for (var j = 0; j < message.storyList.length; ++j)
                object.storyList[j] = $root.Story.toObject(message.storyList[j], options);
        }
        return object;
    };
    GamerNotifyStoryListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyStoryListS2C;
})();
$root.StoryGiveLikeC2S = (function() {
    function StoryGiveLikeC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryGiveLikeC2S.prototype.id = 0;
    StoryGiveLikeC2S.prototype.commentId = 0;
    StoryGiveLikeC2S.prototype.storyId = 0;
    StoryGiveLikeC2S.create = function create(properties) {
        return new StoryGiveLikeC2S(properties);
    };
    StoryGiveLikeC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.commentId != null && message.hasOwnProperty("commentId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.commentId);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.storyId);
        return writer;
    };
    StoryGiveLikeC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryGiveLikeC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryGiveLikeC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.commentId = reader.int32();
                break;
            case 3:
                message.storyId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryGiveLikeC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryGiveLikeC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.commentId != null && message.hasOwnProperty("commentId"))
            if (!$util.isInteger(message.commentId))
                return "commentId: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        return null;
    };
    StoryGiveLikeC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryGiveLikeC2S)
            return object;
        var message = new $root.StoryGiveLikeC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.commentId != null)
            message.commentId = object.commentId | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        return message;
    };
    StoryGiveLikeC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.commentId = 0;
            object.storyId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.commentId != null && message.hasOwnProperty("commentId"))
            object.commentId = message.commentId;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        return object;
    };
    StoryGiveLikeC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryGiveLikeC2S;
})();
$root.StoryGiveLikeS2C = (function() {
    function StoryGiveLikeS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryGiveLikeS2C.prototype.error = 0;
    StoryGiveLikeS2C.prototype.storyComment = null;
    StoryGiveLikeS2C.prototype.storyId = 0;
    StoryGiveLikeS2C.create = function create(properties) {
        return new StoryGiveLikeS2C(properties);
    };
    StoryGiveLikeS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.storyComment != null && message.hasOwnProperty("storyComment"))
            $root.StoryComment.encode(message.storyComment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.storyId);
        return writer;
    };
    StoryGiveLikeS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryGiveLikeS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryGiveLikeS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.storyComment = $root.StoryComment.decode(reader, reader.uint32());
                break;
            case 3:
                message.storyId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryGiveLikeS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryGiveLikeS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.storyComment != null && message.hasOwnProperty("storyComment")) {
            var error = $root.StoryComment.verify(message.storyComment);
            if (error)
                return "storyComment." + error;
        }
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        return null;
    };
    StoryGiveLikeS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryGiveLikeS2C)
            return object;
        var message = new $root.StoryGiveLikeS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.storyComment != null) {
            if (typeof object.storyComment !== "object")
                throw TypeError(".StoryGiveLikeS2C.storyComment: object expected");
            message.storyComment = $root.StoryComment.fromObject(object.storyComment);
        }
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        return message;
    };
    StoryGiveLikeS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.storyComment = null;
            object.storyId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.storyComment != null && message.hasOwnProperty("storyComment"))
            object.storyComment = $root.StoryComment.toObject(message.storyComment, options);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        return object;
    };
    StoryGiveLikeS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryGiveLikeS2C;
})();
$root.StoryCommentC2S = (function() {
    function StoryCommentC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryCommentC2S.prototype.id = 0;
    StoryCommentC2S.prototype.storyId = 0;
    StoryCommentC2S.prototype.content = "";
    StoryCommentC2S.create = function create(properties) {
        return new StoryCommentC2S(properties);
    };
    StoryCommentC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.content != null && message.hasOwnProperty("content"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
        return writer;
    };
    StoryCommentC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryCommentC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryCommentC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                message.content = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryCommentC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryCommentC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        return null;
    };
    StoryCommentC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryCommentC2S)
            return object;
        var message = new $root.StoryCommentC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.content != null)
            message.content = String(object.content);
        return message;
    };
    StoryCommentC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.storyId = 0;
            object.content = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        return object;
    };
    StoryCommentC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryCommentC2S;
})();
$root.StoryCommentS2C = (function() {
    function StoryCommentS2C(properties) {
        this.storyCommentList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryCommentS2C.prototype.error = 0;
    StoryCommentS2C.prototype.storyId = 0;
    StoryCommentS2C.prototype.storyCommentList = $util.emptyArray;
    StoryCommentS2C.create = function create(properties) {
        return new StoryCommentS2C(properties);
    };
    StoryCommentS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.storyCommentList != null && message.storyCommentList.length)
            for (var i = 0; i < message.storyCommentList.length; ++i)
                $root.StoryComment.encode(message.storyCommentList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    StoryCommentS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryCommentS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryCommentS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                if (!(message.storyCommentList && message.storyCommentList.length))
                    message.storyCommentList = [];
                message.storyCommentList.push($root.StoryComment.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryCommentS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryCommentS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.storyCommentList != null && message.hasOwnProperty("storyCommentList")) {
            if (!Array.isArray(message.storyCommentList))
                return "storyCommentList: array expected";
            for (var i = 0; i < message.storyCommentList.length; ++i) {
                var error = $root.StoryComment.verify(message.storyCommentList[i]);
                if (error)
                    return "storyCommentList." + error;
            }
        }
        return null;
    };
    StoryCommentS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryCommentS2C)
            return object;
        var message = new $root.StoryCommentS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.storyCommentList) {
            if (!Array.isArray(object.storyCommentList))
                throw TypeError(".StoryCommentS2C.storyCommentList: array expected");
            message.storyCommentList = [];
            for (var i = 0; i < object.storyCommentList.length; ++i) {
                if (typeof object.storyCommentList[i] !== "object")
                    throw TypeError(".StoryCommentS2C.storyCommentList: object expected");
                message.storyCommentList[i] = $root.StoryComment.fromObject(object.storyCommentList[i]);
            }
        }
        return message;
    };
    StoryCommentS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.storyCommentList = [];
        if (options.defaults) {
            object.error = 0;
            object.storyId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.storyCommentList && message.storyCommentList.length) {
            object.storyCommentList = [];
            for (var j = 0; j < message.storyCommentList.length; ++j)
                object.storyCommentList[j] = $root.StoryComment.toObject(message.storyCommentList[j], options);
        }
        return object;
    };
    StoryCommentS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryCommentS2C;
})();
$root.StoryReadCommentC2S = (function() {
    function StoryReadCommentC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryReadCommentC2S.prototype.id = 0;
    StoryReadCommentC2S.prototype.storyId = 0;
    StoryReadCommentC2S.create = function create(properties) {
        return new StoryReadCommentC2S(properties);
    };
    StoryReadCommentC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        return writer;
    };
    StoryReadCommentC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryReadCommentC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryReadCommentC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryReadCommentC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryReadCommentC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        return null;
    };
    StoryReadCommentC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryReadCommentC2S)
            return object;
        var message = new $root.StoryReadCommentC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        return message;
    };
    StoryReadCommentC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.storyId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        return object;
    };
    StoryReadCommentC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryReadCommentC2S;
})();
$root.StoryReadCommentS2C = (function() {
    function StoryReadCommentS2C(properties) {
        this.maxLikeCommentList = [];
        this.storyCommentList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryReadCommentS2C.prototype.error = 0;
    StoryReadCommentS2C.prototype.storyId = 0;
    StoryReadCommentS2C.prototype.maxLikeCommentList = $util.emptyArray;
    StoryReadCommentS2C.prototype.storyCommentList = $util.emptyArray;
    StoryReadCommentS2C.create = function create(properties) {
        return new StoryReadCommentS2C(properties);
    };
    StoryReadCommentS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.maxLikeCommentList != null && message.maxLikeCommentList.length)
            for (var i = 0; i < message.maxLikeCommentList.length; ++i)
                $root.StoryComment.encode(message.maxLikeCommentList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.storyCommentList != null && message.storyCommentList.length)
            for (var i = 0; i < message.storyCommentList.length; ++i)
                $root.StoryComment.encode(message.storyCommentList[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    StoryReadCommentS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryReadCommentS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryReadCommentS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                if (!(message.maxLikeCommentList && message.maxLikeCommentList.length))
                    message.maxLikeCommentList = [];
                message.maxLikeCommentList.push($root.StoryComment.decode(reader, reader.uint32()));
                break;
            case 4:
                if (!(message.storyCommentList && message.storyCommentList.length))
                    message.storyCommentList = [];
                message.storyCommentList.push($root.StoryComment.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryReadCommentS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryReadCommentS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.maxLikeCommentList != null && message.hasOwnProperty("maxLikeCommentList")) {
            if (!Array.isArray(message.maxLikeCommentList))
                return "maxLikeCommentList: array expected";
            for (var i = 0; i < message.maxLikeCommentList.length; ++i) {
                var error = $root.StoryComment.verify(message.maxLikeCommentList[i]);
                if (error)
                    return "maxLikeCommentList." + error;
            }
        }
        if (message.storyCommentList != null && message.hasOwnProperty("storyCommentList")) {
            if (!Array.isArray(message.storyCommentList))
                return "storyCommentList: array expected";
            for (var i = 0; i < message.storyCommentList.length; ++i) {
                var error = $root.StoryComment.verify(message.storyCommentList[i]);
                if (error)
                    return "storyCommentList." + error;
            }
        }
        return null;
    };
    StoryReadCommentS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryReadCommentS2C)
            return object;
        var message = new $root.StoryReadCommentS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.maxLikeCommentList) {
            if (!Array.isArray(object.maxLikeCommentList))
                throw TypeError(".StoryReadCommentS2C.maxLikeCommentList: array expected");
            message.maxLikeCommentList = [];
            for (var i = 0; i < object.maxLikeCommentList.length; ++i) {
                if (typeof object.maxLikeCommentList[i] !== "object")
                    throw TypeError(".StoryReadCommentS2C.maxLikeCommentList: object expected");
                message.maxLikeCommentList[i] = $root.StoryComment.fromObject(object.maxLikeCommentList[i]);
            }
        }
        if (object.storyCommentList) {
            if (!Array.isArray(object.storyCommentList))
                throw TypeError(".StoryReadCommentS2C.storyCommentList: array expected");
            message.storyCommentList = [];
            for (var i = 0; i < object.storyCommentList.length; ++i) {
                if (typeof object.storyCommentList[i] !== "object")
                    throw TypeError(".StoryReadCommentS2C.storyCommentList: object expected");
                message.storyCommentList[i] = $root.StoryComment.fromObject(object.storyCommentList[i]);
            }
        }
        return message;
    };
    StoryReadCommentS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.maxLikeCommentList = [];
            object.storyCommentList = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.storyId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.maxLikeCommentList && message.maxLikeCommentList.length) {
            object.maxLikeCommentList = [];
            for (var j = 0; j < message.maxLikeCommentList.length; ++j)
                object.maxLikeCommentList[j] = $root.StoryComment.toObject(message.maxLikeCommentList[j], options);
        }
        if (message.storyCommentList && message.storyCommentList.length) {
            object.storyCommentList = [];
            for (var j = 0; j < message.storyCommentList.length; ++j)
                object.storyCommentList[j] = $root.StoryComment.toObject(message.storyCommentList[j], options);
        }
        return object;
    };
    StoryReadCommentS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryReadCommentS2C;
})();
$root.StoryGetCommentC2S = (function() {
    function StoryGetCommentC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryGetCommentC2S.prototype.id = 0;
    StoryGetCommentC2S.prototype.storyId = 0;
    StoryGetCommentC2S.create = function create(properties) {
        return new StoryGetCommentC2S(properties);
    };
    StoryGetCommentC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        return writer;
    };
    StoryGetCommentC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryGetCommentC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryGetCommentC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryGetCommentC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryGetCommentC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        return null;
    };
    StoryGetCommentC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryGetCommentC2S)
            return object;
        var message = new $root.StoryGetCommentC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        return message;
    };
    StoryGetCommentC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.storyId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        return object;
    };
    StoryGetCommentC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryGetCommentC2S;
})();
$root.StoryGetCommentS2C = (function() {
    function StoryGetCommentS2C(properties) {
        this.storyCommentList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryGetCommentS2C.prototype.error = 0;
    StoryGetCommentS2C.prototype.storyId = 0;
    StoryGetCommentS2C.prototype.storyCommentList = $util.emptyArray;
    StoryGetCommentS2C.create = function create(properties) {
        return new StoryGetCommentS2C(properties);
    };
    StoryGetCommentS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.storyCommentList != null && message.storyCommentList.length)
            for (var i = 0; i < message.storyCommentList.length; ++i)
                $root.StoryComment.encode(message.storyCommentList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    StoryGetCommentS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryGetCommentS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryGetCommentS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                if (!(message.storyCommentList && message.storyCommentList.length))
                    message.storyCommentList = [];
                message.storyCommentList.push($root.StoryComment.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryGetCommentS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryGetCommentS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.storyCommentList != null && message.hasOwnProperty("storyCommentList")) {
            if (!Array.isArray(message.storyCommentList))
                return "storyCommentList: array expected";
            for (var i = 0; i < message.storyCommentList.length; ++i) {
                var error = $root.StoryComment.verify(message.storyCommentList[i]);
                if (error)
                    return "storyCommentList." + error;
            }
        }
        return null;
    };
    StoryGetCommentS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryGetCommentS2C)
            return object;
        var message = new $root.StoryGetCommentS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.storyCommentList) {
            if (!Array.isArray(object.storyCommentList))
                throw TypeError(".StoryGetCommentS2C.storyCommentList: array expected");
            message.storyCommentList = [];
            for (var i = 0; i < object.storyCommentList.length; ++i) {
                if (typeof object.storyCommentList[i] !== "object")
                    throw TypeError(".StoryGetCommentS2C.storyCommentList: object expected");
                message.storyCommentList[i] = $root.StoryComment.fromObject(object.storyCommentList[i]);
            }
        }
        return message;
    };
    StoryGetCommentS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.storyCommentList = [];
        if (options.defaults) {
            object.error = 0;
            object.storyId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.storyCommentList && message.storyCommentList.length) {
            object.storyCommentList = [];
            for (var j = 0; j < message.storyCommentList.length; ++j)
                object.storyCommentList[j] = $root.StoryComment.toObject(message.storyCommentList[j], options);
        }
        return object;
    };
    StoryGetCommentS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryGetCommentS2C;
})();
$root.StoryChangeNameC2S = (function() {
    function StoryChangeNameC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryChangeNameC2S.prototype.id = 0;
    StoryChangeNameC2S.prototype.storyId = 0;
    StoryChangeNameC2S.prototype.name = "";
    StoryChangeNameC2S.create = function create(properties) {
        return new StoryChangeNameC2S(properties);
    };
    StoryChangeNameC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        return writer;
    };
    StoryChangeNameC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryChangeNameC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryChangeNameC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryChangeNameC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryChangeNameC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };
    StoryChangeNameC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryChangeNameC2S)
            return object;
        var message = new $root.StoryChangeNameC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };
    StoryChangeNameC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.storyId = 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };
    StoryChangeNameC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryChangeNameC2S;
})();
$root.StoryChangeNameS2C = (function() {
    function StoryChangeNameS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryChangeNameS2C.prototype.error = 0;
    StoryChangeNameS2C.prototype.storyId = 0;
    StoryChangeNameS2C.create = function create(properties) {
        return new StoryChangeNameS2C(properties);
    };
    StoryChangeNameS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        return writer;
    };
    StoryChangeNameS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryChangeNameS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryChangeNameS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryChangeNameS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryChangeNameS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        return null;
    };
    StoryChangeNameS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryChangeNameS2C)
            return object;
        var message = new $root.StoryChangeNameS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        return message;
    };
    StoryChangeNameS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.storyId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        return object;
    };
    StoryChangeNameS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryChangeNameS2C;
})();
$root.GamerNotifyBuildInfoS2C = (function() {
    function GamerNotifyBuildInfoS2C(properties) {
        this.buildInfo = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyBuildInfoS2C.prototype.error = 0;
    GamerNotifyBuildInfoS2C.prototype.buildInfo = $util.emptyArray;
    GamerNotifyBuildInfoS2C.create = function create(properties) {
        return new GamerNotifyBuildInfoS2C(properties);
    };
    GamerNotifyBuildInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildInfo != null && message.buildInfo.length)
            for (var i = 0; i < message.buildInfo.length; ++i)
                $root.BuildInfo.encode(message.buildInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyBuildInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyBuildInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyBuildInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.buildInfo && message.buildInfo.length))
                    message.buildInfo = [];
                message.buildInfo.push($root.BuildInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyBuildInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyBuildInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
            if (!Array.isArray(message.buildInfo))
                return "buildInfo: array expected";
            for (var i = 0; i < message.buildInfo.length; ++i) {
                var error = $root.BuildInfo.verify(message.buildInfo[i]);
                if (error)
                    return "buildInfo." + error;
            }
        }
        return null;
    };
    GamerNotifyBuildInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyBuildInfoS2C)
            return object;
        var message = new $root.GamerNotifyBuildInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildInfo) {
            if (!Array.isArray(object.buildInfo))
                throw TypeError(".GamerNotifyBuildInfoS2C.buildInfo: array expected");
            message.buildInfo = [];
            for (var i = 0; i < object.buildInfo.length; ++i) {
                if (typeof object.buildInfo[i] !== "object")
                    throw TypeError(".GamerNotifyBuildInfoS2C.buildInfo: object expected");
                message.buildInfo[i] = $root.BuildInfo.fromObject(object.buildInfo[i]);
            }
        }
        return message;
    };
    GamerNotifyBuildInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.buildInfo = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildInfo && message.buildInfo.length) {
            object.buildInfo = [];
            for (var j = 0; j < message.buildInfo.length; ++j)
                object.buildInfo[j] = $root.BuildInfo.toObject(message.buildInfo[j], options);
        }
        return object;
    };
    GamerNotifyBuildInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyBuildInfoS2C;
})();
$root.BuildLevelUpC2S = (function() {
    function BuildLevelUpC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildLevelUpC2S.prototype.id = 0;
    BuildLevelUpC2S.prototype.buildType = 0;
    BuildLevelUpC2S.create = function create(properties) {
        return new BuildLevelUpC2S(properties);
    };
    BuildLevelUpC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        return writer;
    };
    BuildLevelUpC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildLevelUpC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildLevelUpC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildLevelUpC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildLevelUpC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        return null;
    };
    BuildLevelUpC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildLevelUpC2S)
            return object;
        var message = new $root.BuildLevelUpC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        return message;
    };
    BuildLevelUpC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.buildType = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        return object;
    };
    BuildLevelUpC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildLevelUpC2S;
})();
$root.BuildLevelUpS2C = (function() {
    function BuildLevelUpS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildLevelUpS2C.prototype.error = 0;
    BuildLevelUpS2C.prototype.buildInfo = null;
    BuildLevelUpS2C.prototype.currentServerTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    BuildLevelUpS2C.create = function create(properties) {
        return new BuildLevelUpS2C(properties);
    };
    BuildLevelUpS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            $root.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.currentServerTime != null && message.hasOwnProperty("currentServerTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.currentServerTime);
        return writer;
    };
    BuildLevelUpS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildLevelUpS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildLevelUpS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildInfo = $root.BuildInfo.decode(reader, reader.uint32());
                break;
            case 3:
                message.currentServerTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildLevelUpS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildLevelUpS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
            var error = $root.BuildInfo.verify(message.buildInfo);
            if (error)
                return "buildInfo." + error;
        }
        if (message.currentServerTime != null && message.hasOwnProperty("currentServerTime"))
            if (!$util.isInteger(message.currentServerTime) && !(message.currentServerTime && $util.isInteger(message.currentServerTime.low) && $util.isInteger(message.currentServerTime.high)))
                return "currentServerTime: integer|Long expected";
        return null;
    };
    BuildLevelUpS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildLevelUpS2C)
            return object;
        var message = new $root.BuildLevelUpS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildInfo != null) {
            if (typeof object.buildInfo !== "object")
                throw TypeError(".BuildLevelUpS2C.buildInfo: object expected");
            message.buildInfo = $root.BuildInfo.fromObject(object.buildInfo);
        }
        if (object.currentServerTime != null)
            if ($util.Long)
                (message.currentServerTime = $util.Long.fromValue(object.currentServerTime)).unsigned = false;
            else if (typeof object.currentServerTime === "string")
                message.currentServerTime = parseInt(object.currentServerTime, 10);
            else if (typeof object.currentServerTime === "number")
                message.currentServerTime = object.currentServerTime;
            else if (typeof object.currentServerTime === "object")
                message.currentServerTime = new $util.LongBits(object.currentServerTime.low >>> 0, object.currentServerTime.high >>> 0).toNumber();
        return message;
    };
    BuildLevelUpS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.buildInfo = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.currentServerTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.currentServerTime = options.longs === String ? "0" : 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            object.buildInfo = $root.BuildInfo.toObject(message.buildInfo, options);
        if (message.currentServerTime != null && message.hasOwnProperty("currentServerTime"))
            if (typeof message.currentServerTime === "number")
                object.currentServerTime = options.longs === String ? String(message.currentServerTime) : message.currentServerTime;
            else
                object.currentServerTime = options.longs === String ? $util.Long.prototype.toString.call(message.currentServerTime) : options.longs === Number ? new $util.LongBits(message.currentServerTime.low >>> 0, message.currentServerTime.high >>> 0).toNumber() : message.currentServerTime;
        return object;
    };
    BuildLevelUpS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildLevelUpS2C;
})();
$root.BuildEndOfLevelUpC2S = (function() {
    function BuildEndOfLevelUpC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildEndOfLevelUpC2S.prototype.id = 0;
    BuildEndOfLevelUpC2S.prototype.buildType = 0;
    BuildEndOfLevelUpC2S.create = function create(properties) {
        return new BuildEndOfLevelUpC2S(properties);
    };
    BuildEndOfLevelUpC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        return writer;
    };
    BuildEndOfLevelUpC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildEndOfLevelUpC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildEndOfLevelUpC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildEndOfLevelUpC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildEndOfLevelUpC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        return null;
    };
    BuildEndOfLevelUpC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildEndOfLevelUpC2S)
            return object;
        var message = new $root.BuildEndOfLevelUpC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        return message;
    };
    BuildEndOfLevelUpC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.buildType = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        return object;
    };
    BuildEndOfLevelUpC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildEndOfLevelUpC2S;
})();
$root.BuildEndOfLevelUpS2C = (function() {
    function BuildEndOfLevelUpS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildEndOfLevelUpS2C.prototype.error = 0;
    BuildEndOfLevelUpS2C.prototype.buildInfo = null;
    BuildEndOfLevelUpS2C.create = function create(properties) {
        return new BuildEndOfLevelUpS2C(properties);
    };
    BuildEndOfLevelUpS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            $root.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    BuildEndOfLevelUpS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildEndOfLevelUpS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildEndOfLevelUpS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildInfo = $root.BuildInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildEndOfLevelUpS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildEndOfLevelUpS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
            var error = $root.BuildInfo.verify(message.buildInfo);
            if (error)
                return "buildInfo." + error;
        }
        return null;
    };
    BuildEndOfLevelUpS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildEndOfLevelUpS2C)
            return object;
        var message = new $root.BuildEndOfLevelUpS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildInfo != null) {
            if (typeof object.buildInfo !== "object")
                throw TypeError(".BuildEndOfLevelUpS2C.buildInfo: object expected");
            message.buildInfo = $root.BuildInfo.fromObject(object.buildInfo);
        }
        return message;
    };
    BuildEndOfLevelUpS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.buildInfo = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            object.buildInfo = $root.BuildInfo.toObject(message.buildInfo, options);
        return object;
    };
    BuildEndOfLevelUpS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildEndOfLevelUpS2C;
})();
$root.BuildBreakUpC2S = (function() {
    function BuildBreakUpC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildBreakUpC2S.prototype.id = 0;
    BuildBreakUpC2S.prototype.buildType = 0;
    BuildBreakUpC2S.create = function create(properties) {
        return new BuildBreakUpC2S(properties);
    };
    BuildBreakUpC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        return writer;
    };
    BuildBreakUpC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildBreakUpC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildBreakUpC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildBreakUpC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildBreakUpC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        return null;
    };
    BuildBreakUpC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildBreakUpC2S)
            return object;
        var message = new $root.BuildBreakUpC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        return message;
    };
    BuildBreakUpC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.buildType = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        return object;
    };
    BuildBreakUpC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildBreakUpC2S;
})();
$root.BuildBreakUpS2C = (function() {
    function BuildBreakUpS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildBreakUpS2C.prototype.error = 0;
    BuildBreakUpS2C.prototype.buildInfo = null;
    BuildBreakUpS2C.create = function create(properties) {
        return new BuildBreakUpS2C(properties);
    };
    BuildBreakUpS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            $root.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    BuildBreakUpS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildBreakUpS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildBreakUpS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildInfo = $root.BuildInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildBreakUpS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildBreakUpS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
            var error = $root.BuildInfo.verify(message.buildInfo);
            if (error)
                return "buildInfo." + error;
        }
        return null;
    };
    BuildBreakUpS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildBreakUpS2C)
            return object;
        var message = new $root.BuildBreakUpS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildInfo != null) {
            if (typeof object.buildInfo !== "object")
                throw TypeError(".BuildBreakUpS2C.buildInfo: object expected");
            message.buildInfo = $root.BuildInfo.fromObject(object.buildInfo);
        }
        return message;
    };
    BuildBreakUpS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.buildInfo = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            object.buildInfo = $root.BuildInfo.toObject(message.buildInfo, options);
        return object;
    };
    BuildBreakUpS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildBreakUpS2C;
})();
$root.BuildSpeedUpC2S = (function() {
    function BuildSpeedUpC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildSpeedUpC2S.prototype.id = 0;
    BuildSpeedUpC2S.prototype.buildType = 0;
    BuildSpeedUpC2S.prototype.speedUpType = 0;
    BuildSpeedUpC2S.create = function create(properties) {
        return new BuildSpeedUpC2S(properties);
    };
    BuildSpeedUpC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        if (message.speedUpType != null && message.hasOwnProperty("speedUpType"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.speedUpType);
        return writer;
    };
    BuildSpeedUpC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildSpeedUpC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildSpeedUpC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            case 3:
                message.speedUpType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildSpeedUpC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildSpeedUpC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        if (message.speedUpType != null && message.hasOwnProperty("speedUpType"))
            switch (message.speedUpType) {
            default:
                return "speedUpType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        return null;
    };
    BuildSpeedUpC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildSpeedUpC2S)
            return object;
        var message = new $root.BuildSpeedUpC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        switch (object.speedUpType) {
        case "Invite":
        case 0:
            message.speedUpType = 0;
            break;
        case "Diamond":
        case 1:
            message.speedUpType = 1;
            break;
        case "WatchAd":
        case 2:
            message.speedUpType = 2;
            break;
        }
        return message;
    };
    BuildSpeedUpC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.buildType = 0;
            object.speedUpType = options.enums === String ? "Invite" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        if (message.speedUpType != null && message.hasOwnProperty("speedUpType"))
            object.speedUpType = options.enums === String ? $root.SpeedUpType[message.speedUpType] : message.speedUpType;
        return object;
    };
    BuildSpeedUpC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildSpeedUpC2S;
})();
$root.BuildSpeedUpS2C = (function() {
    function BuildSpeedUpS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildSpeedUpS2C.prototype.error = 0;
    BuildSpeedUpS2C.prototype.buildInfo = null;
    BuildSpeedUpS2C.prototype.currentServerTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    BuildSpeedUpS2C.create = function create(properties) {
        return new BuildSpeedUpS2C(properties);
    };
    BuildSpeedUpS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            $root.BuildInfo.encode(message.buildInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.currentServerTime != null && message.hasOwnProperty("currentServerTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.currentServerTime);
        return writer;
    };
    BuildSpeedUpS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildSpeedUpS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildSpeedUpS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildInfo = $root.BuildInfo.decode(reader, reader.uint32());
                break;
            case 3:
                message.currentServerTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildSpeedUpS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildSpeedUpS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo")) {
            var error = $root.BuildInfo.verify(message.buildInfo);
            if (error)
                return "buildInfo." + error;
        }
        if (message.currentServerTime != null && message.hasOwnProperty("currentServerTime"))
            if (!$util.isInteger(message.currentServerTime) && !(message.currentServerTime && $util.isInteger(message.currentServerTime.low) && $util.isInteger(message.currentServerTime.high)))
                return "currentServerTime: integer|Long expected";
        return null;
    };
    BuildSpeedUpS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildSpeedUpS2C)
            return object;
        var message = new $root.BuildSpeedUpS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildInfo != null) {
            if (typeof object.buildInfo !== "object")
                throw TypeError(".BuildSpeedUpS2C.buildInfo: object expected");
            message.buildInfo = $root.BuildInfo.fromObject(object.buildInfo);
        }
        if (object.currentServerTime != null)
            if ($util.Long)
                (message.currentServerTime = $util.Long.fromValue(object.currentServerTime)).unsigned = false;
            else if (typeof object.currentServerTime === "string")
                message.currentServerTime = parseInt(object.currentServerTime, 10);
            else if (typeof object.currentServerTime === "number")
                message.currentServerTime = object.currentServerTime;
            else if (typeof object.currentServerTime === "object")
                message.currentServerTime = new $util.LongBits(object.currentServerTime.low >>> 0, object.currentServerTime.high >>> 0).toNumber();
        return message;
    };
    BuildSpeedUpS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.buildInfo = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.currentServerTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.currentServerTime = options.longs === String ? "0" : 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildInfo != null && message.hasOwnProperty("buildInfo"))
            object.buildInfo = $root.BuildInfo.toObject(message.buildInfo, options);
        if (message.currentServerTime != null && message.hasOwnProperty("currentServerTime"))
            if (typeof message.currentServerTime === "number")
                object.currentServerTime = options.longs === String ? String(message.currentServerTime) : message.currentServerTime;
            else
                object.currentServerTime = options.longs === String ? $util.Long.prototype.toString.call(message.currentServerTime) : options.longs === Number ? new $util.LongBits(message.currentServerTime.low >>> 0, message.currentServerTime.high >>> 0).toNumber() : message.currentServerTime;
        return object;
    };
    BuildSpeedUpS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildSpeedUpS2C;
})();
$root.BuildGetProductC2S = (function() {
    function BuildGetProductC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildGetProductC2S.prototype.id = 0;
    BuildGetProductC2S.prototype.buildType = 0;
    BuildGetProductC2S.create = function create(properties) {
        return new BuildGetProductC2S(properties);
    };
    BuildGetProductC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        return writer;
    };
    BuildGetProductC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildGetProductC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildGetProductC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildGetProductC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildGetProductC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        return null;
    };
    BuildGetProductC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildGetProductC2S)
            return object;
        var message = new $root.BuildGetProductC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        return message;
    };
    BuildGetProductC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.buildType = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        return object;
    };
    BuildGetProductC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildGetProductC2S;
})();
$root.BuildGetProductS2C = (function() {
    function BuildGetProductS2C(properties) {
        this.productInfo = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildGetProductS2C.prototype.error = 0;
    BuildGetProductS2C.prototype.buildType = 0;
    BuildGetProductS2C.prototype.productInfo = $util.emptyArray;
    BuildGetProductS2C.create = function create(properties) {
        return new BuildGetProductS2C(properties);
    };
    BuildGetProductS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        if (message.productInfo != null && message.productInfo.length)
            for (var i = 0; i < message.productInfo.length; ++i)
                $root.BuildProduct.encode(message.productInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    BuildGetProductS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildGetProductS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildGetProductS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            case 3:
                if (!(message.productInfo && message.productInfo.length))
                    message.productInfo = [];
                message.productInfo.push($root.BuildProduct.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildGetProductS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildGetProductS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        if (message.productInfo != null && message.hasOwnProperty("productInfo")) {
            if (!Array.isArray(message.productInfo))
                return "productInfo: array expected";
            for (var i = 0; i < message.productInfo.length; ++i) {
                var error = $root.BuildProduct.verify(message.productInfo[i]);
                if (error)
                    return "productInfo." + error;
            }
        }
        return null;
    };
    BuildGetProductS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildGetProductS2C)
            return object;
        var message = new $root.BuildGetProductS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        if (object.productInfo) {
            if (!Array.isArray(object.productInfo))
                throw TypeError(".BuildGetProductS2C.productInfo: array expected");
            message.productInfo = [];
            for (var i = 0; i < object.productInfo.length; ++i) {
                if (typeof object.productInfo[i] !== "object")
                    throw TypeError(".BuildGetProductS2C.productInfo: object expected");
                message.productInfo[i] = $root.BuildProduct.fromObject(object.productInfo[i]);
            }
        }
        return message;
    };
    BuildGetProductS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.productInfo = [];
        if (options.defaults) {
            object.error = 0;
            object.buildType = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        if (message.productInfo && message.productInfo.length) {
            object.productInfo = [];
            for (var j = 0; j < message.productInfo.length; ++j)
                object.productInfo[j] = $root.BuildProduct.toObject(message.productInfo[j], options);
        }
        return object;
    };
    BuildGetProductS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildGetProductS2C;
})();
$root.ActorEnterBuildC2S = (function() {
    function ActorEnterBuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorEnterBuildC2S.prototype.id = 0;
    ActorEnterBuildC2S.prototype.actorId = 0;
    ActorEnterBuildC2S.prototype.cellId = 0;
    ActorEnterBuildC2S.create = function create(properties) {
        return new ActorEnterBuildC2S(properties);
    };
    ActorEnterBuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.cellId != null && message.hasOwnProperty("cellId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cellId);
        return writer;
    };
    ActorEnterBuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorEnterBuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorEnterBuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.cellId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorEnterBuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorEnterBuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.cellId != null && message.hasOwnProperty("cellId"))
            if (!$util.isInteger(message.cellId))
                return "cellId: integer expected";
        return null;
    };
    ActorEnterBuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorEnterBuildC2S)
            return object;
        var message = new $root.ActorEnterBuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.cellId != null)
            message.cellId = object.cellId | 0;
        return message;
    };
    ActorEnterBuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
            object.cellId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.cellId != null && message.hasOwnProperty("cellId"))
            object.cellId = message.cellId;
        return object;
    };
    ActorEnterBuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorEnterBuildC2S;
})();
$root.ActorEnterBuildS2C = (function() {
    function ActorEnterBuildS2C(properties) {
        this.productInfo = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorEnterBuildS2C.prototype.error = 0;
    ActorEnterBuildS2C.prototype.buildType = 0;
    ActorEnterBuildS2C.prototype.actorCell = null;
    ActorEnterBuildS2C.prototype.productInfo = $util.emptyArray;
    ActorEnterBuildS2C.create = function create(properties) {
        return new ActorEnterBuildS2C(properties);
    };
    ActorEnterBuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        if (message.actorCell != null && message.hasOwnProperty("actorCell"))
            $root.BuildActorCell.encode(message.actorCell, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.productInfo != null && message.productInfo.length)
            for (var i = 0; i < message.productInfo.length; ++i)
                $root.BuildProduct.encode(message.productInfo[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    ActorEnterBuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorEnterBuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorEnterBuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            case 3:
                message.actorCell = $root.BuildActorCell.decode(reader, reader.uint32());
                break;
            case 4:
                if (!(message.productInfo && message.productInfo.length))
                    message.productInfo = [];
                message.productInfo.push($root.BuildProduct.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorEnterBuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorEnterBuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        if (message.actorCell != null && message.hasOwnProperty("actorCell")) {
            var error = $root.BuildActorCell.verify(message.actorCell);
            if (error)
                return "actorCell." + error;
        }
        if (message.productInfo != null && message.hasOwnProperty("productInfo")) {
            if (!Array.isArray(message.productInfo))
                return "productInfo: array expected";
            for (var i = 0; i < message.productInfo.length; ++i) {
                var error = $root.BuildProduct.verify(message.productInfo[i]);
                if (error)
                    return "productInfo." + error;
            }
        }
        return null;
    };
    ActorEnterBuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorEnterBuildS2C)
            return object;
        var message = new $root.ActorEnterBuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        if (object.actorCell != null) {
            if (typeof object.actorCell !== "object")
                throw TypeError(".ActorEnterBuildS2C.actorCell: object expected");
            message.actorCell = $root.BuildActorCell.fromObject(object.actorCell);
        }
        if (object.productInfo) {
            if (!Array.isArray(object.productInfo))
                throw TypeError(".ActorEnterBuildS2C.productInfo: array expected");
            message.productInfo = [];
            for (var i = 0; i < object.productInfo.length; ++i) {
                if (typeof object.productInfo[i] !== "object")
                    throw TypeError(".ActorEnterBuildS2C.productInfo: object expected");
                message.productInfo[i] = $root.BuildProduct.fromObject(object.productInfo[i]);
            }
        }
        return message;
    };
    ActorEnterBuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.productInfo = [];
        if (options.defaults) {
            object.error = 0;
            object.buildType = 0;
            object.actorCell = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        if (message.actorCell != null && message.hasOwnProperty("actorCell"))
            object.actorCell = $root.BuildActorCell.toObject(message.actorCell, options);
        if (message.productInfo && message.productInfo.length) {
            object.productInfo = [];
            for (var j = 0; j < message.productInfo.length; ++j)
                object.productInfo[j] = $root.BuildProduct.toObject(message.productInfo[j], options);
        }
        return object;
    };
    ActorEnterBuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorEnterBuildS2C;
})();
$root.ActorLeaveBuildC2S = (function() {
    function ActorLeaveBuildC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorLeaveBuildC2S.prototype.id = 0;
    ActorLeaveBuildC2S.prototype.actorId = 0;
    ActorLeaveBuildC2S.create = function create(properties) {
        return new ActorLeaveBuildC2S(properties);
    };
    ActorLeaveBuildC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        return writer;
    };
    ActorLeaveBuildC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorLeaveBuildC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorLeaveBuildC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorLeaveBuildC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorLeaveBuildC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    ActorLeaveBuildC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorLeaveBuildC2S)
            return object;
        var message = new $root.ActorLeaveBuildC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    ActorLeaveBuildC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.actorId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    ActorLeaveBuildC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorLeaveBuildC2S;
})();
$root.ActorLeaveBuildS2C = (function() {
    function ActorLeaveBuildS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorLeaveBuildS2C.prototype.error = 0;
    ActorLeaveBuildS2C.prototype.buildType = 0;
    ActorLeaveBuildS2C.prototype.actorCell = null;
    ActorLeaveBuildS2C.prototype.actorId = 0;
    ActorLeaveBuildS2C.create = function create(properties) {
        return new ActorLeaveBuildS2C(properties);
    };
    ActorLeaveBuildS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        if (message.actorCell != null && message.hasOwnProperty("actorCell"))
            $root.BuildActorCell.encode(message.actorCell, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.actorId);
        return writer;
    };
    ActorLeaveBuildS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorLeaveBuildS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorLeaveBuildS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            case 3:
                message.actorCell = $root.BuildActorCell.decode(reader, reader.uint32());
                break;
            case 4:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorLeaveBuildS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorLeaveBuildS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        if (message.actorCell != null && message.hasOwnProperty("actorCell")) {
            var error = $root.BuildActorCell.verify(message.actorCell);
            if (error)
                return "actorCell." + error;
        }
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    ActorLeaveBuildS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorLeaveBuildS2C)
            return object;
        var message = new $root.ActorLeaveBuildS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        if (object.actorCell != null) {
            if (typeof object.actorCell !== "object")
                throw TypeError(".ActorLeaveBuildS2C.actorCell: object expected");
            message.actorCell = $root.BuildActorCell.fromObject(object.actorCell);
        }
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    ActorLeaveBuildS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.buildType = 0;
            object.actorCell = null;
            object.actorId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        if (message.actorCell != null && message.hasOwnProperty("actorCell"))
            object.actorCell = $root.BuildActorCell.toObject(message.actorCell, options);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    ActorLeaveBuildS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorLeaveBuildS2C;
})();
$root.GamerNotifyGashaponInfoS2C = (function() {
    function GamerNotifyGashaponInfoS2C(properties) {
        this.infos = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyGashaponInfoS2C.prototype.error = 0;
    GamerNotifyGashaponInfoS2C.prototype.infos = $util.emptyArray;
    GamerNotifyGashaponInfoS2C.create = function create(properties) {
        return new GamerNotifyGashaponInfoS2C(properties);
    };
    GamerNotifyGashaponInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.infos != null && message.infos.length)
            for (var i = 0; i < message.infos.length; ++i)
                $root.Gashapon.encode(message.infos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyGashaponInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyGashaponInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyGashaponInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.infos && message.infos.length))
                    message.infos = [];
                message.infos.push($root.Gashapon.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyGashaponInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyGashaponInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.infos != null && message.hasOwnProperty("infos")) {
            if (!Array.isArray(message.infos))
                return "infos: array expected";
            for (var i = 0; i < message.infos.length; ++i) {
                var error = $root.Gashapon.verify(message.infos[i]);
                if (error)
                    return "infos." + error;
            }
        }
        return null;
    };
    GamerNotifyGashaponInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyGashaponInfoS2C)
            return object;
        var message = new $root.GamerNotifyGashaponInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.infos) {
            if (!Array.isArray(object.infos))
                throw TypeError(".GamerNotifyGashaponInfoS2C.infos: array expected");
            message.infos = [];
            for (var i = 0; i < object.infos.length; ++i) {
                if (typeof object.infos[i] !== "object")
                    throw TypeError(".GamerNotifyGashaponInfoS2C.infos: object expected");
                message.infos[i] = $root.Gashapon.fromObject(object.infos[i]);
            }
        }
        return message;
    };
    GamerNotifyGashaponInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.infos = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.infos && message.infos.length) {
            object.infos = [];
            for (var j = 0; j < message.infos.length; ++j)
                object.infos[j] = $root.Gashapon.toObject(message.infos[j], options);
        }
        return object;
    };
    GamerNotifyGashaponInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyGashaponInfoS2C;
})();
$root.GamerExtractGashaponC2S = (function() {
    function GamerExtractGashaponC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerExtractGashaponC2S.prototype.id = 0;
    GamerExtractGashaponC2S.prototype.gashaponId = 0;
    GamerExtractGashaponC2S.create = function create(properties) {
        return new GamerExtractGashaponC2S(properties);
    };
    GamerExtractGashaponC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        return writer;
    };
    GamerExtractGashaponC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerExtractGashaponC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerExtractGashaponC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerExtractGashaponC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerExtractGashaponC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        return null;
    };
    GamerExtractGashaponC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerExtractGashaponC2S)
            return object;
        var message = new $root.GamerExtractGashaponC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        return message;
    };
    GamerExtractGashaponC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        return object;
    };
    GamerExtractGashaponC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerExtractGashaponC2S;
})();
$root.GamerExtractGashaponS2C = (function() {
    function GamerExtractGashaponS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerExtractGashaponS2C.prototype.error = 0;
    GamerExtractGashaponS2C.prototype.gashaponId = 0;
    GamerExtractGashaponS2C.prototype.items = $util.emptyArray;
    GamerExtractGashaponS2C.create = function create(properties) {
        return new GamerExtractGashaponS2C(properties);
    };
    GamerExtractGashaponS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerExtractGashaponS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerExtractGashaponS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerExtractGashaponS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerExtractGashaponS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerExtractGashaponS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerExtractGashaponS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerExtractGashaponS2C)
            return object;
        var message = new $root.GamerExtractGashaponS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerExtractGashaponS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerExtractGashaponS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerExtractGashaponS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.gashaponId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerExtractGashaponS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerExtractGashaponS2C;
})();
$root.StoryExtractGashaponC2S = (function() {
    function StoryExtractGashaponC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryExtractGashaponC2S.prototype.id = 0;
    StoryExtractGashaponC2S.prototype.gashaponId = 0;
    StoryExtractGashaponC2S.create = function create(properties) {
        return new StoryExtractGashaponC2S(properties);
    };
    StoryExtractGashaponC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        return writer;
    };
    StoryExtractGashaponC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryExtractGashaponC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryExtractGashaponC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryExtractGashaponC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryExtractGashaponC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        return null;
    };
    StoryExtractGashaponC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryExtractGashaponC2S)
            return object;
        var message = new $root.StoryExtractGashaponC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        return message;
    };
    StoryExtractGashaponC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        return object;
    };
    StoryExtractGashaponC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryExtractGashaponC2S;
})();
$root.StoryExtractGashaponS2C = (function() {
    function StoryExtractGashaponS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryExtractGashaponS2C.prototype.error = 0;
    StoryExtractGashaponS2C.prototype.gashaponId = 0;
    StoryExtractGashaponS2C.prototype.storyExtractState = 0;
    StoryExtractGashaponS2C.prototype.items = $util.emptyArray;
    StoryExtractGashaponS2C.create = function create(properties) {
        return new StoryExtractGashaponS2C(properties);
    };
    StoryExtractGashaponS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        if (message.storyExtractState != null && message.hasOwnProperty("storyExtractState"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.storyExtractState);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    StoryExtractGashaponS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryExtractGashaponS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryExtractGashaponS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            case 3:
                message.storyExtractState = reader.int32();
                break;
            case 4:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryExtractGashaponS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryExtractGashaponS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        if (message.storyExtractState != null && message.hasOwnProperty("storyExtractState"))
            if (!$util.isInteger(message.storyExtractState))
                return "storyExtractState: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    StoryExtractGashaponS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryExtractGashaponS2C)
            return object;
        var message = new $root.StoryExtractGashaponS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        if (object.storyExtractState != null)
            message.storyExtractState = object.storyExtractState | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".StoryExtractGashaponS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".StoryExtractGashaponS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    StoryExtractGashaponS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.gashaponId = 0;
            object.storyExtractState = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        if (message.storyExtractState != null && message.hasOwnProperty("storyExtractState"))
            object.storyExtractState = message.storyExtractState;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    StoryExtractGashaponS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryExtractGashaponS2C;
})();
$root.GamerGetAllowanceC2S = (function() {
    function GamerGetAllowanceC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetAllowanceC2S.prototype.id = 0;
    GamerGetAllowanceC2S.prototype.type = 0;
    GamerGetAllowanceC2S.create = function create(properties) {
        return new GamerGetAllowanceC2S(properties);
    };
    GamerGetAllowanceC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };
    GamerGetAllowanceC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetAllowanceC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetAllowanceC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetAllowanceC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetAllowanceC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };
    GamerGetAllowanceC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetAllowanceC2S)
            return object;
        var message = new $root.GamerGetAllowanceC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };
    GamerGetAllowanceC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };
    GamerGetAllowanceC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetAllowanceC2S;
})();
$root.GamerGetAllowanceS2C = (function() {
    function GamerGetAllowanceS2C(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetAllowanceS2C.prototype.error = 0;
    GamerGetAllowanceS2C.prototype.type = 0;
    GamerGetAllowanceS2C.prototype.items = $util.emptyArray;
    GamerGetAllowanceS2C.create = function create(properties) {
        return new GamerGetAllowanceS2C(properties);
    };
    GamerGetAllowanceS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerGetAllowanceS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetAllowanceS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetAllowanceS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetAllowanceS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetAllowanceS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };
    GamerGetAllowanceS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetAllowanceS2C)
            return object;
        var message = new $root.GamerGetAllowanceS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerGetAllowanceS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerGetAllowanceS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        return message;
    };
    GamerGetAllowanceS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (options.defaults) {
            object.error = 0;
            object.type = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        return object;
    };
    GamerGetAllowanceS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetAllowanceS2C;
})();
$root.GetStoryExtractInfoC2S = (function() {
    function GetStoryExtractInfoC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetStoryExtractInfoC2S.prototype.id = 0;
    GetStoryExtractInfoC2S.prototype.gashaponId = 0;
    GetStoryExtractInfoC2S.create = function create(properties) {
        return new GetStoryExtractInfoC2S(properties);
    };
    GetStoryExtractInfoC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        return writer;
    };
    GetStoryExtractInfoC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetStoryExtractInfoC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetStoryExtractInfoC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetStoryExtractInfoC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetStoryExtractInfoC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        return null;
    };
    GetStoryExtractInfoC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetStoryExtractInfoC2S)
            return object;
        var message = new $root.GetStoryExtractInfoC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        return message;
    };
    GetStoryExtractInfoC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        return object;
    };
    GetStoryExtractInfoC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetStoryExtractInfoC2S;
})();
$root.GetStoryExtractInfoS2C = (function() {
    function GetStoryExtractInfoS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetStoryExtractInfoS2C.prototype.error = 0;
    GetStoryExtractInfoS2C.prototype.gashapon = null;
    GetStoryExtractInfoS2C.create = function create(properties) {
        return new GetStoryExtractInfoS2C(properties);
    };
    GetStoryExtractInfoS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashapon != null && message.hasOwnProperty("gashapon"))
            $root.Gashapon.encode(message.gashapon, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GetStoryExtractInfoS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetStoryExtractInfoS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetStoryExtractInfoS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashapon = $root.Gashapon.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetStoryExtractInfoS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetStoryExtractInfoS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashapon != null && message.hasOwnProperty("gashapon")) {
            var error = $root.Gashapon.verify(message.gashapon);
            if (error)
                return "gashapon." + error;
        }
        return null;
    };
    GetStoryExtractInfoS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetStoryExtractInfoS2C)
            return object;
        var message = new $root.GetStoryExtractInfoS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashapon != null) {
            if (typeof object.gashapon !== "object")
                throw TypeError(".GetStoryExtractInfoS2C.gashapon: object expected");
            message.gashapon = $root.Gashapon.fromObject(object.gashapon);
        }
        return message;
    };
    GetStoryExtractInfoS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.gashapon = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashapon != null && message.hasOwnProperty("gashapon"))
            object.gashapon = $root.Gashapon.toObject(message.gashapon, options);
        return object;
    };
    GetStoryExtractInfoS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetStoryExtractInfoS2C;
})();
$root.CleanStoryExtractCDC2S = (function() {
    function CleanStoryExtractCDC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CleanStoryExtractCDC2S.prototype.id = 0;
    CleanStoryExtractCDC2S.prototype.gashaponId = 0;
    CleanStoryExtractCDC2S.create = function create(properties) {
        return new CleanStoryExtractCDC2S(properties);
    };
    CleanStoryExtractCDC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        return writer;
    };
    CleanStoryExtractCDC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CleanStoryExtractCDC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CleanStoryExtractCDC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CleanStoryExtractCDC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CleanStoryExtractCDC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        return null;
    };
    CleanStoryExtractCDC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.CleanStoryExtractCDC2S)
            return object;
        var message = new $root.CleanStoryExtractCDC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        return message;
    };
    CleanStoryExtractCDC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        return object;
    };
    CleanStoryExtractCDC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CleanStoryExtractCDC2S;
})();
$root.CleanStoryExtractCDS2C = (function() {
    function CleanStoryExtractCDS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CleanStoryExtractCDS2C.prototype.error = 0;
    CleanStoryExtractCDS2C.prototype.gashapon = null;
    CleanStoryExtractCDS2C.create = function create(properties) {
        return new CleanStoryExtractCDS2C(properties);
    };
    CleanStoryExtractCDS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashapon != null && message.hasOwnProperty("gashapon"))
            $root.Gashapon.encode(message.gashapon, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    CleanStoryExtractCDS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CleanStoryExtractCDS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CleanStoryExtractCDS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashapon = $root.Gashapon.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CleanStoryExtractCDS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CleanStoryExtractCDS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashapon != null && message.hasOwnProperty("gashapon")) {
            var error = $root.Gashapon.verify(message.gashapon);
            if (error)
                return "gashapon." + error;
        }
        return null;
    };
    CleanStoryExtractCDS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.CleanStoryExtractCDS2C)
            return object;
        var message = new $root.CleanStoryExtractCDS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashapon != null) {
            if (typeof object.gashapon !== "object")
                throw TypeError(".CleanStoryExtractCDS2C.gashapon: object expected");
            message.gashapon = $root.Gashapon.fromObject(object.gashapon);
        }
        return message;
    };
    CleanStoryExtractCDS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.gashapon = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashapon != null && message.hasOwnProperty("gashapon"))
            object.gashapon = $root.Gashapon.toObject(message.gashapon, options);
        return object;
    };
    CleanStoryExtractCDS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CleanStoryExtractCDS2C;
})();
$root.PurchaseStoryExtractNumC2S = (function() {
    function PurchaseStoryExtractNumC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PurchaseStoryExtractNumC2S.prototype.id = 0;
    PurchaseStoryExtractNumC2S.prototype.gashaponId = 0;
    PurchaseStoryExtractNumC2S.create = function create(properties) {
        return new PurchaseStoryExtractNumC2S(properties);
    };
    PurchaseStoryExtractNumC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gashaponId);
        return writer;
    };
    PurchaseStoryExtractNumC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PurchaseStoryExtractNumC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PurchaseStoryExtractNumC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.gashaponId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PurchaseStoryExtractNumC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PurchaseStoryExtractNumC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            if (!$util.isInteger(message.gashaponId))
                return "gashaponId: integer expected";
        return null;
    };
    PurchaseStoryExtractNumC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.PurchaseStoryExtractNumC2S)
            return object;
        var message = new $root.PurchaseStoryExtractNumC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.gashaponId != null)
            message.gashaponId = object.gashaponId | 0;
        return message;
    };
    PurchaseStoryExtractNumC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.gashaponId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.gashaponId != null && message.hasOwnProperty("gashaponId"))
            object.gashaponId = message.gashaponId;
        return object;
    };
    PurchaseStoryExtractNumC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PurchaseStoryExtractNumC2S;
})();
$root.PurchaseStoryExtractNumS2C = (function() {
    function PurchaseStoryExtractNumS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PurchaseStoryExtractNumS2C.prototype.error = 0;
    PurchaseStoryExtractNumS2C.prototype.gashapon = null;
    PurchaseStoryExtractNumS2C.create = function create(properties) {
        return new PurchaseStoryExtractNumS2C(properties);
    };
    PurchaseStoryExtractNumS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.gashapon != null && message.hasOwnProperty("gashapon"))
            $root.Gashapon.encode(message.gashapon, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    PurchaseStoryExtractNumS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PurchaseStoryExtractNumS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PurchaseStoryExtractNumS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.gashapon = $root.Gashapon.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PurchaseStoryExtractNumS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PurchaseStoryExtractNumS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.gashapon != null && message.hasOwnProperty("gashapon")) {
            var error = $root.Gashapon.verify(message.gashapon);
            if (error)
                return "gashapon." + error;
        }
        return null;
    };
    PurchaseStoryExtractNumS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.PurchaseStoryExtractNumS2C)
            return object;
        var message = new $root.PurchaseStoryExtractNumS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.gashapon != null) {
            if (typeof object.gashapon !== "object")
                throw TypeError(".PurchaseStoryExtractNumS2C.gashapon: object expected");
            message.gashapon = $root.Gashapon.fromObject(object.gashapon);
        }
        return message;
    };
    PurchaseStoryExtractNumS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.gashapon = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.gashapon != null && message.hasOwnProperty("gashapon"))
            object.gashapon = $root.Gashapon.toObject(message.gashapon, options);
        return object;
    };
    PurchaseStoryExtractNumS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PurchaseStoryExtractNumS2C;
})();
$root.GamerNotifyIntelligenceS2C = (function() {
    function GamerNotifyIntelligenceS2C(properties) {
        this.intelligences = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyIntelligenceS2C.prototype.error = 0;
    GamerNotifyIntelligenceS2C.prototype.intelligences = $util.emptyArray;
    GamerNotifyIntelligenceS2C.create = function create(properties) {
        return new GamerNotifyIntelligenceS2C(properties);
    };
    GamerNotifyIntelligenceS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.intelligences != null && message.intelligences.length)
            for (var i = 0; i < message.intelligences.length; ++i)
                $root.Intelligence.encode(message.intelligences[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyIntelligenceS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyIntelligenceS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyIntelligenceS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.intelligences && message.intelligences.length))
                    message.intelligences = [];
                message.intelligences.push($root.Intelligence.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyIntelligenceS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyIntelligenceS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.intelligences != null && message.hasOwnProperty("intelligences")) {
            if (!Array.isArray(message.intelligences))
                return "intelligences: array expected";
            for (var i = 0; i < message.intelligences.length; ++i) {
                var error = $root.Intelligence.verify(message.intelligences[i]);
                if (error)
                    return "intelligences." + error;
            }
        }
        return null;
    };
    GamerNotifyIntelligenceS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyIntelligenceS2C)
            return object;
        var message = new $root.GamerNotifyIntelligenceS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.intelligences) {
            if (!Array.isArray(object.intelligences))
                throw TypeError(".GamerNotifyIntelligenceS2C.intelligences: array expected");
            message.intelligences = [];
            for (var i = 0; i < object.intelligences.length; ++i) {
                if (typeof object.intelligences[i] !== "object")
                    throw TypeError(".GamerNotifyIntelligenceS2C.intelligences: object expected");
                message.intelligences[i] = $root.Intelligence.fromObject(object.intelligences[i]);
            }
        }
        return message;
    };
    GamerNotifyIntelligenceS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.intelligences = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.intelligences && message.intelligences.length) {
            object.intelligences = [];
            for (var j = 0; j < message.intelligences.length; ++j)
                object.intelligences[j] = $root.Intelligence.toObject(message.intelligences[j], options);
        }
        return object;
    };
    GamerNotifyIntelligenceS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyIntelligenceS2C;
})();
$root.GamerGetIntelligenceC2S = (function() {
    function GamerGetIntelligenceC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetIntelligenceC2S.prototype.id = 0;
    GamerGetIntelligenceC2S.create = function create(properties) {
        return new GamerGetIntelligenceC2S(properties);
    };
    GamerGetIntelligenceC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerGetIntelligenceC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetIntelligenceC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetIntelligenceC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetIntelligenceC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetIntelligenceC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerGetIntelligenceC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetIntelligenceC2S)
            return object;
        var message = new $root.GamerGetIntelligenceC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerGetIntelligenceC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerGetIntelligenceC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetIntelligenceC2S;
})();
$root.GamerGetIntelligenceS2C = (function() {
    function GamerGetIntelligenceS2C(properties) {
        this.intelligences = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerGetIntelligenceS2C.prototype.error = 0;
    GamerGetIntelligenceS2C.prototype.intelligences = $util.emptyArray;
    GamerGetIntelligenceS2C.create = function create(properties) {
        return new GamerGetIntelligenceS2C(properties);
    };
    GamerGetIntelligenceS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.intelligences != null && message.intelligences.length)
            for (var i = 0; i < message.intelligences.length; ++i)
                $root.Intelligence.encode(message.intelligences[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerGetIntelligenceS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerGetIntelligenceS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerGetIntelligenceS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.intelligences && message.intelligences.length))
                    message.intelligences = [];
                message.intelligences.push($root.Intelligence.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerGetIntelligenceS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerGetIntelligenceS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.intelligences != null && message.hasOwnProperty("intelligences")) {
            if (!Array.isArray(message.intelligences))
                return "intelligences: array expected";
            for (var i = 0; i < message.intelligences.length; ++i) {
                var error = $root.Intelligence.verify(message.intelligences[i]);
                if (error)
                    return "intelligences." + error;
            }
        }
        return null;
    };
    GamerGetIntelligenceS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerGetIntelligenceS2C)
            return object;
        var message = new $root.GamerGetIntelligenceS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.intelligences) {
            if (!Array.isArray(object.intelligences))
                throw TypeError(".GamerGetIntelligenceS2C.intelligences: array expected");
            message.intelligences = [];
            for (var i = 0; i < object.intelligences.length; ++i) {
                if (typeof object.intelligences[i] !== "object")
                    throw TypeError(".GamerGetIntelligenceS2C.intelligences: object expected");
                message.intelligences[i] = $root.Intelligence.fromObject(object.intelligences[i]);
            }
        }
        return message;
    };
    GamerGetIntelligenceS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.intelligences = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.intelligences && message.intelligences.length) {
            object.intelligences = [];
            for (var j = 0; j < message.intelligences.length; ++j)
                object.intelligences[j] = $root.Intelligence.toObject(message.intelligences[j], options);
        }
        return object;
    };
    GamerGetIntelligenceS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerGetIntelligenceS2C;
})();
$root.GamerChangeIntelligenceStateC2S = (function() {
    function GamerChangeIntelligenceStateC2S(properties) {
        this.intelligencesId = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeIntelligenceStateC2S.prototype.id = 0;
    GamerChangeIntelligenceStateC2S.prototype.intelligencesId = $util.emptyArray;
    GamerChangeIntelligenceStateC2S.create = function create(properties) {
        return new GamerChangeIntelligenceStateC2S(properties);
    };
    GamerChangeIntelligenceStateC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.intelligencesId != null && message.intelligencesId.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.intelligencesId.length; ++i)
                writer.int32(message.intelligencesId[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerChangeIntelligenceStateC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeIntelligenceStateC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeIntelligenceStateC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                if (!(message.intelligencesId && message.intelligencesId.length))
                    message.intelligencesId = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.intelligencesId.push(reader.int32());
                } else
                    message.intelligencesId.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeIntelligenceStateC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeIntelligenceStateC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.intelligencesId != null && message.hasOwnProperty("intelligencesId")) {
            if (!Array.isArray(message.intelligencesId))
                return "intelligencesId: array expected";
            for (var i = 0; i < message.intelligencesId.length; ++i)
                if (!$util.isInteger(message.intelligencesId[i]))
                    return "intelligencesId: integer[] expected";
        }
        return null;
    };
    GamerChangeIntelligenceStateC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeIntelligenceStateC2S)
            return object;
        var message = new $root.GamerChangeIntelligenceStateC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.intelligencesId) {
            if (!Array.isArray(object.intelligencesId))
                throw TypeError(".GamerChangeIntelligenceStateC2S.intelligencesId: array expected");
            message.intelligencesId = [];
            for (var i = 0; i < object.intelligencesId.length; ++i)
                message.intelligencesId[i] = object.intelligencesId[i] | 0;
        }
        return message;
    };
    GamerChangeIntelligenceStateC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.intelligencesId = [];
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.intelligencesId && message.intelligencesId.length) {
            object.intelligencesId = [];
            for (var j = 0; j < message.intelligencesId.length; ++j)
                object.intelligencesId[j] = message.intelligencesId[j];
        }
        return object;
    };
    GamerChangeIntelligenceStateC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeIntelligenceStateC2S;
})();
$root.GamerChangeIntelligenceStateS2C = (function() {
    function GamerChangeIntelligenceStateS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerChangeIntelligenceStateS2C.prototype.error = 0;
    GamerChangeIntelligenceStateS2C.create = function create(properties) {
        return new GamerChangeIntelligenceStateS2C(properties);
    };
    GamerChangeIntelligenceStateS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    GamerChangeIntelligenceStateS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerChangeIntelligenceStateS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerChangeIntelligenceStateS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerChangeIntelligenceStateS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerChangeIntelligenceStateS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    GamerChangeIntelligenceStateS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerChangeIntelligenceStateS2C)
            return object;
        var message = new $root.GamerChangeIntelligenceStateS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    GamerChangeIntelligenceStateS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    GamerChangeIntelligenceStateS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerChangeIntelligenceStateS2C;
})();
$root.GamerIntelligenceParseC2S = (function() {
    function GamerIntelligenceParseC2S(properties) {
        this.intelligencesId = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerIntelligenceParseC2S.prototype.id = 0;
    GamerIntelligenceParseC2S.prototype.type = 0;
    GamerIntelligenceParseC2S.prototype.intelligencesId = $util.emptyArray;
    GamerIntelligenceParseC2S.create = function create(properties) {
        return new GamerIntelligenceParseC2S(properties);
    };
    GamerIntelligenceParseC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.intelligencesId != null && message.intelligencesId.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.intelligencesId.length; ++i)
                writer.int32(message.intelligencesId[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerIntelligenceParseC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerIntelligenceParseC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerIntelligenceParseC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                if (!(message.intelligencesId && message.intelligencesId.length))
                    message.intelligencesId = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.intelligencesId.push(reader.int32());
                } else
                    message.intelligencesId.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerIntelligenceParseC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerIntelligenceParseC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.intelligencesId != null && message.hasOwnProperty("intelligencesId")) {
            if (!Array.isArray(message.intelligencesId))
                return "intelligencesId: array expected";
            for (var i = 0; i < message.intelligencesId.length; ++i)
                if (!$util.isInteger(message.intelligencesId[i]))
                    return "intelligencesId: integer[] expected";
        }
        return null;
    };
    GamerIntelligenceParseC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerIntelligenceParseC2S)
            return object;
        var message = new $root.GamerIntelligenceParseC2S();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.type) {
        case "IntelligencePaseType_Normal":
        case 0:
            message.type = 0;
            break;
        case "IntelligencePaseType_Special":
        case 1:
            message.type = 1;
            break;
        }
        if (object.intelligencesId) {
            if (!Array.isArray(object.intelligencesId))
                throw TypeError(".GamerIntelligenceParseC2S.intelligencesId: array expected");
            message.intelligencesId = [];
            for (var i = 0; i < object.intelligencesId.length; ++i)
                message.intelligencesId[i] = object.intelligencesId[i] | 0;
        }
        return message;
    };
    GamerIntelligenceParseC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.intelligencesId = [];
        if (options.defaults) {
            object.id = 0;
            object.type = options.enums === String ? "IntelligencePaseType_Normal" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.IntelligencePaseType[message.type] : message.type;
        if (message.intelligencesId && message.intelligencesId.length) {
            object.intelligencesId = [];
            for (var j = 0; j < message.intelligencesId.length; ++j)
                object.intelligencesId[j] = message.intelligencesId[j];
        }
        return object;
    };
    GamerIntelligenceParseC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerIntelligenceParseC2S;
})();
$root.GamerIntelligenceParseS2C = (function() {
    function GamerIntelligenceParseS2C(properties) {
        this.items = [];
        this.notMatchIntelligencesId = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerIntelligenceParseS2C.prototype.error = 0;
    GamerIntelligenceParseS2C.prototype.type = 0;
    GamerIntelligenceParseS2C.prototype.actorId = 0;
    GamerIntelligenceParseS2C.prototype.items = $util.emptyArray;
    GamerIntelligenceParseS2C.prototype.notMatchIntelligencesId = $util.emptyArray;
    GamerIntelligenceParseS2C.create = function create(properties) {
        return new GamerIntelligenceParseS2C(properties);
    };
    GamerIntelligenceParseS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.actorId);
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.GameItem.encode(message.items[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.notMatchIntelligencesId != null && message.notMatchIntelligencesId.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.notMatchIntelligencesId.length; ++i)
                writer.int32(message.notMatchIntelligencesId[i]);
            writer.ldelim();
        }
        return writer;
    };
    GamerIntelligenceParseS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerIntelligenceParseS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerIntelligenceParseS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.actorId = reader.int32();
                break;
            case 4:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 5:
                if (!(message.notMatchIntelligencesId && message.notMatchIntelligencesId.length))
                    message.notMatchIntelligencesId = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.notMatchIntelligencesId.push(reader.int32());
                } else
                    message.notMatchIntelligencesId.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerIntelligenceParseS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerIntelligenceParseS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.GameItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        if (message.notMatchIntelligencesId != null && message.hasOwnProperty("notMatchIntelligencesId")) {
            if (!Array.isArray(message.notMatchIntelligencesId))
                return "notMatchIntelligencesId: array expected";
            for (var i = 0; i < message.notMatchIntelligencesId.length; ++i)
                if (!$util.isInteger(message.notMatchIntelligencesId[i]))
                    return "notMatchIntelligencesId: integer[] expected";
        }
        return null;
    };
    GamerIntelligenceParseS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerIntelligenceParseS2C)
            return object;
        var message = new $root.GamerIntelligenceParseS2C();
        if (object.error != null)
            message.error = object.error | 0;
        switch (object.type) {
        case "IntelligencePaseResultType_Actor":
        case 0:
            message.type = 0;
            break;
        case "IntelligencePaseResultType_Item":
        case 1:
            message.type = 1;
            break;
        case "IntelligencePaseResultType_ActorExit":
        case 2:
            message.type = 2;
            break;
        }
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".GamerIntelligenceParseS2C.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".GamerIntelligenceParseS2C.items: object expected");
                message.items[i] = $root.GameItem.fromObject(object.items[i]);
            }
        }
        if (object.notMatchIntelligencesId) {
            if (!Array.isArray(object.notMatchIntelligencesId))
                throw TypeError(".GamerIntelligenceParseS2C.notMatchIntelligencesId: array expected");
            message.notMatchIntelligencesId = [];
            for (var i = 0; i < object.notMatchIntelligencesId.length; ++i)
                message.notMatchIntelligencesId[i] = object.notMatchIntelligencesId[i] | 0;
        }
        return message;
    };
    GamerIntelligenceParseS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.items = [];
            object.notMatchIntelligencesId = [];
        }
        if (options.defaults) {
            object.error = 0;
            object.type = options.enums === String ? "IntelligencePaseResultType_Actor" : 0;
            object.actorId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.IntelligencePaseResultType[message.type] : message.type;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.GameItem.toObject(message.items[j], options);
        }
        if (message.notMatchIntelligencesId && message.notMatchIntelligencesId.length) {
            object.notMatchIntelligencesId = [];
            for (var j = 0; j < message.notMatchIntelligencesId.length; ++j)
                object.notMatchIntelligencesId[j] = message.notMatchIntelligencesId[j];
        }
        return object;
    };
    GamerIntelligenceParseS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerIntelligenceParseS2C;
})();
$root.StudioC2S = (function() {
    function StudioC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioC2S.prototype.id = 0;
    StudioC2S.create = function create(properties) {
        return new StudioC2S(properties);
    };
    StudioC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    StudioC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    StudioC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioC2S)
            return object;
        var message = new $root.StudioC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    StudioC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    StudioC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioC2S;
})();
$root.StudioS2C = (function() {
    function StudioS2C(properties) {
        this.actorPosList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioS2C.prototype.error = 0;
    StudioS2C.prototype.data = null;
    StudioS2C.prototype.actorPosList = $util.emptyArray;
    StudioS2C.create = function create(properties) {
        return new StudioS2C(properties);
    };
    StudioS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.StudioData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.actorPosList != null && message.actorPosList.length)
            for (var i = 0; i < message.actorPosList.length; ++i)
                $root.StudioActorHistoryPos.encode(message.actorPosList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    StudioS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.StudioData.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.actorPosList && message.actorPosList.length))
                    message.actorPosList = [];
                message.actorPosList.push($root.StudioActorHistoryPos.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.StudioData.verify(message.data);
            if (error)
                return "data." + error;
        }
        if (message.actorPosList != null && message.hasOwnProperty("actorPosList")) {
            if (!Array.isArray(message.actorPosList))
                return "actorPosList: array expected";
            for (var i = 0; i < message.actorPosList.length; ++i) {
                var error = $root.StudioActorHistoryPos.verify(message.actorPosList[i]);
                if (error)
                    return "actorPosList." + error;
            }
        }
        return null;
    };
    StudioS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioS2C)
            return object;
        var message = new $root.StudioS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".StudioS2C.data: object expected");
            message.data = $root.StudioData.fromObject(object.data);
        }
        if (object.actorPosList) {
            if (!Array.isArray(object.actorPosList))
                throw TypeError(".StudioS2C.actorPosList: array expected");
            message.actorPosList = [];
            for (var i = 0; i < object.actorPosList.length; ++i) {
                if (typeof object.actorPosList[i] !== "object")
                    throw TypeError(".StudioS2C.actorPosList: object expected");
                message.actorPosList[i] = $root.StudioActorHistoryPos.fromObject(object.actorPosList[i]);
            }
        }
        return message;
    };
    StudioS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.actorPosList = [];
        if (options.defaults) {
            object.error = 0;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.StudioData.toObject(message.data, options);
        if (message.actorPosList && message.actorPosList.length) {
            object.actorPosList = [];
            for (var j = 0; j < message.actorPosList.length; ++j)
                object.actorPosList[j] = $root.StudioActorHistoryPos.toObject(message.actorPosList[j], options);
        }
        return object;
    };
    StudioS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioS2C;
})();
$root.StudioStorySelectC2S = (function() {
    function StudioStorySelectC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioStorySelectC2S.prototype.id = 0;
    StudioStorySelectC2S.prototype.storyId = 0;
    StudioStorySelectC2S.prototype.name = "";
    StudioStorySelectC2S.create = function create(properties) {
        return new StudioStorySelectC2S(properties);
    };
    StudioStorySelectC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        return writer;
    };
    StudioStorySelectC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioStorySelectC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioStorySelectC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioStorySelectC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioStorySelectC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };
    StudioStorySelectC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioStorySelectC2S)
            return object;
        var message = new $root.StudioStorySelectC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };
    StudioStorySelectC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.storyId = 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };
    StudioStorySelectC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioStorySelectC2S;
})();
$root.StudioStorySelectS2C = (function() {
    function StudioStorySelectS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioStorySelectS2C.prototype.error = 0;
    StudioStorySelectS2C.prototype.data = null;
    StudioStorySelectS2C.create = function create(properties) {
        return new StudioStorySelectS2C(properties);
    };
    StudioStorySelectS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.StudioData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    StudioStorySelectS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioStorySelectS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioStorySelectS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.StudioData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioStorySelectS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioStorySelectS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.StudioData.verify(message.data);
            if (error)
                return "data." + error;
        }
        return null;
    };
    StudioStorySelectS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioStorySelectS2C)
            return object;
        var message = new $root.StudioStorySelectS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".StudioStorySelectS2C.data: object expected");
            message.data = $root.StudioData.fromObject(object.data);
        }
        return message;
    };
    StudioStorySelectS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.StudioData.toObject(message.data, options);
        return object;
    };
    StudioStorySelectS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioStorySelectS2C;
})();
$root.StudioActorSelectC2S = (function() {
    function StudioActorSelectC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioActorSelectC2S.prototype.id = 0;
    StudioActorSelectC2S.prototype.storyCharactersId = 0;
    StudioActorSelectC2S.prototype.actorId = 0;
    StudioActorSelectC2S.create = function create(properties) {
        return new StudioActorSelectC2S(properties);
    };
    StudioActorSelectC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyCharactersId);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.actorId);
        return writer;
    };
    StudioActorSelectC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioActorSelectC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioActorSelectC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storyCharactersId = reader.int32();
                break;
            case 3:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioActorSelectC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioActorSelectC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            if (!$util.isInteger(message.storyCharactersId))
                return "storyCharactersId: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    StudioActorSelectC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioActorSelectC2S)
            return object;
        var message = new $root.StudioActorSelectC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storyCharactersId != null)
            message.storyCharactersId = object.storyCharactersId | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    StudioActorSelectC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.storyCharactersId = 0;
            object.actorId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            object.storyCharactersId = message.storyCharactersId;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    StudioActorSelectC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioActorSelectC2S;
})();
$root.StudioActorSelectS2C = (function() {
    function StudioActorSelectS2C(properties) {
        this.actors = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioActorSelectS2C.prototype.error = 0;
    StudioActorSelectS2C.prototype.actors = $util.emptyArray;
    StudioActorSelectS2C.create = function create(properties) {
        return new StudioActorSelectS2C(properties);
    };
    StudioActorSelectS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.actors != null && message.actors.length)
            for (var i = 0; i < message.actors.length; ++i)
                $root.StudioActor.encode(message.actors[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    StudioActorSelectS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioActorSelectS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioActorSelectS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.actors && message.actors.length))
                    message.actors = [];
                message.actors.push($root.StudioActor.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioActorSelectS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioActorSelectS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.actors != null && message.hasOwnProperty("actors")) {
            if (!Array.isArray(message.actors))
                return "actors: array expected";
            for (var i = 0; i < message.actors.length; ++i) {
                var error = $root.StudioActor.verify(message.actors[i]);
                if (error)
                    return "actors." + error;
            }
        }
        return null;
    };
    StudioActorSelectS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioActorSelectS2C)
            return object;
        var message = new $root.StudioActorSelectS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.actors) {
            if (!Array.isArray(object.actors))
                throw TypeError(".StudioActorSelectS2C.actors: array expected");
            message.actors = [];
            for (var i = 0; i < object.actors.length; ++i) {
                if (typeof object.actors[i] !== "object")
                    throw TypeError(".StudioActorSelectS2C.actors: object expected");
                message.actors[i] = $root.StudioActor.fromObject(object.actors[i]);
            }
        }
        return message;
    };
    StudioActorSelectS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.actors = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.actors && message.actors.length) {
            object.actors = [];
            for (var j = 0; j < message.actors.length; ++j)
                object.actors[j] = $root.StudioActor.toObject(message.actors[j], options);
        }
        return object;
    };
    StudioActorSelectS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioActorSelectS2C;
})();
$root.StudioMatchingDisplayEndC2S = (function() {
    function StudioMatchingDisplayEndC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioMatchingDisplayEndC2S.prototype.id = 0;
    StudioMatchingDisplayEndC2S.create = function create(properties) {
        return new StudioMatchingDisplayEndC2S(properties);
    };
    StudioMatchingDisplayEndC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    StudioMatchingDisplayEndC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioMatchingDisplayEndC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioMatchingDisplayEndC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioMatchingDisplayEndC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioMatchingDisplayEndC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    StudioMatchingDisplayEndC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioMatchingDisplayEndC2S)
            return object;
        var message = new $root.StudioMatchingDisplayEndC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    StudioMatchingDisplayEndC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    StudioMatchingDisplayEndC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioMatchingDisplayEndC2S;
})();
$root.StudioMatchingDisplayEndS2C = (function() {
    function StudioMatchingDisplayEndS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioMatchingDisplayEndS2C.prototype.error = 0;
    StudioMatchingDisplayEndS2C.create = function create(properties) {
        return new StudioMatchingDisplayEndS2C(properties);
    };
    StudioMatchingDisplayEndS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        return writer;
    };
    StudioMatchingDisplayEndS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioMatchingDisplayEndS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioMatchingDisplayEndS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioMatchingDisplayEndS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioMatchingDisplayEndS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };
    StudioMatchingDisplayEndS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioMatchingDisplayEndS2C)
            return object;
        var message = new $root.StudioMatchingDisplayEndS2C();
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };
    StudioMatchingDisplayEndS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };
    StudioMatchingDisplayEndS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioMatchingDisplayEndS2C;
})();
$root.GamerNotifyStudioEventS2C = (function() {
    function GamerNotifyStudioEventS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyStudioEventS2C.prototype.error = 0;
    GamerNotifyStudioEventS2C.prototype.eventId = 0;
    GamerNotifyStudioEventS2C.prototype.eventType = 0;
    GamerNotifyStudioEventS2C.prototype.actorId = 0;
    GamerNotifyStudioEventS2C.create = function create(properties) {
        return new GamerNotifyStudioEventS2C(properties);
    };
    GamerNotifyStudioEventS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.eventId != null && message.hasOwnProperty("eventId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.eventId);
        if (message.eventType != null && message.hasOwnProperty("eventType"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.eventType);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.actorId);
        return writer;
    };
    GamerNotifyStudioEventS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyStudioEventS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyStudioEventS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.eventId = reader.int32();
                break;
            case 3:
                message.eventType = reader.int32();
                break;
            case 4:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyStudioEventS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyStudioEventS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.eventId != null && message.hasOwnProperty("eventId"))
            if (!$util.isInteger(message.eventId))
                return "eventId: integer expected";
        if (message.eventType != null && message.hasOwnProperty("eventType"))
            switch (message.eventType) {
            default:
                return "eventType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    GamerNotifyStudioEventS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyStudioEventS2C)
            return object;
        var message = new $root.GamerNotifyStudioEventS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.eventId != null)
            message.eventId = object.eventId | 0;
        switch (object.eventType) {
        case "storyInvalid":
        case 0:
            message.eventType = 0;
            break;
        case "storyCharactersBest":
        case 1:
            message.eventType = 1;
            break;
        case "storyNoraml":
        case 2:
            message.eventType = 2;
            break;
        case "storyActor":
        case 3:
            message.eventType = 3;
            break;
        }
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    GamerNotifyStudioEventS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.eventId = 0;
            object.eventType = options.enums === String ? "storyInvalid" : 0;
            object.actorId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.eventId != null && message.hasOwnProperty("eventId"))
            object.eventId = message.eventId;
        if (message.eventType != null && message.hasOwnProperty("eventType"))
            object.eventType = options.enums === String ? $root.StudioEventType[message.eventType] : message.eventType;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    GamerNotifyStudioEventS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyStudioEventS2C;
})();
$root.StudioEventOptionSelectC2S = (function() {
    function StudioEventOptionSelectC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioEventOptionSelectC2S.prototype.id = 0;
    StudioEventOptionSelectC2S.prototype.eventOption = 0;
    StudioEventOptionSelectC2S.create = function create(properties) {
        return new StudioEventOptionSelectC2S(properties);
    };
    StudioEventOptionSelectC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.eventOption != null && message.hasOwnProperty("eventOption"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.eventOption);
        return writer;
    };
    StudioEventOptionSelectC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioEventOptionSelectC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioEventOptionSelectC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.eventOption = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioEventOptionSelectC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioEventOptionSelectC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.eventOption != null && message.hasOwnProperty("eventOption"))
            if (!$util.isInteger(message.eventOption))
                return "eventOption: integer expected";
        return null;
    };
    StudioEventOptionSelectC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioEventOptionSelectC2S)
            return object;
        var message = new $root.StudioEventOptionSelectC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.eventOption != null)
            message.eventOption = object.eventOption | 0;
        return message;
    };
    StudioEventOptionSelectC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.eventOption = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.eventOption != null && message.hasOwnProperty("eventOption"))
            object.eventOption = message.eventOption;
        return object;
    };
    StudioEventOptionSelectC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioEventOptionSelectC2S;
})();
$root.StudioEventOptionSelectS2C = (function() {
    function StudioEventOptionSelectS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioEventOptionSelectS2C.prototype.error = 0;
    StudioEventOptionSelectS2C.prototype.event = null;
    StudioEventOptionSelectS2C.create = function create(properties) {
        return new StudioEventOptionSelectS2C(properties);
    };
    StudioEventOptionSelectS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.event != null && message.hasOwnProperty("event"))
            $root.StudioEvent.encode(message.event, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    StudioEventOptionSelectS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioEventOptionSelectS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioEventOptionSelectS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.event = $root.StudioEvent.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioEventOptionSelectS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioEventOptionSelectS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.event != null && message.hasOwnProperty("event")) {
            var error = $root.StudioEvent.verify(message.event);
            if (error)
                return "event." + error;
        }
        return null;
    };
    StudioEventOptionSelectS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioEventOptionSelectS2C)
            return object;
        var message = new $root.StudioEventOptionSelectS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.event != null) {
            if (typeof object.event !== "object")
                throw TypeError(".StudioEventOptionSelectS2C.event: object expected");
            message.event = $root.StudioEvent.fromObject(object.event);
        }
        return message;
    };
    StudioEventOptionSelectS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.event = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.event != null && message.hasOwnProperty("event"))
            object.event = $root.StudioEvent.toObject(message.event, options);
        return object;
    };
    StudioEventOptionSelectS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioEventOptionSelectS2C;
})();
$root.StudioStartC2S = (function() {
    function StudioStartC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioStartC2S.prototype.id = 0;
    StudioStartC2S.create = function create(properties) {
        return new StudioStartC2S(properties);
    };
    StudioStartC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    StudioStartC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioStartC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioStartC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioStartC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioStartC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    StudioStartC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioStartC2S)
            return object;
        var message = new $root.StudioStartC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    StudioStartC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    StudioStartC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioStartC2S;
})();
$root.StudioStartS2C = (function() {
    function StudioStartS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioStartS2C.prototype.error = 0;
    StudioStartS2C.prototype.data = null;
    StudioStartS2C.create = function create(properties) {
        return new StudioStartS2C(properties);
    };
    StudioStartS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.StudioData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    StudioStartS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioStartS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioStartS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.StudioData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioStartS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioStartS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.StudioData.verify(message.data);
            if (error)
                return "data." + error;
        }
        return null;
    };
    StudioStartS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioStartS2C)
            return object;
        var message = new $root.StudioStartS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".StudioStartS2C.data: object expected");
            message.data = $root.StudioData.fromObject(object.data);
        }
        return message;
    };
    StudioStartS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.data = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.StudioData.toObject(message.data, options);
        return object;
    };
    StudioStartS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioStartS2C;
})();
$root.StudioNextStepC2S = (function() {
    function StudioNextStepC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioNextStepC2S.prototype.id = 0;
    StudioNextStepC2S.prototype.step = 0;
    StudioNextStepC2S.create = function create(properties) {
        return new StudioNextStepC2S(properties);
    };
    StudioNextStepC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.step != null && message.hasOwnProperty("step"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.step);
        return writer;
    };
    StudioNextStepC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioNextStepC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioNextStepC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.step = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioNextStepC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioNextStepC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.step != null && message.hasOwnProperty("step"))
            switch (message.step) {
            default:
                return "step: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        return null;
    };
    StudioNextStepC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioNextStepC2S)
            return object;
        var message = new $root.StudioNextStepC2S();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.step) {
        case "studioStepInvalid":
        case 0:
            message.step = 0;
            break;
        case "selectStory":
        case 1:
            message.step = 1;
            break;
        case "selectActor":
        case 2:
            message.step = 2;
            break;
        case "matchingDisplay":
        case 3:
            message.step = 3;
            break;
        case "selectEventOption":
        case 4:
            message.step = 4;
            break;
        case "eventEvaluations":
        case 5:
            message.step = 5;
            break;
        case "studio":
        case 6:
            message.step = 6;
            break;
        case "propDisplay":
        case 7:
            message.step = 7;
            break;
        case "shareDisplay":
        case 8:
            message.step = 8;
            break;
        case "firstReward":
        case 9:
            message.step = 9;
            break;
        case "end":
        case 10:
            message.step = 10;
            break;
        }
        return message;
    };
    StudioNextStepC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.step = options.enums === String ? "studioStepInvalid" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.step != null && message.hasOwnProperty("step"))
            object.step = options.enums === String ? $root.StudioStep[message.step] : message.step;
        return object;
    };
    StudioNextStepC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioNextStepC2S;
})();
$root.StudioNextStepS2C = (function() {
    function StudioNextStepS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioNextStepS2C.prototype.error = 0;
    StudioNextStepS2C.prototype.step = 0;
    StudioNextStepS2C.create = function create(properties) {
        return new StudioNextStepS2C(properties);
    };
    StudioNextStepS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.step != null && message.hasOwnProperty("step"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.step);
        return writer;
    };
    StudioNextStepS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioNextStepS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioNextStepS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.step = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioNextStepS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioNextStepS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.step != null && message.hasOwnProperty("step"))
            switch (message.step) {
            default:
                return "step: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        return null;
    };
    StudioNextStepS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioNextStepS2C)
            return object;
        var message = new $root.StudioNextStepS2C();
        if (object.error != null)
            message.error = object.error | 0;
        switch (object.step) {
        case "studioStepInvalid":
        case 0:
            message.step = 0;
            break;
        case "selectStory":
        case 1:
            message.step = 1;
            break;
        case "selectActor":
        case 2:
            message.step = 2;
            break;
        case "matchingDisplay":
        case 3:
            message.step = 3;
            break;
        case "selectEventOption":
        case 4:
            message.step = 4;
            break;
        case "eventEvaluations":
        case 5:
            message.step = 5;
            break;
        case "studio":
        case 6:
            message.step = 6;
            break;
        case "propDisplay":
        case 7:
            message.step = 7;
            break;
        case "shareDisplay":
        case 8:
            message.step = 8;
            break;
        case "firstReward":
        case 9:
            message.step = 9;
            break;
        case "end":
        case 10:
            message.step = 10;
            break;
        }
        return message;
    };
    StudioNextStepS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.step = options.enums === String ? "studioStepInvalid" : 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.step != null && message.hasOwnProperty("step"))
            object.step = options.enums === String ? $root.StudioStep[message.step] : message.step;
        return object;
    };
    StudioNextStepS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioNextStepS2C;
})();
$root.GamerNotifyStudioFirstRewardS2C = (function() {
    function GamerNotifyStudioFirstRewardS2C(properties) {
        this.firstReward = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyStudioFirstRewardS2C.prototype.error = 0;
    GamerNotifyStudioFirstRewardS2C.prototype.firstReward = $util.emptyArray;
    GamerNotifyStudioFirstRewardS2C.prototype.continueEarning = null;
    GamerNotifyStudioFirstRewardS2C.create = function create(properties) {
        return new GamerNotifyStudioFirstRewardS2C(properties);
    };
    GamerNotifyStudioFirstRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.firstReward != null && message.firstReward.length)
            for (var i = 0; i < message.firstReward.length; ++i)
                $root.GameItem.encode(message.firstReward[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.continueEarning != null && message.hasOwnProperty("continueEarning"))
            $root.StudioContinuedData.encode(message.continueEarning, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    GamerNotifyStudioFirstRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyStudioFirstRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyStudioFirstRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.firstReward && message.firstReward.length))
                    message.firstReward = [];
                message.firstReward.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 3:
                message.continueEarning = $root.StudioContinuedData.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyStudioFirstRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyStudioFirstRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.firstReward != null && message.hasOwnProperty("firstReward")) {
            if (!Array.isArray(message.firstReward))
                return "firstReward: array expected";
            for (var i = 0; i < message.firstReward.length; ++i) {
                var error = $root.GameItem.verify(message.firstReward[i]);
                if (error)
                    return "firstReward." + error;
            }
        }
        if (message.continueEarning != null && message.hasOwnProperty("continueEarning")) {
            var error = $root.StudioContinuedData.verify(message.continueEarning);
            if (error)
                return "continueEarning." + error;
        }
        return null;
    };
    GamerNotifyStudioFirstRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyStudioFirstRewardS2C)
            return object;
        var message = new $root.GamerNotifyStudioFirstRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.firstReward) {
            if (!Array.isArray(object.firstReward))
                throw TypeError(".GamerNotifyStudioFirstRewardS2C.firstReward: array expected");
            message.firstReward = [];
            for (var i = 0; i < object.firstReward.length; ++i) {
                if (typeof object.firstReward[i] !== "object")
                    throw TypeError(".GamerNotifyStudioFirstRewardS2C.firstReward: object expected");
                message.firstReward[i] = $root.GameItem.fromObject(object.firstReward[i]);
            }
        }
        if (object.continueEarning != null) {
            if (typeof object.continueEarning !== "object")
                throw TypeError(".GamerNotifyStudioFirstRewardS2C.continueEarning: object expected");
            message.continueEarning = $root.StudioContinuedData.fromObject(object.continueEarning);
        }
        return message;
    };
    GamerNotifyStudioFirstRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.firstReward = [];
        if (options.defaults) {
            object.error = 0;
            object.continueEarning = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.firstReward && message.firstReward.length) {
            object.firstReward = [];
            for (var j = 0; j < message.firstReward.length; ++j)
                object.firstReward[j] = $root.GameItem.toObject(message.firstReward[j], options);
        }
        if (message.continueEarning != null && message.hasOwnProperty("continueEarning"))
            object.continueEarning = $root.StudioContinuedData.toObject(message.continueEarning, options);
        return object;
    };
    GamerNotifyStudioFirstRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyStudioFirstRewardS2C;
})();
$root.StudioContinuedListC2S = (function() {
    function StudioContinuedListC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedListC2S.prototype.id = 0;
    StudioContinuedListC2S.create = function create(properties) {
        return new StudioContinuedListC2S(properties);
    };
    StudioContinuedListC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    StudioContinuedListC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedListC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedListC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedListC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedListC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    StudioContinuedListC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedListC2S)
            return object;
        var message = new $root.StudioContinuedListC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    StudioContinuedListC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    StudioContinuedListC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedListC2S;
})();
$root.StudioContinuedListS2C = (function() {
    function StudioContinuedListS2C(properties) {
        this.list = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedListS2C.prototype.error = 0;
    StudioContinuedListS2C.prototype.list = $util.emptyArray;
    StudioContinuedListS2C.create = function create(properties) {
        return new StudioContinuedListS2C(properties);
    };
    StudioContinuedListS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.list != null && message.list.length)
            for (var i = 0; i < message.list.length; ++i)
                $root.StudioContinuedData.encode(message.list[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    StudioContinuedListS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedListS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedListS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.list && message.list.length))
                    message.list = [];
                message.list.push($root.StudioContinuedData.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedListS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedListS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.list != null && message.hasOwnProperty("list")) {
            if (!Array.isArray(message.list))
                return "list: array expected";
            for (var i = 0; i < message.list.length; ++i) {
                var error = $root.StudioContinuedData.verify(message.list[i]);
                if (error)
                    return "list." + error;
            }
        }
        return null;
    };
    StudioContinuedListS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedListS2C)
            return object;
        var message = new $root.StudioContinuedListS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.list) {
            if (!Array.isArray(object.list))
                throw TypeError(".StudioContinuedListS2C.list: array expected");
            message.list = [];
            for (var i = 0; i < object.list.length; ++i) {
                if (typeof object.list[i] !== "object")
                    throw TypeError(".StudioContinuedListS2C.list: object expected");
                message.list[i] = $root.StudioContinuedData.fromObject(object.list[i]);
            }
        }
        return message;
    };
    StudioContinuedListS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.list = [];
        if (options.defaults)
            object.error = 0;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.list && message.list.length) {
            object.list = [];
            for (var j = 0; j < message.list.length; ++j)
                object.list[j] = $root.StudioContinuedData.toObject(message.list[j], options);
        }
        return object;
    };
    StudioContinuedListS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedListS2C;
})();
$root.StudioContinuedReceiveC2S = (function() {
    function StudioContinuedReceiveC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedReceiveC2S.prototype.id = 0;
    StudioContinuedReceiveC2S.prototype.uid = 0;
    StudioContinuedReceiveC2S.create = function create(properties) {
        return new StudioContinuedReceiveC2S(properties);
    };
    StudioContinuedReceiveC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.uid);
        return writer;
    };
    StudioContinuedReceiveC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedReceiveC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedReceiveC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.uid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedReceiveC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedReceiveC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        return null;
    };
    StudioContinuedReceiveC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedReceiveC2S)
            return object;
        var message = new $root.StudioContinuedReceiveC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.uid != null)
            message.uid = object.uid | 0;
        return message;
    };
    StudioContinuedReceiveC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.uid = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        return object;
    };
    StudioContinuedReceiveC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedReceiveC2S;
})();
$root.StudioContinuedReceiveS2C = (function() {
    function StudioContinuedReceiveS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedReceiveS2C.prototype.error = 0;
    StudioContinuedReceiveS2C.prototype.data = null;
    StudioContinuedReceiveS2C.prototype.goldNum = 0;
    StudioContinuedReceiveS2C.create = function create(properties) {
        return new StudioContinuedReceiveS2C(properties);
    };
    StudioContinuedReceiveS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.data != null && message.hasOwnProperty("data"))
            $root.StudioContinuedUpdateData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.goldNum != null && message.hasOwnProperty("goldNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.goldNum);
        return writer;
    };
    StudioContinuedReceiveS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedReceiveS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedReceiveS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.data = $root.StudioContinuedUpdateData.decode(reader, reader.uint32());
                break;
            case 3:
                message.goldNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedReceiveS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedReceiveS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            var error = $root.StudioContinuedUpdateData.verify(message.data);
            if (error)
                return "data." + error;
        }
        if (message.goldNum != null && message.hasOwnProperty("goldNum"))
            if (!$util.isInteger(message.goldNum))
                return "goldNum: integer expected";
        return null;
    };
    StudioContinuedReceiveS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedReceiveS2C)
            return object;
        var message = new $root.StudioContinuedReceiveS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.data != null) {
            if (typeof object.data !== "object")
                throw TypeError(".StudioContinuedReceiveS2C.data: object expected");
            message.data = $root.StudioContinuedUpdateData.fromObject(object.data);
        }
        if (object.goldNum != null)
            message.goldNum = object.goldNum | 0;
        return message;
    };
    StudioContinuedReceiveS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.data = null;
            object.goldNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = $root.StudioContinuedUpdateData.toObject(message.data, options);
        if (message.goldNum != null && message.hasOwnProperty("goldNum"))
            object.goldNum = message.goldNum;
        return object;
    };
    StudioContinuedReceiveS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedReceiveS2C;
})();
$root.StudioContinuedReceiveAllC2S = (function() {
    function StudioContinuedReceiveAllC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedReceiveAllC2S.prototype.id = 0;
    StudioContinuedReceiveAllC2S.create = function create(properties) {
        return new StudioContinuedReceiveAllC2S(properties);
    };
    StudioContinuedReceiveAllC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    StudioContinuedReceiveAllC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedReceiveAllC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedReceiveAllC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedReceiveAllC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedReceiveAllC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    StudioContinuedReceiveAllC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedReceiveAllC2S)
            return object;
        var message = new $root.StudioContinuedReceiveAllC2S();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    StudioContinuedReceiveAllC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    StudioContinuedReceiveAllC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedReceiveAllC2S;
})();
$root.StudioContinuedReceiveAllS2C = (function() {
    function StudioContinuedReceiveAllS2C(properties) {
        this.dataList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedReceiveAllS2C.prototype.error = 0;
    StudioContinuedReceiveAllS2C.prototype.dataList = $util.emptyArray;
    StudioContinuedReceiveAllS2C.prototype.goldNum = 0;
    StudioContinuedReceiveAllS2C.create = function create(properties) {
        return new StudioContinuedReceiveAllS2C(properties);
    };
    StudioContinuedReceiveAllS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.dataList != null && message.dataList.length)
            for (var i = 0; i < message.dataList.length; ++i)
                $root.StudioContinuedUpdateData.encode(message.dataList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.goldNum != null && message.hasOwnProperty("goldNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.goldNum);
        return writer;
    };
    StudioContinuedReceiveAllS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedReceiveAllS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedReceiveAllS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                if (!(message.dataList && message.dataList.length))
                    message.dataList = [];
                message.dataList.push($root.StudioContinuedUpdateData.decode(reader, reader.uint32()));
                break;
            case 3:
                message.goldNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedReceiveAllS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedReceiveAllS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.dataList != null && message.hasOwnProperty("dataList")) {
            if (!Array.isArray(message.dataList))
                return "dataList: array expected";
            for (var i = 0; i < message.dataList.length; ++i) {
                var error = $root.StudioContinuedUpdateData.verify(message.dataList[i]);
                if (error)
                    return "dataList." + error;
            }
        }
        if (message.goldNum != null && message.hasOwnProperty("goldNum"))
            if (!$util.isInteger(message.goldNum))
                return "goldNum: integer expected";
        return null;
    };
    StudioContinuedReceiveAllS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedReceiveAllS2C)
            return object;
        var message = new $root.StudioContinuedReceiveAllS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.dataList) {
            if (!Array.isArray(object.dataList))
                throw TypeError(".StudioContinuedReceiveAllS2C.dataList: array expected");
            message.dataList = [];
            for (var i = 0; i < object.dataList.length; ++i) {
                if (typeof object.dataList[i] !== "object")
                    throw TypeError(".StudioContinuedReceiveAllS2C.dataList: object expected");
                message.dataList[i] = $root.StudioContinuedUpdateData.fromObject(object.dataList[i]);
            }
        }
        if (object.goldNum != null)
            message.goldNum = object.goldNum | 0;
        return message;
    };
    StudioContinuedReceiveAllS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.dataList = [];
        if (options.defaults) {
            object.error = 0;
            object.goldNum = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.dataList && message.dataList.length) {
            object.dataList = [];
            for (var j = 0; j < message.dataList.length; ++j)
                object.dataList[j] = $root.StudioContinuedUpdateData.toObject(message.dataList[j], options);
        }
        if (message.goldNum != null && message.hasOwnProperty("goldNum"))
            object.goldNum = message.goldNum;
        return object;
    };
    StudioContinuedReceiveAllS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedReceiveAllS2C;
})();
$root.GamerNotifyActivitiesS2C = (function() {
    function GamerNotifyActivitiesS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerNotifyActivitiesS2C.prototype.error = 0;
    GamerNotifyActivitiesS2C.prototype.countActivity = null;
    GamerNotifyActivitiesS2C.create = function create(properties) {
        return new GamerNotifyActivitiesS2C(properties);
    };
    GamerNotifyActivitiesS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.countActivity != null && message.hasOwnProperty("countActivity"))
            $root.CountActivity.encode(message.countActivity, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };
    GamerNotifyActivitiesS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerNotifyActivitiesS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerNotifyActivitiesS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.countActivity = $root.CountActivity.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerNotifyActivitiesS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerNotifyActivitiesS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.countActivity != null && message.hasOwnProperty("countActivity")) {
            var error = $root.CountActivity.verify(message.countActivity);
            if (error)
                return "countActivity." + error;
        }
        return null;
    };
    GamerNotifyActivitiesS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerNotifyActivitiesS2C)
            return object;
        var message = new $root.GamerNotifyActivitiesS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.countActivity != null) {
            if (typeof object.countActivity !== "object")
                throw TypeError(".GamerNotifyActivitiesS2C.countActivity: object expected");
            message.countActivity = $root.CountActivity.fromObject(object.countActivity);
        }
        return message;
    };
    GamerNotifyActivitiesS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.countActivity = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.countActivity != null && message.hasOwnProperty("countActivity"))
            object.countActivity = $root.CountActivity.toObject(message.countActivity, options);
        return object;
    };
    GamerNotifyActivitiesS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerNotifyActivitiesS2C;
})();
$root.GetActivityRewardC2S = (function() {
    function GetActivityRewardC2S(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetActivityRewardC2S.prototype.id = 0;
    GetActivityRewardC2S.prototype.activityId = 0;
    GetActivityRewardC2S.create = function create(properties) {
        return new GetActivityRewardC2S(properties);
    };
    GetActivityRewardC2S.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.activityId);
        return writer;
    };
    GetActivityRewardC2S.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetActivityRewardC2S.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetActivityRewardC2S();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.activityId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetActivityRewardC2S.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetActivityRewardC2S.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            if (!$util.isInteger(message.activityId))
                return "activityId: integer expected";
        return null;
    };
    GetActivityRewardC2S.fromObject = function fromObject(object) {
        if (object instanceof $root.GetActivityRewardC2S)
            return object;
        var message = new $root.GetActivityRewardC2S();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.activityId != null)
            message.activityId = object.activityId | 0;
        return message;
    };
    GetActivityRewardC2S.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.activityId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            object.activityId = message.activityId;
        return object;
    };
    GetActivityRewardC2S.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetActivityRewardC2S;
})();
$root.GetActivityRewardS2C = (function() {
    function GetActivityRewardS2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GetActivityRewardS2C.prototype.error = 0;
    GetActivityRewardS2C.prototype.activityId = 0;
    GetActivityRewardS2C.create = function create(properties) {
        return new GetActivityRewardS2C(properties);
    };
    GetActivityRewardS2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.activityId);
        return writer;
    };
    GetActivityRewardS2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GetActivityRewardS2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetActivityRewardS2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.activityId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GetActivityRewardS2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GetActivityRewardS2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            if (!$util.isInteger(message.activityId))
                return "activityId: integer expected";
        return null;
    };
    GetActivityRewardS2C.fromObject = function fromObject(object) {
        if (object instanceof $root.GetActivityRewardS2C)
            return object;
        var message = new $root.GetActivityRewardS2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.activityId != null)
            message.activityId = object.activityId | 0;
        return message;
    };
    GetActivityRewardS2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.activityId = 0;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.activityId != null && message.hasOwnProperty("activityId"))
            object.activityId = message.activityId;
        return object;
    };
    GetActivityRewardS2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GetActivityRewardS2C;
})();
$root.ServerTime = (function() {
    function ServerTime(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ServerTime.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    ServerTime.prototype.year = 0;
    ServerTime.prototype.month = 0;
    ServerTime.prototype.day = 0;
    ServerTime.prototype.hour = 0;
    ServerTime.prototype.minute = 0;
    ServerTime.prototype.second = 0;
    ServerTime.prototype.timezone = 0;
    ServerTime.create = function create(properties) {
        return new ServerTime(properties);
    };
    ServerTime.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timestamp);
        if (message.year != null && message.hasOwnProperty("year"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.year);
        if (message.month != null && message.hasOwnProperty("month"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.month);
        if (message.day != null && message.hasOwnProperty("day"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.day);
        if (message.hour != null && message.hasOwnProperty("hour"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.hour);
        if (message.minute != null && message.hasOwnProperty("minute"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.minute);
        if (message.second != null && message.hasOwnProperty("second"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.second);
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.timezone);
        return writer;
    };
    ServerTime.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ServerTime.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerTime();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.timestamp = reader.int64();
                break;
            case 2:
                message.year = reader.int32();
                break;
            case 3:
                message.month = reader.int32();
                break;
            case 4:
                message.day = reader.int32();
                break;
            case 5:
                message.hour = reader.int32();
                break;
            case 6:
                message.minute = reader.int32();
                break;
            case 7:
                message.second = reader.int32();
                break;
            case 8:
                message.timezone = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ServerTime.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ServerTime.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                return "timestamp: integer|Long expected";
        if (message.year != null && message.hasOwnProperty("year"))
            if (!$util.isInteger(message.year))
                return "year: integer expected";
        if (message.month != null && message.hasOwnProperty("month"))
            if (!$util.isInteger(message.month))
                return "month: integer expected";
        if (message.day != null && message.hasOwnProperty("day"))
            if (!$util.isInteger(message.day))
                return "day: integer expected";
        if (message.hour != null && message.hasOwnProperty("hour"))
            if (!$util.isInteger(message.hour))
                return "hour: integer expected";
        if (message.minute != null && message.hasOwnProperty("minute"))
            if (!$util.isInteger(message.minute))
                return "minute: integer expected";
        if (message.second != null && message.hasOwnProperty("second"))
            if (!$util.isInteger(message.second))
                return "second: integer expected";
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            if (!$util.isInteger(message.timezone))
                return "timezone: integer expected";
        return null;
    };
    ServerTime.fromObject = function fromObject(object) {
        if (object instanceof $root.ServerTime)
            return object;
        var message = new $root.ServerTime();
        if (object.timestamp != null)
            if ($util.Long)
                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
            else if (typeof object.timestamp === "string")
                message.timestamp = parseInt(object.timestamp, 10);
            else if (typeof object.timestamp === "number")
                message.timestamp = object.timestamp;
            else if (typeof object.timestamp === "object")
                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
        if (object.year != null)
            message.year = object.year | 0;
        if (object.month != null)
            message.month = object.month | 0;
        if (object.day != null)
            message.day = object.day | 0;
        if (object.hour != null)
            message.hour = object.hour | 0;
        if (object.minute != null)
            message.minute = object.minute | 0;
        if (object.second != null)
            message.second = object.second | 0;
        if (object.timezone != null)
            message.timezone = object.timezone | 0;
        return message;
    };
    ServerTime.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.timestamp = options.longs === String ? "0" : 0;
            object.year = 0;
            object.month = 0;
            object.day = 0;
            object.hour = 0;
            object.minute = 0;
            object.second = 0;
            object.timezone = 0;
        }
        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
            if (typeof message.timestamp === "number")
                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
            else
                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
        if (message.year != null && message.hasOwnProperty("year"))
            object.year = message.year;
        if (message.month != null && message.hasOwnProperty("month"))
            object.month = message.month;
        if (message.day != null && message.hasOwnProperty("day"))
            object.day = message.day;
        if (message.hour != null && message.hasOwnProperty("hour"))
            object.hour = message.hour;
        if (message.minute != null && message.hasOwnProperty("minute"))
            object.minute = message.minute;
        if (message.second != null && message.hasOwnProperty("second"))
            object.second = message.second;
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            object.timezone = message.timezone;
        return object;
    };
    ServerTime.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ServerTime;
})();
$root.GameItem = (function() {
    function GameItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GameItem.prototype.id = 0;
    GameItem.prototype.type = 0;
    GameItem.prototype.count = 0;
    GameItem.prototype.obtainTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GameItem.prototype.name = "";
    GameItem.create = function create(properties) {
        return new GameItem(properties);
    };
    GameItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.count != null && message.hasOwnProperty("count"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.obtainTime);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
        return writer;
    };
    GameItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GameItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GameItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.count = reader.int32();
                break;
            case 4:
                message.obtainTime = reader.int64();
                break;
            case 5:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GameItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GameItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.count != null && message.hasOwnProperty("count"))
            if (!$util.isInteger(message.count))
                return "count: integer expected";
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            if (!$util.isInteger(message.obtainTime) && !(message.obtainTime && $util.isInteger(message.obtainTime.low) && $util.isInteger(message.obtainTime.high)))
                return "obtainTime: integer|Long expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };
    GameItem.fromObject = function fromObject(object) {
        if (object instanceof $root.GameItem)
            return object;
        var message = new $root.GameItem();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.count != null)
            message.count = object.count | 0;
        if (object.obtainTime != null)
            if ($util.Long)
                (message.obtainTime = $util.Long.fromValue(object.obtainTime)).unsigned = false;
            else if (typeof object.obtainTime === "string")
                message.obtainTime = parseInt(object.obtainTime, 10);
            else if (typeof object.obtainTime === "number")
                message.obtainTime = object.obtainTime;
            else if (typeof object.obtainTime === "object")
                message.obtainTime = new $util.LongBits(object.obtainTime.low >>> 0, object.obtainTime.high >>> 0).toNumber();
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };
    GameItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
            object.count = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.obtainTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.obtainTime = options.longs === String ? "0" : 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.count != null && message.hasOwnProperty("count"))
            object.count = message.count;
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            if (typeof message.obtainTime === "number")
                object.obtainTime = options.longs === String ? String(message.obtainTime) : message.obtainTime;
            else
                object.obtainTime = options.longs === String ? $util.Long.prototype.toString.call(message.obtainTime) : options.longs === Number ? new $util.LongBits(message.obtainTime.low >>> 0, message.obtainTime.high >>> 0).toNumber() : message.obtainTime;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };
    GameItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GameItem;
})();
$root.Intelligence = (function() {
    function Intelligence(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Intelligence.prototype.id = 0;
    Intelligence.prototype.type = 0;
    Intelligence.prototype.count = 0;
    Intelligence.prototype.obtainTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Intelligence.prototype.name = "";
    Intelligence.prototype.state = 0;
    Intelligence.create = function create(properties) {
        return new Intelligence(properties);
    };
    Intelligence.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.count != null && message.hasOwnProperty("count"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.obtainTime);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
        return writer;
    };
    Intelligence.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Intelligence.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Intelligence();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.type = reader.int32();
                break;
            case 3:
                message.count = reader.int32();
                break;
            case 4:
                message.obtainTime = reader.int64();
                break;
            case 5:
                message.name = reader.string();
                break;
            case 6:
                message.state = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Intelligence.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Intelligence.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.count != null && message.hasOwnProperty("count"))
            if (!$util.isInteger(message.count))
                return "count: integer expected";
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            if (!$util.isInteger(message.obtainTime) && !(message.obtainTime && $util.isInteger(message.obtainTime.low) && $util.isInteger(message.obtainTime.high)))
                return "obtainTime: integer|Long expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
                break;
            }
        return null;
    };
    Intelligence.fromObject = function fromObject(object) {
        if (object instanceof $root.Intelligence)
            return object;
        var message = new $root.Intelligence();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.type != null)
            message.type = object.type | 0;
        if (object.count != null)
            message.count = object.count | 0;
        if (object.obtainTime != null)
            if ($util.Long)
                (message.obtainTime = $util.Long.fromValue(object.obtainTime)).unsigned = false;
            else if (typeof object.obtainTime === "string")
                message.obtainTime = parseInt(object.obtainTime, 10);
            else if (typeof object.obtainTime === "number")
                message.obtainTime = object.obtainTime;
            else if (typeof object.obtainTime === "object")
                message.obtainTime = new $util.LongBits(object.obtainTime.low >>> 0, object.obtainTime.high >>> 0).toNumber();
        if (object.name != null)
            message.name = String(object.name);
        switch (object.state) {
        case "Unread":
        case 0:
            message.state = 0;
            break;
        case "Read":
        case 1:
            message.state = 1;
            break;
        }
        return message;
    };
    Intelligence.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.type = 0;
            object.count = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.obtainTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.obtainTime = options.longs === String ? "0" : 0;
            object.name = "";
            object.state = options.enums === String ? "Unread" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.count != null && message.hasOwnProperty("count"))
            object.count = message.count;
        if (message.obtainTime != null && message.hasOwnProperty("obtainTime"))
            if (typeof message.obtainTime === "number")
                object.obtainTime = options.longs === String ? String(message.obtainTime) : message.obtainTime;
            else
                object.obtainTime = options.longs === String ? $util.Long.prototype.toString.call(message.obtainTime) : options.longs === Number ? new $util.LongBits(message.obtainTime.low >>> 0, message.obtainTime.high >>> 0).toNumber() : message.obtainTime;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.IntelligenceState[message.state] : message.state;
        return object;
    };
    Intelligence.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Intelligence;
})();
$root.TimeRecord = (function() {
    function TimeRecord(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    TimeRecord.prototype.lastSign = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    TimeRecord.prototype.lastGetPVPResult = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    TimeRecord.prototype.lastWeekRec = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    TimeRecord.prototype.totalTime = 0;
    TimeRecord.create = function create(properties) {
        return new TimeRecord(properties);
    };
    TimeRecord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.lastSign != null && message.hasOwnProperty("lastSign"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.lastSign);
        if (message.lastGetPVPResult != null && message.hasOwnProperty("lastGetPVPResult"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.lastGetPVPResult);
        if (message.lastWeekRec != null && message.hasOwnProperty("lastWeekRec"))
            writer.uint32(/* id 7, wireType 0 =*/56).int64(message.lastWeekRec);
        if (message.totalTime != null && message.hasOwnProperty("totalTime"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.totalTime);
        return writer;
    };
    TimeRecord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    TimeRecord.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TimeRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 3:
                message.lastSign = reader.int64();
                break;
            case 6:
                message.lastGetPVPResult = reader.int64();
                break;
            case 7:
                message.lastWeekRec = reader.int64();
                break;
            case 8:
                message.totalTime = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    TimeRecord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    TimeRecord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.lastSign != null && message.hasOwnProperty("lastSign"))
            if (!$util.isInteger(message.lastSign) && !(message.lastSign && $util.isInteger(message.lastSign.low) && $util.isInteger(message.lastSign.high)))
                return "lastSign: integer|Long expected";
        if (message.lastGetPVPResult != null && message.hasOwnProperty("lastGetPVPResult"))
            if (!$util.isInteger(message.lastGetPVPResult) && !(message.lastGetPVPResult && $util.isInteger(message.lastGetPVPResult.low) && $util.isInteger(message.lastGetPVPResult.high)))
                return "lastGetPVPResult: integer|Long expected";
        if (message.lastWeekRec != null && message.hasOwnProperty("lastWeekRec"))
            if (!$util.isInteger(message.lastWeekRec) && !(message.lastWeekRec && $util.isInteger(message.lastWeekRec.low) && $util.isInteger(message.lastWeekRec.high)))
                return "lastWeekRec: integer|Long expected";
        if (message.totalTime != null && message.hasOwnProperty("totalTime"))
            if (!$util.isInteger(message.totalTime))
                return "totalTime: integer expected";
        return null;
    };
    TimeRecord.fromObject = function fromObject(object) {
        if (object instanceof $root.TimeRecord)
            return object;
        var message = new $root.TimeRecord();
        if (object.lastSign != null)
            if ($util.Long)
                (message.lastSign = $util.Long.fromValue(object.lastSign)).unsigned = false;
            else if (typeof object.lastSign === "string")
                message.lastSign = parseInt(object.lastSign, 10);
            else if (typeof object.lastSign === "number")
                message.lastSign = object.lastSign;
            else if (typeof object.lastSign === "object")
                message.lastSign = new $util.LongBits(object.lastSign.low >>> 0, object.lastSign.high >>> 0).toNumber();
        if (object.lastGetPVPResult != null)
            if ($util.Long)
                (message.lastGetPVPResult = $util.Long.fromValue(object.lastGetPVPResult)).unsigned = false;
            else if (typeof object.lastGetPVPResult === "string")
                message.lastGetPVPResult = parseInt(object.lastGetPVPResult, 10);
            else if (typeof object.lastGetPVPResult === "number")
                message.lastGetPVPResult = object.lastGetPVPResult;
            else if (typeof object.lastGetPVPResult === "object")
                message.lastGetPVPResult = new $util.LongBits(object.lastGetPVPResult.low >>> 0, object.lastGetPVPResult.high >>> 0).toNumber();
        if (object.lastWeekRec != null)
            if ($util.Long)
                (message.lastWeekRec = $util.Long.fromValue(object.lastWeekRec)).unsigned = false;
            else if (typeof object.lastWeekRec === "string")
                message.lastWeekRec = parseInt(object.lastWeekRec, 10);
            else if (typeof object.lastWeekRec === "number")
                message.lastWeekRec = object.lastWeekRec;
            else if (typeof object.lastWeekRec === "object")
                message.lastWeekRec = new $util.LongBits(object.lastWeekRec.low >>> 0, object.lastWeekRec.high >>> 0).toNumber();
        if (object.totalTime != null)
            message.totalTime = object.totalTime | 0;
        return message;
    };
    TimeRecord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastSign = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastSign = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastGetPVPResult = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastGetPVPResult = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastWeekRec = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastWeekRec = options.longs === String ? "0" : 0;
            object.totalTime = 0;
        }
        if (message.lastSign != null && message.hasOwnProperty("lastSign"))
            if (typeof message.lastSign === "number")
                object.lastSign = options.longs === String ? String(message.lastSign) : message.lastSign;
            else
                object.lastSign = options.longs === String ? $util.Long.prototype.toString.call(message.lastSign) : options.longs === Number ? new $util.LongBits(message.lastSign.low >>> 0, message.lastSign.high >>> 0).toNumber() : message.lastSign;
        if (message.lastGetPVPResult != null && message.hasOwnProperty("lastGetPVPResult"))
            if (typeof message.lastGetPVPResult === "number")
                object.lastGetPVPResult = options.longs === String ? String(message.lastGetPVPResult) : message.lastGetPVPResult;
            else
                object.lastGetPVPResult = options.longs === String ? $util.Long.prototype.toString.call(message.lastGetPVPResult) : options.longs === Number ? new $util.LongBits(message.lastGetPVPResult.low >>> 0, message.lastGetPVPResult.high >>> 0).toNumber() : message.lastGetPVPResult;
        if (message.lastWeekRec != null && message.hasOwnProperty("lastWeekRec"))
            if (typeof message.lastWeekRec === "number")
                object.lastWeekRec = options.longs === String ? String(message.lastWeekRec) : message.lastWeekRec;
            else
                object.lastWeekRec = options.longs === String ? $util.Long.prototype.toString.call(message.lastWeekRec) : options.longs === Number ? new $util.LongBits(message.lastWeekRec.low >>> 0, message.lastWeekRec.high >>> 0).toNumber() : message.lastWeekRec;
        if (message.totalTime != null && message.hasOwnProperty("totalTime"))
            object.totalTime = message.totalTime;
        return object;
    };
    TimeRecord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return TimeRecord;
})();
$root.NumberRecord = (function() {
    function NumberRecord(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    NumberRecord.prototype.elo = 0;
    NumberRecord.prototype.normWin = 0;
    NumberRecord.prototype.totalSignIn = 0;
    NumberRecord.prototype.weekTotalSign = 0;
    NumberRecord.prototype.weekGoldGet = 0;
    NumberRecord.prototype.weekExpGet = 0;
    NumberRecord.create = function create(properties) {
        return new NumberRecord(properties);
    };
    NumberRecord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.elo != null && message.hasOwnProperty("elo"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elo);
        if (message.normWin != null && message.hasOwnProperty("normWin"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.normWin);
        if (message.totalSignIn != null && message.hasOwnProperty("totalSignIn"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalSignIn);
        if (message.weekTotalSign != null && message.hasOwnProperty("weekTotalSign"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.weekTotalSign);
        if (message.weekGoldGet != null && message.hasOwnProperty("weekGoldGet"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.weekGoldGet);
        if (message.weekExpGet != null && message.hasOwnProperty("weekExpGet"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.weekExpGet);
        return writer;
    };
    NumberRecord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    NumberRecord.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NumberRecord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.elo = reader.int32();
                break;
            case 2:
                message.normWin = reader.int32();
                break;
            case 3:
                message.totalSignIn = reader.int32();
                break;
            case 4:
                message.weekTotalSign = reader.int32();
                break;
            case 5:
                message.weekGoldGet = reader.int32();
                break;
            case 6:
                message.weekExpGet = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    NumberRecord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    NumberRecord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.elo != null && message.hasOwnProperty("elo"))
            if (!$util.isInteger(message.elo))
                return "elo: integer expected";
        if (message.normWin != null && message.hasOwnProperty("normWin"))
            if (!$util.isInteger(message.normWin))
                return "normWin: integer expected";
        if (message.totalSignIn != null && message.hasOwnProperty("totalSignIn"))
            if (!$util.isInteger(message.totalSignIn))
                return "totalSignIn: integer expected";
        if (message.weekTotalSign != null && message.hasOwnProperty("weekTotalSign"))
            if (!$util.isInteger(message.weekTotalSign))
                return "weekTotalSign: integer expected";
        if (message.weekGoldGet != null && message.hasOwnProperty("weekGoldGet"))
            if (!$util.isInteger(message.weekGoldGet))
                return "weekGoldGet: integer expected";
        if (message.weekExpGet != null && message.hasOwnProperty("weekExpGet"))
            if (!$util.isInteger(message.weekExpGet))
                return "weekExpGet: integer expected";
        return null;
    };
    NumberRecord.fromObject = function fromObject(object) {
        if (object instanceof $root.NumberRecord)
            return object;
        var message = new $root.NumberRecord();
        if (object.elo != null)
            message.elo = object.elo | 0;
        if (object.normWin != null)
            message.normWin = object.normWin | 0;
        if (object.totalSignIn != null)
            message.totalSignIn = object.totalSignIn | 0;
        if (object.weekTotalSign != null)
            message.weekTotalSign = object.weekTotalSign | 0;
        if (object.weekGoldGet != null)
            message.weekGoldGet = object.weekGoldGet | 0;
        if (object.weekExpGet != null)
            message.weekExpGet = object.weekExpGet | 0;
        return message;
    };
    NumberRecord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.elo = 0;
            object.normWin = 0;
            object.totalSignIn = 0;
            object.weekTotalSign = 0;
            object.weekGoldGet = 0;
            object.weekExpGet = 0;
        }
        if (message.elo != null && message.hasOwnProperty("elo"))
            object.elo = message.elo;
        if (message.normWin != null && message.hasOwnProperty("normWin"))
            object.normWin = message.normWin;
        if (message.totalSignIn != null && message.hasOwnProperty("totalSignIn"))
            object.totalSignIn = message.totalSignIn;
        if (message.weekTotalSign != null && message.hasOwnProperty("weekTotalSign"))
            object.weekTotalSign = message.weekTotalSign;
        if (message.weekGoldGet != null && message.hasOwnProperty("weekGoldGet"))
            object.weekGoldGet = message.weekGoldGet;
        if (message.weekExpGet != null && message.hasOwnProperty("weekExpGet"))
            object.weekExpGet = message.weekExpGet;
        return object;
    };
    NumberRecord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return NumberRecord;
})();
$root.WXInfo = (function() {
    function WXInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    WXInfo.prototype.avatarUrl = "";
    WXInfo.prototype.city = "";
    WXInfo.prototype.gender = 0;
    WXInfo.prototype.openId = "";
    WXInfo.prototype.language = "";
    WXInfo.prototype.nickName = "";
    WXInfo.prototype.province = "";
    WXInfo.prototype.unionId = "";
    WXInfo.prototype.country = "";
    WXInfo.prototype.sessionId = "";
    WXInfo.prototype.sign = "";
    WXInfo.create = function create(properties) {
        return new WXInfo(properties);
    };
    WXInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.avatarUrl);
        if (message.city != null && message.hasOwnProperty("city"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.city);
        if (message.gender != null && message.hasOwnProperty("gender"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gender);
        if (message.openId != null && message.hasOwnProperty("openId"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.openId);
        if (message.language != null && message.hasOwnProperty("language"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.language);
        if (message.nickName != null && message.hasOwnProperty("nickName"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.nickName);
        if (message.province != null && message.hasOwnProperty("province"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.province);
        if (message.unionId != null && message.hasOwnProperty("unionId"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.unionId);
        if (message.country != null && message.hasOwnProperty("country"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.country);
        if (message.sessionId != null && message.hasOwnProperty("sessionId"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.sessionId);
        if (message.sign != null && message.hasOwnProperty("sign"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.sign);
        return writer;
    };
    WXInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    WXInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WXInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.avatarUrl = reader.string();
                break;
            case 2:
                message.city = reader.string();
                break;
            case 3:
                message.gender = reader.int32();
                break;
            case 4:
                message.openId = reader.string();
                break;
            case 5:
                message.language = reader.string();
                break;
            case 6:
                message.nickName = reader.string();
                break;
            case 7:
                message.province = reader.string();
                break;
            case 8:
                message.unionId = reader.string();
                break;
            case 9:
                message.country = reader.string();
                break;
            case 10:
                message.sessionId = reader.string();
                break;
            case 11:
                message.sign = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    WXInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    WXInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
            if (!$util.isString(message.avatarUrl))
                return "avatarUrl: string expected";
        if (message.city != null && message.hasOwnProperty("city"))
            if (!$util.isString(message.city))
                return "city: string expected";
        if (message.gender != null && message.hasOwnProperty("gender"))
            if (!$util.isInteger(message.gender))
                return "gender: integer expected";
        if (message.openId != null && message.hasOwnProperty("openId"))
            if (!$util.isString(message.openId))
                return "openId: string expected";
        if (message.language != null && message.hasOwnProperty("language"))
            if (!$util.isString(message.language))
                return "language: string expected";
        if (message.nickName != null && message.hasOwnProperty("nickName"))
            if (!$util.isString(message.nickName))
                return "nickName: string expected";
        if (message.province != null && message.hasOwnProperty("province"))
            if (!$util.isString(message.province))
                return "province: string expected";
        if (message.unionId != null && message.hasOwnProperty("unionId"))
            if (!$util.isString(message.unionId))
                return "unionId: string expected";
        if (message.country != null && message.hasOwnProperty("country"))
            if (!$util.isString(message.country))
                return "country: string expected";
        if (message.sessionId != null && message.hasOwnProperty("sessionId"))
            if (!$util.isString(message.sessionId))
                return "sessionId: string expected";
        if (message.sign != null && message.hasOwnProperty("sign"))
            if (!$util.isString(message.sign))
                return "sign: string expected";
        return null;
    };
    WXInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.WXInfo)
            return object;
        var message = new $root.WXInfo();
        if (object.avatarUrl != null)
            message.avatarUrl = String(object.avatarUrl);
        if (object.city != null)
            message.city = String(object.city);
        if (object.gender != null)
            message.gender = object.gender | 0;
        if (object.openId != null)
            message.openId = String(object.openId);
        if (object.language != null)
            message.language = String(object.language);
        if (object.nickName != null)
            message.nickName = String(object.nickName);
        if (object.province != null)
            message.province = String(object.province);
        if (object.unionId != null)
            message.unionId = String(object.unionId);
        if (object.country != null)
            message.country = String(object.country);
        if (object.sessionId != null)
            message.sessionId = String(object.sessionId);
        if (object.sign != null)
            message.sign = String(object.sign);
        return message;
    };
    WXInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.avatarUrl = "";
            object.city = "";
            object.gender = 0;
            object.openId = "";
            object.language = "";
            object.nickName = "";
            object.province = "";
            object.unionId = "";
            object.country = "";
            object.sessionId = "";
            object.sign = "";
        }
        if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
            object.avatarUrl = message.avatarUrl;
        if (message.city != null && message.hasOwnProperty("city"))
            object.city = message.city;
        if (message.gender != null && message.hasOwnProperty("gender"))
            object.gender = message.gender;
        if (message.openId != null && message.hasOwnProperty("openId"))
            object.openId = message.openId;
        if (message.language != null && message.hasOwnProperty("language"))
            object.language = message.language;
        if (message.nickName != null && message.hasOwnProperty("nickName"))
            object.nickName = message.nickName;
        if (message.province != null && message.hasOwnProperty("province"))
            object.province = message.province;
        if (message.unionId != null && message.hasOwnProperty("unionId"))
            object.unionId = message.unionId;
        if (message.country != null && message.hasOwnProperty("country"))
            object.country = message.country;
        if (message.sessionId != null && message.hasOwnProperty("sessionId"))
            object.sessionId = message.sessionId;
        if (message.sign != null && message.hasOwnProperty("sign"))
            object.sign = message.sign;
        return object;
    };
    WXInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return WXInfo;
})();
$root.GamerMain = (function() {
    function GamerMain(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMain.prototype.id = 0;
    GamerMain.prototype.uid = "";
    GamerMain.prototype.lsid = 0;
    GamerMain.prototype.psid = 0;
    GamerMain.prototype.state = 0;
    GamerMain.prototype.name = "";
    GamerMain.prototype.level = 0;
    GamerMain.prototype.session = "";
    GamerMain.prototype.create = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerMain.prototype.lastLogin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerMain.prototype.lastLogout = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerMain.prototype.typeId = 0;
    GamerMain.prototype.icon = 0;
    GamerMain.prototype.exp = 0;
    GamerMain.prototype.pvpSession = "";
    GamerMain.prototype.avatar = "";
    GamerMain.prototype.leagueId = 0;
    GamerMain.prototype.isNewbie = false;
    GamerMain.create = function create(properties) {
        return new GamerMain(properties);
    };
    GamerMain.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lsid);
        if (message.psid != null && message.hasOwnProperty("psid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.psid);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.level);
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.session);
        if (message.create != null && message.hasOwnProperty("create"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.create);
        if (message.lastLogin != null && message.hasOwnProperty("lastLogin"))
            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.lastLogin);
        if (message.lastLogout != null && message.hasOwnProperty("lastLogout"))
            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.lastLogout);
        if (message.typeId != null && message.hasOwnProperty("typeId"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.typeId);
        if (message.icon != null && message.hasOwnProperty("icon"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.icon);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.exp);
        if (message.pvpSession != null && message.hasOwnProperty("pvpSession"))
            writer.uint32(/* id 15, wireType 2 =*/122).string(message.pvpSession);
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            writer.uint32(/* id 16, wireType 2 =*/130).string(message.avatar);
        if (message.leagueId != null && message.hasOwnProperty("leagueId"))
            writer.uint32(/* id 17, wireType 0 =*/136).int32(message.leagueId);
        if (message.isNewbie != null && message.hasOwnProperty("isNewbie"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.isNewbie);
        return writer;
    };
    GamerMain.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMain.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMain();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.uid = reader.string();
                break;
            case 3:
                message.lsid = reader.int32();
                break;
            case 4:
                message.psid = reader.int32();
                break;
            case 5:
                message.state = reader.int32();
                break;
            case 6:
                message.name = reader.string();
                break;
            case 7:
                message.level = reader.int32();
                break;
            case 8:
                message.session = reader.string();
                break;
            case 9:
                message.create = reader.int64();
                break;
            case 10:
                message.lastLogin = reader.int64();
                break;
            case 11:
                message.lastLogout = reader.int64();
                break;
            case 12:
                message.typeId = reader.int32();
                break;
            case 13:
                message.icon = reader.int32();
                break;
            case 14:
                message.exp = reader.int32();
                break;
            case 15:
                message.pvpSession = reader.string();
                break;
            case 16:
                message.avatar = reader.string();
                break;
            case 17:
                message.leagueId = reader.int32();
                break;
            case 18:
                message.isNewbie = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMain.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMain.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isString(message.uid))
                return "uid: string expected";
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            if (!$util.isInteger(message.lsid))
                return "lsid: integer expected";
        if (message.psid != null && message.hasOwnProperty("psid"))
            if (!$util.isInteger(message.psid))
                return "psid: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.create != null && message.hasOwnProperty("create"))
            if (!$util.isInteger(message.create) && !(message.create && $util.isInteger(message.create.low) && $util.isInteger(message.create.high)))
                return "create: integer|Long expected";
        if (message.lastLogin != null && message.hasOwnProperty("lastLogin"))
            if (!$util.isInteger(message.lastLogin) && !(message.lastLogin && $util.isInteger(message.lastLogin.low) && $util.isInteger(message.lastLogin.high)))
                return "lastLogin: integer|Long expected";
        if (message.lastLogout != null && message.hasOwnProperty("lastLogout"))
            if (!$util.isInteger(message.lastLogout) && !(message.lastLogout && $util.isInteger(message.lastLogout.low) && $util.isInteger(message.lastLogout.high)))
                return "lastLogout: integer|Long expected";
        if (message.typeId != null && message.hasOwnProperty("typeId"))
            if (!$util.isInteger(message.typeId))
                return "typeId: integer expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isInteger(message.icon))
                return "icon: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.pvpSession != null && message.hasOwnProperty("pvpSession"))
            if (!$util.isString(message.pvpSession))
                return "pvpSession: string expected";
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            if (!$util.isString(message.avatar))
                return "avatar: string expected";
        if (message.leagueId != null && message.hasOwnProperty("leagueId"))
            if (!$util.isInteger(message.leagueId))
                return "leagueId: integer expected";
        if (message.isNewbie != null && message.hasOwnProperty("isNewbie"))
            if (typeof message.isNewbie !== "boolean")
                return "isNewbie: boolean expected";
        return null;
    };
    GamerMain.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMain)
            return object;
        var message = new $root.GamerMain();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.uid != null)
            message.uid = String(object.uid);
        if (object.lsid != null)
            message.lsid = object.lsid | 0;
        if (object.psid != null)
            message.psid = object.psid | 0;
        switch (object.state) {
        case "Offline":
        case 0:
            message.state = 0;
            break;
        case "Online":
        case 1:
            message.state = 1;
            break;
        case "Teaming":
        case 2:
            message.state = 2;
            break;
        case "Matching":
        case 3:
            message.state = 3;
            break;
        case "Fighting":
        case 4:
            message.state = 4;
            break;
        }
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.session != null)
            message.session = String(object.session);
        if (object.create != null)
            if ($util.Long)
                (message.create = $util.Long.fromValue(object.create)).unsigned = false;
            else if (typeof object.create === "string")
                message.create = parseInt(object.create, 10);
            else if (typeof object.create === "number")
                message.create = object.create;
            else if (typeof object.create === "object")
                message.create = new $util.LongBits(object.create.low >>> 0, object.create.high >>> 0).toNumber();
        if (object.lastLogin != null)
            if ($util.Long)
                (message.lastLogin = $util.Long.fromValue(object.lastLogin)).unsigned = false;
            else if (typeof object.lastLogin === "string")
                message.lastLogin = parseInt(object.lastLogin, 10);
            else if (typeof object.lastLogin === "number")
                message.lastLogin = object.lastLogin;
            else if (typeof object.lastLogin === "object")
                message.lastLogin = new $util.LongBits(object.lastLogin.low >>> 0, object.lastLogin.high >>> 0).toNumber();
        if (object.lastLogout != null)
            if ($util.Long)
                (message.lastLogout = $util.Long.fromValue(object.lastLogout)).unsigned = false;
            else if (typeof object.lastLogout === "string")
                message.lastLogout = parseInt(object.lastLogout, 10);
            else if (typeof object.lastLogout === "number")
                message.lastLogout = object.lastLogout;
            else if (typeof object.lastLogout === "object")
                message.lastLogout = new $util.LongBits(object.lastLogout.low >>> 0, object.lastLogout.high >>> 0).toNumber();
        if (object.typeId != null)
            message.typeId = object.typeId | 0;
        if (object.icon != null)
            message.icon = object.icon | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.pvpSession != null)
            message.pvpSession = String(object.pvpSession);
        if (object.avatar != null)
            message.avatar = String(object.avatar);
        if (object.leagueId != null)
            message.leagueId = object.leagueId | 0;
        if (object.isNewbie != null)
            message.isNewbie = Boolean(object.isNewbie);
        return message;
    };
    GamerMain.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.uid = "";
            object.lsid = 0;
            object.psid = 0;
            object.state = options.enums === String ? "Offline" : 0;
            object.name = "";
            object.level = 0;
            object.session = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.create = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.create = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastLogin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastLogin = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastLogout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastLogout = options.longs === String ? "0" : 0;
            object.typeId = 0;
            object.icon = 0;
            object.exp = 0;
            object.pvpSession = "";
            object.avatar = "";
            object.leagueId = 0;
            object.isNewbie = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            object.lsid = message.lsid;
        if (message.psid != null && message.hasOwnProperty("psid"))
            object.psid = message.psid;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.GamerStatus[message.state] : message.state;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.create != null && message.hasOwnProperty("create"))
            if (typeof message.create === "number")
                object.create = options.longs === String ? String(message.create) : message.create;
            else
                object.create = options.longs === String ? $util.Long.prototype.toString.call(message.create) : options.longs === Number ? new $util.LongBits(message.create.low >>> 0, message.create.high >>> 0).toNumber() : message.create;
        if (message.lastLogin != null && message.hasOwnProperty("lastLogin"))
            if (typeof message.lastLogin === "number")
                object.lastLogin = options.longs === String ? String(message.lastLogin) : message.lastLogin;
            else
                object.lastLogin = options.longs === String ? $util.Long.prototype.toString.call(message.lastLogin) : options.longs === Number ? new $util.LongBits(message.lastLogin.low >>> 0, message.lastLogin.high >>> 0).toNumber() : message.lastLogin;
        if (message.lastLogout != null && message.hasOwnProperty("lastLogout"))
            if (typeof message.lastLogout === "number")
                object.lastLogout = options.longs === String ? String(message.lastLogout) : message.lastLogout;
            else
                object.lastLogout = options.longs === String ? $util.Long.prototype.toString.call(message.lastLogout) : options.longs === Number ? new $util.LongBits(message.lastLogout.low >>> 0, message.lastLogout.high >>> 0).toNumber() : message.lastLogout;
        if (message.typeId != null && message.hasOwnProperty("typeId"))
            object.typeId = message.typeId;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.pvpSession != null && message.hasOwnProperty("pvpSession"))
            object.pvpSession = message.pvpSession;
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            object.avatar = message.avatar;
        if (message.leagueId != null && message.hasOwnProperty("leagueId"))
            object.leagueId = message.leagueId;
        if (message.isNewbie != null && message.hasOwnProperty("isNewbie"))
            object.isNewbie = message.isNewbie;
        return object;
    };
    GamerMain.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMain;
})();
$root.GamerMini = (function() {
    function GamerMini(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMini.prototype.id = 0;
    GamerMini.prototype.name = "";
    GamerMini.prototype.level = 0;
    GamerMini.prototype.lsid = 0;
    GamerMini.prototype.avatar = "";
    GamerMini.create = function create(properties) {
        return new GamerMini(properties);
    };
    GamerMini.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.lsid);
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            writer.uint32(/* id 16, wireType 2 =*/130).string(message.avatar);
        return writer;
    };
    GamerMini.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMini.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMini();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.lsid = reader.int32();
                break;
            case 16:
                message.avatar = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMini.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMini.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            if (!$util.isInteger(message.lsid))
                return "lsid: integer expected";
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            if (!$util.isString(message.avatar))
                return "avatar: string expected";
        return null;
    };
    GamerMini.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMini)
            return object;
        var message = new $root.GamerMini();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.lsid != null)
            message.lsid = object.lsid | 0;
        if (object.avatar != null)
            message.avatar = String(object.avatar);
        return message;
    };
    GamerMini.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.level = 0;
            object.lsid = 0;
            object.avatar = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.lsid != null && message.hasOwnProperty("lsid"))
            object.lsid = message.lsid;
        if (message.avatar != null && message.hasOwnProperty("avatar"))
            object.avatar = message.avatar;
        return object;
    };
    GamerMini.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMini;
})();
$root.GamerFriendRequest = (function() {
    function GamerFriendRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriendRequest.prototype.id = 0;
    GamerFriendRequest.prototype.msg = "";
    GamerFriendRequest.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerFriendRequest.prototype.gamerInfo = null;
    GamerFriendRequest.create = function create(properties) {
        return new GamerFriendRequest(properties);
    };
    GamerFriendRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GamerFriendRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriendRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriendRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.msg = reader.string();
                break;
            case 3:
                message.time = reader.int64();
                break;
            case 5:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriendRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriendRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    GamerFriendRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriendRequest)
            return object;
        var message = new $root.GamerFriendRequest();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.msg != null)
            message.msg = String(object.msg);
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".GamerFriendRequest.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    GamerFriendRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.msg = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.gamerInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    GamerFriendRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriendRequest;
})();
$root.GamerBlack = (function() {
    function GamerBlack(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerBlack.prototype.id = 0;
    GamerBlack.create = function create(properties) {
        return new GamerBlack(properties);
    };
    GamerBlack.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        return writer;
    };
    GamerBlack.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerBlack.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerBlack();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerBlack.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerBlack.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    GamerBlack.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerBlack)
            return object;
        var message = new $root.GamerBlack();
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    GamerBlack.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.id = 0;
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    GamerBlack.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerBlack;
})();
$root.GamerFriend = (function() {
    function GamerFriend(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerFriend.prototype.id = 0;
    GamerFriend.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    GamerFriend.prototype.gamerInfo = null;
    GamerFriend.create = function create(properties) {
        return new GamerFriend(properties);
    };
    GamerFriend.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    GamerFriend.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerFriend.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerFriend();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 5:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerFriend.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerFriend.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    GamerFriend.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerFriend)
            return object;
        var message = new $root.GamerFriend();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".GamerFriend.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    GamerFriend.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.gamerInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    GamerFriend.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerFriend;
})();
$root.ChatData = (function() {
    function ChatData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ChatData.prototype.from = 0;
    ChatData.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    ChatData.prototype.msg = "";
    ChatData.prototype.channel = 0;
    ChatData.prototype.gamerInfo = null;
    ChatData.create = function create(properties) {
        return new ChatData(properties);
    };
    ChatData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.from != null && message.hasOwnProperty("from"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.from);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
        if (message.channel != null && message.hasOwnProperty("channel"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.channel);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };
    ChatData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ChatData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChatData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.from = reader.int32();
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 3:
                message.msg = reader.string();
                break;
            case 4:
                message.channel = reader.int32();
                break;
            case 5:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ChatData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ChatData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.from != null && message.hasOwnProperty("from"))
            if (!$util.isInteger(message.from))
                return "from: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.channel != null && message.hasOwnProperty("channel"))
            if (!$util.isInteger(message.channel))
                return "channel: integer expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    ChatData.fromObject = function fromObject(object) {
        if (object instanceof $root.ChatData)
            return object;
        var message = new $root.ChatData();
        if (object.from != null)
            message.from = object.from | 0;
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.msg != null)
            message.msg = String(object.msg);
        if (object.channel != null)
            message.channel = object.channel | 0;
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".ChatData.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    ChatData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.from = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.msg = "";
            object.channel = 0;
            object.gamerInfo = null;
        }
        if (message.from != null && message.hasOwnProperty("from"))
            object.from = message.from;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.channel != null && message.hasOwnProperty("channel"))
            object.channel = message.channel;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    ChatData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ChatData;
})();
$root.Mail = (function() {
    function Mail(properties) {
        this.attachments = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Mail.prototype.id = "";
    Mail.prototype.mailType = 0;
    Mail.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Mail.prototype.theme = "";
    Mail.prototype.msg = "";
    Mail.prototype.attachments = $util.emptyArray;
    Mail.prototype.state = 0;
    Mail.prototype.serverId = 0;
    Mail.prototype.senderId = 0;
    Mail.prototype.level = 0;
    Mail.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Mail.prototype.isDel = 0;
    Mail.prototype.cfgId = 0;
    Mail.prototype.save = false;
    Mail.prototype.gamerInfo = null;
    Mail.create = function create(properties) {
        return new Mail(properties);
    };
    Mail.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
        if (message.mailType != null && message.hasOwnProperty("mailType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mailType);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time);
        if (message.theme != null && message.hasOwnProperty("theme"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.theme);
        if (message.msg != null && message.hasOwnProperty("msg"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.msg);
        if (message.attachments != null && message.attachments.length)
            for (var i = 0; i < message.attachments.length; ++i)
                $root.GameItem.encode(message.attachments[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.state);
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.serverId);
        if (message.senderId != null && message.hasOwnProperty("senderId"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.senderId);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.level);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            writer.uint32(/* id 12, wireType 0 =*/96).int64(message.endTime);
        if (message.isDel != null && message.hasOwnProperty("isDel"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.isDel);
        if (message.cfgId != null && message.hasOwnProperty("cfgId"))
            writer.uint32(/* id 14, wireType 0 =*/112).int32(message.cfgId);
        if (message.save != null && message.hasOwnProperty("save"))
            writer.uint32(/* id 15, wireType 0 =*/120).bool(message.save);
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            $root.GamerMini.encode(message.gamerInfo, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        return writer;
    };
    Mail.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Mail.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Mail();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.string();
                break;
            case 2:
                message.mailType = reader.int32();
                break;
            case 3:
                message.time = reader.int64();
                break;
            case 4:
                message.theme = reader.string();
                break;
            case 5:
                message.msg = reader.string();
                break;
            case 6:
                if (!(message.attachments && message.attachments.length))
                    message.attachments = [];
                message.attachments.push($root.GameItem.decode(reader, reader.uint32()));
                break;
            case 7:
                message.state = reader.int32();
                break;
            case 9:
                message.serverId = reader.int32();
                break;
            case 10:
                message.senderId = reader.int32();
                break;
            case 11:
                message.level = reader.int32();
                break;
            case 12:
                message.endTime = reader.int64();
                break;
            case 13:
                message.isDel = reader.int32();
                break;
            case 14:
                message.cfgId = reader.int32();
                break;
            case 15:
                message.save = reader.bool();
                break;
            case 16:
                message.gamerInfo = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Mail.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Mail.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isString(message.id))
                return "id: string expected";
        if (message.mailType != null && message.hasOwnProperty("mailType"))
            switch (message.mailType) {
            default:
                return "mailType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.theme != null && message.hasOwnProperty("theme"))
            if (!$util.isString(message.theme))
                return "theme: string expected";
        if (message.msg != null && message.hasOwnProperty("msg"))
            if (!$util.isString(message.msg))
                return "msg: string expected";
        if (message.attachments != null && message.hasOwnProperty("attachments")) {
            if (!Array.isArray(message.attachments))
                return "attachments: array expected";
            for (var i = 0; i < message.attachments.length; ++i) {
                var error = $root.GameItem.verify(message.attachments[i]);
                if (error)
                    return "attachments." + error;
            }
        }
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            if (!$util.isInteger(message.serverId))
                return "serverId: integer expected";
        if (message.senderId != null && message.hasOwnProperty("senderId"))
            if (!$util.isInteger(message.senderId))
                return "senderId: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                return "endTime: integer|Long expected";
        if (message.isDel != null && message.hasOwnProperty("isDel"))
            if (!$util.isInteger(message.isDel))
                return "isDel: integer expected";
        if (message.cfgId != null && message.hasOwnProperty("cfgId"))
            if (!$util.isInteger(message.cfgId))
                return "cfgId: integer expected";
        if (message.save != null && message.hasOwnProperty("save"))
            if (typeof message.save !== "boolean")
                return "save: boolean expected";
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo")) {
            var error = $root.GamerMini.verify(message.gamerInfo);
            if (error)
                return "gamerInfo." + error;
        }
        return null;
    };
    Mail.fromObject = function fromObject(object) {
        if (object instanceof $root.Mail)
            return object;
        var message = new $root.Mail();
        if (object.id != null)
            message.id = String(object.id);
        switch (object.mailType) {
        case "ActivityMail":
        case 0:
            message.mailType = 0;
            break;
        case "SysMail":
        case 1:
            message.mailType = 1;
            break;
        case "AnnouncementMail":
        case 2:
            message.mailType = 2;
            break;
        case "GamerMail":
        case 3:
            message.mailType = 3;
            break;
        }
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.theme != null)
            message.theme = String(object.theme);
        if (object.msg != null)
            message.msg = String(object.msg);
        if (object.attachments) {
            if (!Array.isArray(object.attachments))
                throw TypeError(".Mail.attachments: array expected");
            message.attachments = [];
            for (var i = 0; i < object.attachments.length; ++i) {
                if (typeof object.attachments[i] !== "object")
                    throw TypeError(".Mail.attachments: object expected");
                message.attachments[i] = $root.GameItem.fromObject(object.attachments[i]);
            }
        }
        switch (object.state) {
        case "MailUnRead":
        case 0:
            message.state = 0;
            break;
        case "MailRead":
        case 1:
            message.state = 1;
            break;
        case "MailReceived":
        case 2:
            message.state = 2;
            break;
        }
        if (object.serverId != null)
            message.serverId = object.serverId | 0;
        if (object.senderId != null)
            message.senderId = object.senderId | 0;
        if (object.level != null)
            message.level = object.level | 0;
        if (object.endTime != null)
            if ($util.Long)
                (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
            else if (typeof object.endTime === "string")
                message.endTime = parseInt(object.endTime, 10);
            else if (typeof object.endTime === "number")
                message.endTime = object.endTime;
            else if (typeof object.endTime === "object")
                message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
        if (object.isDel != null)
            message.isDel = object.isDel | 0;
        if (object.cfgId != null)
            message.cfgId = object.cfgId | 0;
        if (object.save != null)
            message.save = Boolean(object.save);
        if (object.gamerInfo != null) {
            if (typeof object.gamerInfo !== "object")
                throw TypeError(".Mail.gamerInfo: object expected");
            message.gamerInfo = $root.GamerMini.fromObject(object.gamerInfo);
        }
        return message;
    };
    Mail.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.attachments = [];
        if (options.defaults) {
            object.id = "";
            object.mailType = options.enums === String ? "ActivityMail" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.theme = "";
            object.msg = "";
            object.state = options.enums === String ? "MailUnRead" : 0;
            object.serverId = 0;
            object.senderId = 0;
            object.level = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.endTime = options.longs === String ? "0" : 0;
            object.isDel = 0;
            object.cfgId = 0;
            object.save = false;
            object.gamerInfo = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.mailType != null && message.hasOwnProperty("mailType"))
            object.mailType = options.enums === String ? $root.MailType[message.mailType] : message.mailType;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.theme != null && message.hasOwnProperty("theme"))
            object.theme = message.theme;
        if (message.msg != null && message.hasOwnProperty("msg"))
            object.msg = message.msg;
        if (message.attachments && message.attachments.length) {
            object.attachments = [];
            for (var j = 0; j < message.attachments.length; ++j)
                object.attachments[j] = $root.GameItem.toObject(message.attachments[j], options);
        }
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.MailState[message.state] : message.state;
        if (message.serverId != null && message.hasOwnProperty("serverId"))
            object.serverId = message.serverId;
        if (message.senderId != null && message.hasOwnProperty("senderId"))
            object.senderId = message.senderId;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
                object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
                object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
        if (message.isDel != null && message.hasOwnProperty("isDel"))
            object.isDel = message.isDel;
        if (message.cfgId != null && message.hasOwnProperty("cfgId"))
            object.cfgId = message.cfgId;
        if (message.save != null && message.hasOwnProperty("save"))
            object.save = message.save;
        if (message.gamerInfo != null && message.hasOwnProperty("gamerInfo"))
            object.gamerInfo = $root.GamerMini.toObject(message.gamerInfo, options);
        return object;
    };
    Mail.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Mail;
})();
$root.GamerMatch = (function() {
    function GamerMatch(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    GamerMatch.prototype.mini = null;
    GamerMatch.prototype.ai = false;
    GamerMatch.create = function create(properties) {
        return new GamerMatch(properties);
    };
    GamerMatch.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.mini != null && message.hasOwnProperty("mini"))
            $root.GamerMini.encode(message.mini, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.ai != null && message.hasOwnProperty("ai"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.ai);
        return writer;
    };
    GamerMatch.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    GamerMatch.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GamerMatch();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.mini = $root.GamerMini.decode(reader, reader.uint32());
                break;
            case 2:
                message.ai = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    GamerMatch.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    GamerMatch.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.mini != null && message.hasOwnProperty("mini")) {
            var error = $root.GamerMini.verify(message.mini);
            if (error)
                return "mini." + error;
        }
        if (message.ai != null && message.hasOwnProperty("ai"))
            if (typeof message.ai !== "boolean")
                return "ai: boolean expected";
        return null;
    };
    GamerMatch.fromObject = function fromObject(object) {
        if (object instanceof $root.GamerMatch)
            return object;
        var message = new $root.GamerMatch();
        if (object.mini != null) {
            if (typeof object.mini !== "object")
                throw TypeError(".GamerMatch.mini: object expected");
            message.mini = $root.GamerMini.fromObject(object.mini);
        }
        if (object.ai != null)
            message.ai = Boolean(object.ai);
        return message;
    };
    GamerMatch.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.mini = null;
            object.ai = false;
        }
        if (message.mini != null && message.hasOwnProperty("mini"))
            object.mini = $root.GamerMini.toObject(message.mini, options);
        if (message.ai != null && message.hasOwnProperty("ai"))
            object.ai = message.ai;
        return object;
    };
    GamerMatch.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return GamerMatch;
})();
$root.MatchInfo = (function() {
    function MatchInfo(properties) {
        this.gamers = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    MatchInfo.prototype.session = "";
    MatchInfo.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    MatchInfo.prototype.addr = "";
    MatchInfo.prototype.frameDelta = 0;
    MatchInfo.prototype.minFrameDelta = 0;
    MatchInfo.prototype.matchTime = 0;
    MatchInfo.prototype.inputDelta = 0;
    MatchInfo.prototype.pvpType = 0;
    MatchInfo.prototype.threadRecv = false;
    MatchInfo.prototype.gamers = $util.emptyArray;
    MatchInfo.create = function create(properties) {
        return new MatchInfo(properties);
    };
    MatchInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.session != null && message.hasOwnProperty("session"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.session);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.time);
        if (message.addr != null && message.hasOwnProperty("addr"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.addr);
        if (message.frameDelta != null && message.hasOwnProperty("frameDelta"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.frameDelta);
        if (message.minFrameDelta != null && message.hasOwnProperty("minFrameDelta"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.minFrameDelta);
        if (message.matchTime != null && message.hasOwnProperty("matchTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.matchTime);
        if (message.inputDelta != null && message.hasOwnProperty("inputDelta"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.inputDelta);
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.pvpType);
        if (message.threadRecv != null && message.hasOwnProperty("threadRecv"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.threadRecv);
        if (message.gamers != null && message.gamers.length)
            for (var i = 0; i < message.gamers.length; ++i)
                $root.GamerMatch.encode(message.gamers[i], writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
        return writer;
    };
    MatchInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    MatchInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MatchInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.session = reader.string();
                break;
            case 2:
                message.time = reader.int64();
                break;
            case 3:
                message.addr = reader.string();
                break;
            case 4:
                message.frameDelta = reader.int32();
                break;
            case 5:
                message.minFrameDelta = reader.int32();
                break;
            case 6:
                message.matchTime = reader.int32();
                break;
            case 7:
                message.inputDelta = reader.int32();
                break;
            case 8:
                message.pvpType = reader.int32();
                break;
            case 9:
                message.threadRecv = reader.bool();
                break;
            case 100:
                if (!(message.gamers && message.gamers.length))
                    message.gamers = [];
                message.gamers.push($root.GamerMatch.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    MatchInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    MatchInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.session != null && message.hasOwnProperty("session"))
            if (!$util.isString(message.session))
                return "session: string expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.addr != null && message.hasOwnProperty("addr"))
            if (!$util.isString(message.addr))
                return "addr: string expected";
        if (message.frameDelta != null && message.hasOwnProperty("frameDelta"))
            if (!$util.isInteger(message.frameDelta))
                return "frameDelta: integer expected";
        if (message.minFrameDelta != null && message.hasOwnProperty("minFrameDelta"))
            if (!$util.isInteger(message.minFrameDelta))
                return "minFrameDelta: integer expected";
        if (message.matchTime != null && message.hasOwnProperty("matchTime"))
            if (!$util.isInteger(message.matchTime))
                return "matchTime: integer expected";
        if (message.inputDelta != null && message.hasOwnProperty("inputDelta"))
            if (!$util.isInteger(message.inputDelta))
                return "inputDelta: integer expected";
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            if (!$util.isInteger(message.pvpType))
                return "pvpType: integer expected";
        if (message.threadRecv != null && message.hasOwnProperty("threadRecv"))
            if (typeof message.threadRecv !== "boolean")
                return "threadRecv: boolean expected";
        if (message.gamers != null && message.hasOwnProperty("gamers")) {
            if (!Array.isArray(message.gamers))
                return "gamers: array expected";
            for (var i = 0; i < message.gamers.length; ++i) {
                var error = $root.GamerMatch.verify(message.gamers[i]);
                if (error)
                    return "gamers." + error;
            }
        }
        return null;
    };
    MatchInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.MatchInfo)
            return object;
        var message = new $root.MatchInfo();
        if (object.session != null)
            message.session = String(object.session);
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.addr != null)
            message.addr = String(object.addr);
        if (object.frameDelta != null)
            message.frameDelta = object.frameDelta | 0;
        if (object.minFrameDelta != null)
            message.minFrameDelta = object.minFrameDelta | 0;
        if (object.matchTime != null)
            message.matchTime = object.matchTime | 0;
        if (object.inputDelta != null)
            message.inputDelta = object.inputDelta | 0;
        if (object.pvpType != null)
            message.pvpType = object.pvpType | 0;
        if (object.threadRecv != null)
            message.threadRecv = Boolean(object.threadRecv);
        if (object.gamers) {
            if (!Array.isArray(object.gamers))
                throw TypeError(".MatchInfo.gamers: array expected");
            message.gamers = [];
            for (var i = 0; i < object.gamers.length; ++i) {
                if (typeof object.gamers[i] !== "object")
                    throw TypeError(".MatchInfo.gamers: object expected");
                message.gamers[i] = $root.GamerMatch.fromObject(object.gamers[i]);
            }
        }
        return message;
    };
    MatchInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.gamers = [];
        if (options.defaults) {
            object.session = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.addr = "";
            object.frameDelta = 0;
            object.minFrameDelta = 0;
            object.matchTime = 0;
            object.inputDelta = 0;
            object.pvpType = 0;
            object.threadRecv = false;
        }
        if (message.session != null && message.hasOwnProperty("session"))
            object.session = message.session;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.addr != null && message.hasOwnProperty("addr"))
            object.addr = message.addr;
        if (message.frameDelta != null && message.hasOwnProperty("frameDelta"))
            object.frameDelta = message.frameDelta;
        if (message.minFrameDelta != null && message.hasOwnProperty("minFrameDelta"))
            object.minFrameDelta = message.minFrameDelta;
        if (message.matchTime != null && message.hasOwnProperty("matchTime"))
            object.matchTime = message.matchTime;
        if (message.inputDelta != null && message.hasOwnProperty("inputDelta"))
            object.inputDelta = message.inputDelta;
        if (message.pvpType != null && message.hasOwnProperty("pvpType"))
            object.pvpType = message.pvpType;
        if (message.threadRecv != null && message.hasOwnProperty("threadRecv"))
            object.threadRecv = message.threadRecv;
        if (message.gamers && message.gamers.length) {
            object.gamers = [];
            for (var j = 0; j < message.gamers.length; ++j)
                object.gamers[j] = $root.GamerMatch.toObject(message.gamers[j], options);
        }
        return object;
    };
    MatchInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return MatchInfo;
})();
$root.PVPInput = (function() {
    function PVPInput(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPInput.prototype.id = 0;
    PVPInput.prototype.yaw = 0;
    PVPInput.prototype.btn = 0;
    PVPInput.prototype.pos = 0;
    PVPInput.prototype.talk = 0;
    PVPInput.create = function create(properties) {
        return new PVPInput(properties);
    };
    PVPInput.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.yaw != null && message.hasOwnProperty("yaw"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.yaw);
        if (message.btn != null && message.hasOwnProperty("btn"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.btn);
        if (message.pos != null && message.hasOwnProperty("pos"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pos);
        if (message.talk != null && message.hasOwnProperty("talk"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.talk);
        return writer;
    };
    PVPInput.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPInput.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPInput();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.yaw = reader.int32();
                break;
            case 3:
                message.btn = reader.int32();
                break;
            case 4:
                message.pos = reader.int32();
                break;
            case 5:
                message.talk = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPInput.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPInput.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.yaw != null && message.hasOwnProperty("yaw"))
            if (!$util.isInteger(message.yaw))
                return "yaw: integer expected";
        if (message.btn != null && message.hasOwnProperty("btn"))
            if (!$util.isInteger(message.btn))
                return "btn: integer expected";
        if (message.pos != null && message.hasOwnProperty("pos"))
            if (!$util.isInteger(message.pos))
                return "pos: integer expected";
        if (message.talk != null && message.hasOwnProperty("talk"))
            if (!$util.isInteger(message.talk))
                return "talk: integer expected";
        return null;
    };
    PVPInput.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPInput)
            return object;
        var message = new $root.PVPInput();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.yaw != null)
            message.yaw = object.yaw | 0;
        if (object.btn != null)
            message.btn = object.btn | 0;
        if (object.pos != null)
            message.pos = object.pos | 0;
        if (object.talk != null)
            message.talk = object.talk | 0;
        return message;
    };
    PVPInput.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.yaw = 0;
            object.btn = 0;
            object.pos = 0;
            object.talk = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.yaw != null && message.hasOwnProperty("yaw"))
            object.yaw = message.yaw;
        if (message.btn != null && message.hasOwnProperty("btn"))
            object.btn = message.btn;
        if (message.pos != null && message.hasOwnProperty("pos"))
            object.pos = message.pos;
        if (message.talk != null && message.hasOwnProperty("talk"))
            object.talk = message.talk;
        return object;
    };
    PVPInput.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPInput;
})();
$root.PVPFrame = (function() {
    function PVPFrame(properties) {
        this.inputs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPFrame.prototype.delta = 0;
    PVPFrame.prototype.frame = 0;
    PVPFrame.prototype.end = false;
    PVPFrame.prototype.inputs = $util.emptyArray;
    PVPFrame.create = function create(properties) {
        return new PVPFrame(properties);
    };
    PVPFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.delta != null && message.hasOwnProperty("delta"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.delta);
        if (message.frame != null && message.hasOwnProperty("frame"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.frame);
        if (message.end != null && message.hasOwnProperty("end"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.end);
        if (message.inputs != null && message.inputs.length)
            for (var i = 0; i < message.inputs.length; ++i)
                $root.PVPInput.encode(message.inputs[i], writer.uint32(/* id 100, wireType 2 =*/802).fork()).ldelim();
        return writer;
    };
    PVPFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPFrame.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.delta = reader.int32();
                break;
            case 2:
                message.frame = reader.int32();
                break;
            case 3:
                message.end = reader.bool();
                break;
            case 100:
                if (!(message.inputs && message.inputs.length))
                    message.inputs = [];
                message.inputs.push($root.PVPInput.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.delta != null && message.hasOwnProperty("delta"))
            if (!$util.isInteger(message.delta))
                return "delta: integer expected";
        if (message.frame != null && message.hasOwnProperty("frame"))
            if (!$util.isInteger(message.frame))
                return "frame: integer expected";
        if (message.end != null && message.hasOwnProperty("end"))
            if (typeof message.end !== "boolean")
                return "end: boolean expected";
        if (message.inputs != null && message.hasOwnProperty("inputs")) {
            if (!Array.isArray(message.inputs))
                return "inputs: array expected";
            for (var i = 0; i < message.inputs.length; ++i) {
                var error = $root.PVPInput.verify(message.inputs[i]);
                if (error)
                    return "inputs." + error;
            }
        }
        return null;
    };
    PVPFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPFrame)
            return object;
        var message = new $root.PVPFrame();
        if (object.delta != null)
            message.delta = object.delta | 0;
        if (object.frame != null)
            message.frame = object.frame | 0;
        if (object.end != null)
            message.end = Boolean(object.end);
        if (object.inputs) {
            if (!Array.isArray(object.inputs))
                throw TypeError(".PVPFrame.inputs: array expected");
            message.inputs = [];
            for (var i = 0; i < object.inputs.length; ++i) {
                if (typeof object.inputs[i] !== "object")
                    throw TypeError(".PVPFrame.inputs: object expected");
                message.inputs[i] = $root.PVPInput.fromObject(object.inputs[i]);
            }
        }
        return message;
    };
    PVPFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.inputs = [];
        if (options.defaults) {
            object.delta = 0;
            object.frame = 0;
            object.end = false;
        }
        if (message.delta != null && message.hasOwnProperty("delta"))
            object.delta = message.delta;
        if (message.frame != null && message.hasOwnProperty("frame"))
            object.frame = message.frame;
        if (message.end != null && message.hasOwnProperty("end"))
            object.end = message.end;
        if (message.inputs && message.inputs.length) {
            object.inputs = [];
            for (var j = 0; j < message.inputs.length; ++j)
                object.inputs[j] = $root.PVPInput.toObject(message.inputs[j], options);
        }
        return object;
    };
    PVPFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPFrame;
})();
$root.PVPFrames = (function() {
    function PVPFrames(properties) {
        this.frames = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPFrames.prototype.frames = $util.emptyArray;
    PVPFrames.create = function create(properties) {
        return new PVPFrames(properties);
    };
    PVPFrames.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.frames != null && message.frames.length)
            for (var i = 0; i < message.frames.length; ++i)
                $root.PVPFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };
    PVPFrames.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPFrames.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPFrames();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.frames && message.frames.length))
                    message.frames = [];
                message.frames.push($root.PVPFrame.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPFrames.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPFrames.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.frames != null && message.hasOwnProperty("frames")) {
            if (!Array.isArray(message.frames))
                return "frames: array expected";
            for (var i = 0; i < message.frames.length; ++i) {
                var error = $root.PVPFrame.verify(message.frames[i]);
                if (error)
                    return "frames." + error;
            }
        }
        return null;
    };
    PVPFrames.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPFrames)
            return object;
        var message = new $root.PVPFrames();
        if (object.frames) {
            if (!Array.isArray(object.frames))
                throw TypeError(".PVPFrames.frames: array expected");
            message.frames = [];
            for (var i = 0; i < object.frames.length; ++i) {
                if (typeof object.frames[i] !== "object")
                    throw TypeError(".PVPFrames.frames: object expected");
                message.frames[i] = $root.PVPFrame.fromObject(object.frames[i]);
            }
        }
        return message;
    };
    PVPFrames.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.frames = [];
        if (message.frames && message.frames.length) {
            object.frames = [];
            for (var j = 0; j < message.frames.length; ++j)
                object.frames[j] = $root.PVPFrame.toObject(message.frames[j], options);
        }
        return object;
    };
    PVPFrames.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPFrames;
})();
$root.PVPResult = (function() {
    function PVPResult(properties) {
        this.kills = [];
        this.length = [];
        this.gone = [];
        this.frames = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    PVPResult.prototype.kills = $util.emptyArray;
    PVPResult.prototype.length = $util.emptyArray;
    PVPResult.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    PVPResult.prototype.gone = $util.emptyArray;
    PVPResult.prototype.version = 0;
    PVPResult.prototype.matchInfo = null;
    PVPResult.prototype.frames = $util.emptyArray;
    PVPResult.prototype.md5 = "";
    PVPResult.create = function create(properties) {
        return new PVPResult(properties);
    };
    PVPResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.kills != null && message.kills.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.kills.length; ++i)
                writer.int32(message.kills[i]);
            writer.ldelim();
        }
        if (message.length != null && message.length.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.length.length; ++i)
                writer.int32(message.length[i]);
            writer.ldelim();
        }
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time);
        if (message.gone != null && message.gone.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.gone.length; ++i)
                writer.int32(message.gone[i]);
            writer.ldelim();
        }
        if (message.version != null && message.hasOwnProperty("version"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.version);
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            $root.MatchInfo.encode(message.matchInfo, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
        if (message.frames != null && message.frames.length)
            for (var i = 0; i < message.frames.length; ++i)
                $root.PVPFrame.encode(message.frames[i], writer.uint32(/* id 102, wireType 2 =*/818).fork()).ldelim();
        if (message.md5 != null && message.hasOwnProperty("md5"))
            writer.uint32(/* id 103, wireType 2 =*/826).string(message.md5);
        return writer;
    };
    PVPResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    PVPResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PVPResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.kills && message.kills.length))
                    message.kills = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.kills.push(reader.int32());
                } else
                    message.kills.push(reader.int32());
                break;
            case 2:
                if (!(message.length && message.length.length))
                    message.length = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.length.push(reader.int32());
                } else
                    message.length.push(reader.int32());
                break;
            case 3:
                message.time = reader.int64();
                break;
            case 4:
                if (!(message.gone && message.gone.length))
                    message.gone = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.gone.push(reader.int32());
                } else
                    message.gone.push(reader.int32());
                break;
            case 5:
                message.version = reader.int32();
                break;
            case 101:
                message.matchInfo = $root.MatchInfo.decode(reader, reader.uint32());
                break;
            case 102:
                if (!(message.frames && message.frames.length))
                    message.frames = [];
                message.frames.push($root.PVPFrame.decode(reader, reader.uint32()));
                break;
            case 103:
                message.md5 = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    PVPResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    PVPResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.kills != null && message.hasOwnProperty("kills")) {
            if (!Array.isArray(message.kills))
                return "kills: array expected";
            for (var i = 0; i < message.kills.length; ++i)
                if (!$util.isInteger(message.kills[i]))
                    return "kills: integer[] expected";
        }
        if (message.length != null && message.hasOwnProperty("length")) {
            if (!Array.isArray(message.length))
                return "length: array expected";
            for (var i = 0; i < message.length.length; ++i)
                if (!$util.isInteger(message.length[i]))
                    return "length: integer[] expected";
        }
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.gone != null && message.hasOwnProperty("gone")) {
            if (!Array.isArray(message.gone))
                return "gone: array expected";
            for (var i = 0; i < message.gone.length; ++i)
                if (!$util.isInteger(message.gone[i]))
                    return "gone: integer[] expected";
        }
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo")) {
            var error = $root.MatchInfo.verify(message.matchInfo);
            if (error)
                return "matchInfo." + error;
        }
        if (message.frames != null && message.hasOwnProperty("frames")) {
            if (!Array.isArray(message.frames))
                return "frames: array expected";
            for (var i = 0; i < message.frames.length; ++i) {
                var error = $root.PVPFrame.verify(message.frames[i]);
                if (error)
                    return "frames." + error;
            }
        }
        if (message.md5 != null && message.hasOwnProperty("md5"))
            if (!$util.isString(message.md5))
                return "md5: string expected";
        return null;
    };
    PVPResult.fromObject = function fromObject(object) {
        if (object instanceof $root.PVPResult)
            return object;
        var message = new $root.PVPResult();
        if (object.kills) {
            if (!Array.isArray(object.kills))
                throw TypeError(".PVPResult.kills: array expected");
            message.kills = [];
            for (var i = 0; i < object.kills.length; ++i)
                message.kills[i] = object.kills[i] | 0;
        }
        if (object.length) {
            if (!Array.isArray(object.length))
                throw TypeError(".PVPResult.length: array expected");
            message.length = [];
            for (var i = 0; i < object.length.length; ++i)
                message.length[i] = object.length[i] | 0;
        }
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.gone) {
            if (!Array.isArray(object.gone))
                throw TypeError(".PVPResult.gone: array expected");
            message.gone = [];
            for (var i = 0; i < object.gone.length; ++i)
                message.gone[i] = object.gone[i] | 0;
        }
        if (object.version != null)
            message.version = object.version | 0;
        if (object.matchInfo != null) {
            if (typeof object.matchInfo !== "object")
                throw TypeError(".PVPResult.matchInfo: object expected");
            message.matchInfo = $root.MatchInfo.fromObject(object.matchInfo);
        }
        if (object.frames) {
            if (!Array.isArray(object.frames))
                throw TypeError(".PVPResult.frames: array expected");
            message.frames = [];
            for (var i = 0; i < object.frames.length; ++i) {
                if (typeof object.frames[i] !== "object")
                    throw TypeError(".PVPResult.frames: object expected");
                message.frames[i] = $root.PVPFrame.fromObject(object.frames[i]);
            }
        }
        if (object.md5 != null)
            message.md5 = String(object.md5);
        return message;
    };
    PVPResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.kills = [];
            object.length = [];
            object.gone = [];
            object.frames = [];
        }
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.version = 0;
            object.matchInfo = null;
            object.md5 = "";
        }
        if (message.kills && message.kills.length) {
            object.kills = [];
            for (var j = 0; j < message.kills.length; ++j)
                object.kills[j] = message.kills[j];
        }
        if (message.length && message.length.length) {
            object.length = [];
            for (var j = 0; j < message.length.length; ++j)
                object.length[j] = message.length[j];
        }
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.gone && message.gone.length) {
            object.gone = [];
            for (var j = 0; j < message.gone.length; ++j)
                object.gone[j] = message.gone[j];
        }
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.matchInfo != null && message.hasOwnProperty("matchInfo"))
            object.matchInfo = $root.MatchInfo.toObject(message.matchInfo, options);
        if (message.frames && message.frames.length) {
            object.frames = [];
            for (var j = 0; j < message.frames.length; ++j)
                object.frames[j] = $root.PVPFrame.toObject(message.frames[j], options);
        }
        if (message.md5 != null && message.hasOwnProperty("md5"))
            object.md5 = message.md5;
        return object;
    };
    PVPResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return PVPResult;
})();
$root.RankLength = (function() {
    function RankLength(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    RankLength.prototype.id = 0;
    RankLength.prototype.length = 0;
    RankLength.prototype.rank = 0;
    RankLength.prototype.mini = null;
    RankLength.create = function create(properties) {
        return new RankLength(properties);
    };
    RankLength.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.length != null && message.hasOwnProperty("length"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.length);
        if (message.rank != null && message.hasOwnProperty("rank"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rank);
        if (message.mini != null && message.hasOwnProperty("mini"))
            $root.GamerMini.encode(message.mini, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    RankLength.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    RankLength.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RankLength();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.length = reader.int32();
                break;
            case 3:
                message.rank = reader.int32();
                break;
            case 4:
                message.mini = $root.GamerMini.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    RankLength.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    RankLength.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.length != null && message.hasOwnProperty("length"))
            if (!$util.isInteger(message.length))
                return "length: integer expected";
        if (message.rank != null && message.hasOwnProperty("rank"))
            if (!$util.isInteger(message.rank))
                return "rank: integer expected";
        if (message.mini != null && message.hasOwnProperty("mini")) {
            var error = $root.GamerMini.verify(message.mini);
            if (error)
                return "mini." + error;
        }
        return null;
    };
    RankLength.fromObject = function fromObject(object) {
        if (object instanceof $root.RankLength)
            return object;
        var message = new $root.RankLength();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.length != null)
            message.length = object.length | 0;
        if (object.rank != null)
            message.rank = object.rank | 0;
        if (object.mini != null) {
            if (typeof object.mini !== "object")
                throw TypeError(".RankLength.mini: object expected");
            message.mini = $root.GamerMini.fromObject(object.mini);
        }
        return message;
    };
    RankLength.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.length = 0;
            object.rank = 0;
            object.mini = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.length != null && message.hasOwnProperty("length"))
            object.length = message.length;
        if (message.rank != null && message.hasOwnProperty("rank"))
            object.rank = message.rank;
        if (message.mini != null && message.hasOwnProperty("mini"))
            object.mini = $root.GamerMini.toObject(message.mini, options);
        return object;
    };
    RankLength.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return RankLength;
})();
$root.ActorProperty = (function() {
    function ActorProperty(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorProperty.prototype.id = 0;
    ActorProperty.prototype.value = 0;
    ActorProperty.create = function create(properties) {
        return new ActorProperty(properties);
    };
    ActorProperty.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.value != null && message.hasOwnProperty("value"))
            writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
        return writer;
    };
    ActorProperty.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorProperty.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorProperty();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.value = reader.double();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorProperty.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorProperty.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value !== "number")
                return "value: number expected";
        return null;
    };
    ActorProperty.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorProperty)
            return object;
        var message = new $root.ActorProperty();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.value != null)
            message.value = Number(object.value);
        return message;
    };
    ActorProperty.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.value = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
        return object;
    };
    ActorProperty.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorProperty;
})();
$root.ActorGiftInfo = (function() {
    function ActorGiftInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorGiftInfo.prototype.id = 0;
    ActorGiftInfo.prototype.costNum = 0;
    ActorGiftInfo.prototype.curNum = 0;
    ActorGiftInfo.create = function create(properties) {
        return new ActorGiftInfo(properties);
    };
    ActorGiftInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.costNum != null && message.hasOwnProperty("costNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.costNum);
        if (message.curNum != null && message.hasOwnProperty("curNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.curNum);
        return writer;
    };
    ActorGiftInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorGiftInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorGiftInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.costNum = reader.int32();
                break;
            case 3:
                message.curNum = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorGiftInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorGiftInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.costNum != null && message.hasOwnProperty("costNum"))
            if (!$util.isInteger(message.costNum))
                return "costNum: integer expected";
        if (message.curNum != null && message.hasOwnProperty("curNum"))
            if (!$util.isInteger(message.curNum))
                return "curNum: integer expected";
        return null;
    };
    ActorGiftInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorGiftInfo)
            return object;
        var message = new $root.ActorGiftInfo();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.costNum != null)
            message.costNum = object.costNum | 0;
        if (object.curNum != null)
            message.curNum = object.curNum | 0;
        return message;
    };
    ActorGiftInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.costNum = 0;
            object.curNum = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.costNum != null && message.hasOwnProperty("costNum"))
            object.costNum = message.costNum;
        if (message.curNum != null && message.hasOwnProperty("curNum"))
            object.curNum = message.curNum;
        return object;
    };
    ActorGiftInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorGiftInfo;
})();
$root.ActorGift = (function() {
    function ActorGift(properties) {
        this.giftList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorGift.prototype.costGiftNum = 0;
    ActorGift.prototype.curGiftNum = 0;
    ActorGift.prototype.giftList = $util.emptyArray;
    ActorGift.create = function create(properties) {
        return new ActorGift(properties);
    };
    ActorGift.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.costGiftNum != null && message.hasOwnProperty("costGiftNum"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.costGiftNum);
        if (message.curGiftNum != null && message.hasOwnProperty("curGiftNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.curGiftNum);
        if (message.giftList != null && message.giftList.length)
            for (var i = 0; i < message.giftList.length; ++i)
                $root.ActorGiftInfo.encode(message.giftList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    ActorGift.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorGift.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorGift();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.costGiftNum = reader.int32();
                break;
            case 2:
                message.curGiftNum = reader.int32();
                break;
            case 3:
                if (!(message.giftList && message.giftList.length))
                    message.giftList = [];
                message.giftList.push($root.ActorGiftInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorGift.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorGift.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.costGiftNum != null && message.hasOwnProperty("costGiftNum"))
            if (!$util.isInteger(message.costGiftNum))
                return "costGiftNum: integer expected";
        if (message.curGiftNum != null && message.hasOwnProperty("curGiftNum"))
            if (!$util.isInteger(message.curGiftNum))
                return "curGiftNum: integer expected";
        if (message.giftList != null && message.hasOwnProperty("giftList")) {
            if (!Array.isArray(message.giftList))
                return "giftList: array expected";
            for (var i = 0; i < message.giftList.length; ++i) {
                var error = $root.ActorGiftInfo.verify(message.giftList[i]);
                if (error)
                    return "giftList." + error;
            }
        }
        return null;
    };
    ActorGift.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorGift)
            return object;
        var message = new $root.ActorGift();
        if (object.costGiftNum != null)
            message.costGiftNum = object.costGiftNum | 0;
        if (object.curGiftNum != null)
            message.curGiftNum = object.curGiftNum | 0;
        if (object.giftList) {
            if (!Array.isArray(object.giftList))
                throw TypeError(".ActorGift.giftList: array expected");
            message.giftList = [];
            for (var i = 0; i < object.giftList.length; ++i) {
                if (typeof object.giftList[i] !== "object")
                    throw TypeError(".ActorGift.giftList: object expected");
                message.giftList[i] = $root.ActorGiftInfo.fromObject(object.giftList[i]);
            }
        }
        return message;
    };
    ActorGift.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.giftList = [];
        if (options.defaults) {
            object.costGiftNum = 0;
            object.curGiftNum = 0;
        }
        if (message.costGiftNum != null && message.hasOwnProperty("costGiftNum"))
            object.costGiftNum = message.costGiftNum;
        if (message.curGiftNum != null && message.hasOwnProperty("curGiftNum"))
            object.curGiftNum = message.curGiftNum;
        if (message.giftList && message.giftList.length) {
            object.giftList = [];
            for (var j = 0; j < message.giftList.length; ++j)
                object.giftList[j] = $root.ActorGiftInfo.toObject(message.giftList[j], options);
        }
        return object;
    };
    ActorGift.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorGift;
})();
$root.ActorLabelInfo = (function() {
    function ActorLabelInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorLabelInfo.prototype.id = 0;
    ActorLabelInfo.prototype.slotId = 0;
    ActorLabelInfo.prototype.name = "";
    ActorLabelInfo.prototype.level = 0;
    ActorLabelInfo.prototype.type = 0;
    ActorLabelInfo.prototype.isUse = false;
    ActorLabelInfo.prototype.labelSetId = 0;
    ActorLabelInfo.create = function create(properties) {
        return new ActorLabelInfo(properties);
    };
    ActorLabelInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.slotId != null && message.hasOwnProperty("slotId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.slotId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
        if (message.isUse != null && message.hasOwnProperty("isUse"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isUse);
        if (message.labelSetId != null && message.hasOwnProperty("labelSetId"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.labelSetId);
        return writer;
    };
    ActorLabelInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorLabelInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorLabelInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.slotId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            case 4:
                message.level = reader.int32();
                break;
            case 5:
                message.type = reader.int32();
                break;
            case 6:
                message.isUse = reader.bool();
                break;
            case 7:
                message.labelSetId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorLabelInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorLabelInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.slotId != null && message.hasOwnProperty("slotId"))
            if (!$util.isInteger(message.slotId))
                return "slotId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.isUse != null && message.hasOwnProperty("isUse"))
            if (typeof message.isUse !== "boolean")
                return "isUse: boolean expected";
        if (message.labelSetId != null && message.hasOwnProperty("labelSetId"))
            if (!$util.isInteger(message.labelSetId))
                return "labelSetId: integer expected";
        return null;
    };
    ActorLabelInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorLabelInfo)
            return object;
        var message = new $root.ActorLabelInfo();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.slotId != null)
            message.slotId = object.slotId | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        switch (object.type) {
        case "Initial":
        case 0:
            message.type = 0;
            break;
        case "actor":
        case 1:
            message.type = 1;
            break;
        case "ad":
        case 2:
            message.type = 2;
            break;
        case "buy":
        case 3:
            message.type = 3;
            break;
        case "expand":
        case 4:
            message.type = 4;
            break;
        }
        if (object.isUse != null)
            message.isUse = Boolean(object.isUse);
        if (object.labelSetId != null)
            message.labelSetId = object.labelSetId | 0;
        return message;
    };
    ActorLabelInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.slotId = 0;
            object.name = "";
            object.level = 0;
            object.type = options.enums === String ? "Initial" : 0;
            object.isUse = false;
            object.labelSetId = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.slotId != null && message.hasOwnProperty("slotId"))
            object.slotId = message.slotId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ActorLabelType[message.type] : message.type;
        if (message.isUse != null && message.hasOwnProperty("isUse"))
            object.isUse = message.isUse;
        if (message.labelSetId != null && message.hasOwnProperty("labelSetId"))
            object.labelSetId = message.labelSetId;
        return object;
    };
    ActorLabelInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorLabelInfo;
})();
$root.ActorLabelInfos = (function() {
    function ActorLabelInfos(properties) {
        this.labels = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorLabelInfos.prototype.labels = $util.emptyArray;
    ActorLabelInfos.create = function create(properties) {
        return new ActorLabelInfos(properties);
    };
    ActorLabelInfos.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.labels != null && message.labels.length)
            for (var i = 0; i < message.labels.length; ++i)
                $root.ActorLabelInfo.encode(message.labels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };
    ActorLabelInfos.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorLabelInfos.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorLabelInfos();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.labels && message.labels.length))
                    message.labels = [];
                message.labels.push($root.ActorLabelInfo.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorLabelInfos.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorLabelInfos.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.labels != null && message.hasOwnProperty("labels")) {
            if (!Array.isArray(message.labels))
                return "labels: array expected";
            for (var i = 0; i < message.labels.length; ++i) {
                var error = $root.ActorLabelInfo.verify(message.labels[i]);
                if (error)
                    return "labels." + error;
            }
        }
        return null;
    };
    ActorLabelInfos.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorLabelInfos)
            return object;
        var message = new $root.ActorLabelInfos();
        if (object.labels) {
            if (!Array.isArray(object.labels))
                throw TypeError(".ActorLabelInfos.labels: array expected");
            message.labels = [];
            for (var i = 0; i < object.labels.length; ++i) {
                if (typeof object.labels[i] !== "object")
                    throw TypeError(".ActorLabelInfos.labels: object expected");
                message.labels[i] = $root.ActorLabelInfo.fromObject(object.labels[i]);
            }
        }
        return message;
    };
    ActorLabelInfos.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.labels = [];
        if (message.labels && message.labels.length) {
            object.labels = [];
            for (var j = 0; j < message.labels.length; ++j)
                object.labels[j] = $root.ActorLabelInfo.toObject(message.labels[j], options);
        }
        return object;
    };
    ActorLabelInfos.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorLabelInfos;
})();
$root.ActorLabel = (function() {
    function ActorLabel(properties) {
        this.noOpenActorLabelSetId = [];
        this.actorLabels = {};
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorLabel.prototype.actorLabelNum = 0;
    ActorLabel.prototype.adLabelNum = 0;
    ActorLabel.prototype.buyLabelNum = 0;
    ActorLabel.prototype.expandLabelNum = 0;
    ActorLabel.prototype.noOpenActorLabelSetId = $util.emptyArray;
    ActorLabel.prototype.actorLabels = $util.emptyObject;
    ActorLabel.create = function create(properties) {
        return new ActorLabel(properties);
    };
    ActorLabel.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.actorLabelNum != null && message.hasOwnProperty("actorLabelNum"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.actorLabelNum);
        if (message.adLabelNum != null && message.hasOwnProperty("adLabelNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.adLabelNum);
        if (message.buyLabelNum != null && message.hasOwnProperty("buyLabelNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.buyLabelNum);
        if (message.expandLabelNum != null && message.hasOwnProperty("expandLabelNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.expandLabelNum);
        if (message.noOpenActorLabelSetId != null && message.noOpenActorLabelSetId.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.noOpenActorLabelSetId.length; ++i)
                writer.int32(message.noOpenActorLabelSetId[i]);
            writer.ldelim();
        }
        if (message.actorLabels != null && message.hasOwnProperty("actorLabels"))
            for (var keys = Object.keys(message.actorLabels), i = 0; i < keys.length; ++i) {
                writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]);
                $root.ActorLabelInfo.encode(message.actorLabels[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
            }
        return writer;
    };
    ActorLabel.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorLabel.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorLabel(), key;
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.actorLabelNum = reader.int32();
                break;
            case 2:
                message.adLabelNum = reader.int32();
                break;
            case 3:
                message.buyLabelNum = reader.int32();
                break;
            case 4:
                message.expandLabelNum = reader.int32();
                break;
            case 5:
                if (!(message.noOpenActorLabelSetId && message.noOpenActorLabelSetId.length))
                    message.noOpenActorLabelSetId = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.noOpenActorLabelSetId.push(reader.int32());
                } else
                    message.noOpenActorLabelSetId.push(reader.int32());
                break;
            case 6:
                reader.skip().pos++;
                if (message.actorLabels === $util.emptyObject)
                    message.actorLabels = {};
                key = reader.int32();
                reader.pos++;
                message.actorLabels[key] = $root.ActorLabelInfo.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorLabel.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorLabel.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.actorLabelNum != null && message.hasOwnProperty("actorLabelNum"))
            if (!$util.isInteger(message.actorLabelNum))
                return "actorLabelNum: integer expected";
        if (message.adLabelNum != null && message.hasOwnProperty("adLabelNum"))
            if (!$util.isInteger(message.adLabelNum))
                return "adLabelNum: integer expected";
        if (message.buyLabelNum != null && message.hasOwnProperty("buyLabelNum"))
            if (!$util.isInteger(message.buyLabelNum))
                return "buyLabelNum: integer expected";
        if (message.expandLabelNum != null && message.hasOwnProperty("expandLabelNum"))
            if (!$util.isInteger(message.expandLabelNum))
                return "expandLabelNum: integer expected";
        if (message.noOpenActorLabelSetId != null && message.hasOwnProperty("noOpenActorLabelSetId")) {
            if (!Array.isArray(message.noOpenActorLabelSetId))
                return "noOpenActorLabelSetId: array expected";
            for (var i = 0; i < message.noOpenActorLabelSetId.length; ++i)
                if (!$util.isInteger(message.noOpenActorLabelSetId[i]))
                    return "noOpenActorLabelSetId: integer[] expected";
        }
        if (message.actorLabels != null && message.hasOwnProperty("actorLabels")) {
            if (!$util.isObject(message.actorLabels))
                return "actorLabels: object expected";
            var key = Object.keys(message.actorLabels);
            for (var i = 0; i < key.length; ++i) {
                if (!$util.key32Re.test(key[i]))
                    return "actorLabels: integer key{k:int32} expected";
                {
                    var error = $root.ActorLabelInfo.verify(message.actorLabels[key[i]]);
                    if (error)
                        return "actorLabels." + error;
                }
            }
        }
        return null;
    };
    ActorLabel.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorLabel)
            return object;
        var message = new $root.ActorLabel();
        if (object.actorLabelNum != null)
            message.actorLabelNum = object.actorLabelNum | 0;
        if (object.adLabelNum != null)
            message.adLabelNum = object.adLabelNum | 0;
        if (object.buyLabelNum != null)
            message.buyLabelNum = object.buyLabelNum | 0;
        if (object.expandLabelNum != null)
            message.expandLabelNum = object.expandLabelNum | 0;
        if (object.noOpenActorLabelSetId) {
            if (!Array.isArray(object.noOpenActorLabelSetId))
                throw TypeError(".ActorLabel.noOpenActorLabelSetId: array expected");
            message.noOpenActorLabelSetId = [];
            for (var i = 0; i < object.noOpenActorLabelSetId.length; ++i)
                message.noOpenActorLabelSetId[i] = object.noOpenActorLabelSetId[i] | 0;
        }
        if (object.actorLabels) {
            if (typeof object.actorLabels !== "object")
                throw TypeError(".ActorLabel.actorLabels: object expected");
            message.actorLabels = {};
            for (var keys = Object.keys(object.actorLabels), i = 0; i < keys.length; ++i) {
                if (typeof object.actorLabels[keys[i]] !== "object")
                    throw TypeError(".ActorLabel.actorLabels: object expected");
                message.actorLabels[keys[i]] = $root.ActorLabelInfo.fromObject(object.actorLabels[keys[i]]);
            }
        }
        return message;
    };
    ActorLabel.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.noOpenActorLabelSetId = [];
        if (options.objects || options.defaults)
            object.actorLabels = {};
        if (options.defaults) {
            object.actorLabelNum = 0;
            object.adLabelNum = 0;
            object.buyLabelNum = 0;
            object.expandLabelNum = 0;
        }
        if (message.actorLabelNum != null && message.hasOwnProperty("actorLabelNum"))
            object.actorLabelNum = message.actorLabelNum;
        if (message.adLabelNum != null && message.hasOwnProperty("adLabelNum"))
            object.adLabelNum = message.adLabelNum;
        if (message.buyLabelNum != null && message.hasOwnProperty("buyLabelNum"))
            object.buyLabelNum = message.buyLabelNum;
        if (message.expandLabelNum != null && message.hasOwnProperty("expandLabelNum"))
            object.expandLabelNum = message.expandLabelNum;
        if (message.noOpenActorLabelSetId && message.noOpenActorLabelSetId.length) {
            object.noOpenActorLabelSetId = [];
            for (var j = 0; j < message.noOpenActorLabelSetId.length; ++j)
                object.noOpenActorLabelSetId[j] = message.noOpenActorLabelSetId[j];
        }
        var keys2;
        if (message.actorLabels && (keys2 = Object.keys(message.actorLabels)).length) {
            object.actorLabels = {};
            for (var j = 0; j < keys2.length; ++j)
                object.actorLabels[keys2[j]] = $root.ActorLabelInfo.toObject(message.actorLabels[keys2[j]], options);
        }
        return object;
    };
    ActorLabel.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorLabel;
})();
$root.ActorFriendshipTask = (function() {
    function ActorFriendshipTask(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorFriendshipTask.prototype.id = 0;
    ActorFriendshipTask.prototype.state = 0;
    ActorFriendshipTask.prototype.plotProgress = 0;
    ActorFriendshipTask.create = function create(properties) {
        return new ActorFriendshipTask(properties);
    };
    ActorFriendshipTask.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.plotProgress != null && message.hasOwnProperty("plotProgress"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.plotProgress);
        return writer;
    };
    ActorFriendshipTask.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorFriendshipTask.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorFriendshipTask();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.state = reader.int32();
                break;
            case 3:
                message.plotProgress = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorFriendshipTask.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorFriendshipTask.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.plotProgress != null && message.hasOwnProperty("plotProgress"))
            if (!$util.isInteger(message.plotProgress))
                return "plotProgress: integer expected";
        return null;
    };
    ActorFriendshipTask.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorFriendshipTask)
            return object;
        var message = new $root.ActorFriendshipTask();
        if (object.id != null)
            message.id = object.id | 0;
        switch (object.state) {
        case "CannotAccept":
        case 0:
            message.state = 0;
            break;
        case "CanAccept":
        case 1:
            message.state = 1;
            break;
        case "Doing":
        case 2:
            message.state = 2;
            break;
        case "Complete":
        case 3:
            message.state = 3;
            break;
        case "TaskFinish":
        case 4:
            message.state = 4;
            break;
        }
        if (object.plotProgress != null)
            message.plotProgress = object.plotProgress | 0;
        return message;
    };
    ActorFriendshipTask.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.state = options.enums === String ? "CannotAccept" : 0;
            object.plotProgress = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.TaskState[message.state] : message.state;
        if (message.plotProgress != null && message.hasOwnProperty("plotProgress"))
            object.plotProgress = message.plotProgress;
        return object;
    };
    ActorFriendshipTask.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorFriendshipTask;
})();
$root.ActorFriendship = (function() {
    function ActorFriendship(properties) {
        this.task = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorFriendship.prototype.level = 0;
    ActorFriendship.prototype.curExp = 0;
    ActorFriendship.prototype.costExp = 0;
    ActorFriendship.prototype.task = $util.emptyArray;
    ActorFriendship.create = function create(properties) {
        return new ActorFriendship(properties);
    };
    ActorFriendship.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
        if (message.curExp != null && message.hasOwnProperty("curExp"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.curExp);
        if (message.costExp != null && message.hasOwnProperty("costExp"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.costExp);
        if (message.task != null && message.task.length)
            for (var i = 0; i < message.task.length; ++i)
                $root.ActorFriendshipTask.encode(message.task[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };
    ActorFriendship.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorFriendship.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorFriendship();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.level = reader.int32();
                break;
            case 2:
                message.curExp = reader.int32();
                break;
            case 3:
                message.costExp = reader.int32();
                break;
            case 4:
                if (!(message.task && message.task.length))
                    message.task = [];
                message.task.push($root.ActorFriendshipTask.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorFriendship.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorFriendship.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.curExp != null && message.hasOwnProperty("curExp"))
            if (!$util.isInteger(message.curExp))
                return "curExp: integer expected";
        if (message.costExp != null && message.hasOwnProperty("costExp"))
            if (!$util.isInteger(message.costExp))
                return "costExp: integer expected";
        if (message.task != null && message.hasOwnProperty("task")) {
            if (!Array.isArray(message.task))
                return "task: array expected";
            for (var i = 0; i < message.task.length; ++i) {
                var error = $root.ActorFriendshipTask.verify(message.task[i]);
                if (error)
                    return "task." + error;
            }
        }
        return null;
    };
    ActorFriendship.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorFriendship)
            return object;
        var message = new $root.ActorFriendship();
        if (object.level != null)
            message.level = object.level | 0;
        if (object.curExp != null)
            message.curExp = object.curExp | 0;
        if (object.costExp != null)
            message.costExp = object.costExp | 0;
        if (object.task) {
            if (!Array.isArray(object.task))
                throw TypeError(".ActorFriendship.task: array expected");
            message.task = [];
            for (var i = 0; i < object.task.length; ++i) {
                if (typeof object.task[i] !== "object")
                    throw TypeError(".ActorFriendship.task: object expected");
                message.task[i] = $root.ActorFriendshipTask.fromObject(object.task[i]);
            }
        }
        return message;
    };
    ActorFriendship.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.task = [];
        if (options.defaults) {
            object.level = 0;
            object.curExp = 0;
            object.costExp = 0;
        }
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.curExp != null && message.hasOwnProperty("curExp"))
            object.curExp = message.curExp;
        if (message.costExp != null && message.hasOwnProperty("costExp"))
            object.costExp = message.costExp;
        if (message.task && message.task.length) {
            object.task = [];
            for (var j = 0; j < message.task.length; ++j)
                object.task[j] = $root.ActorFriendshipTask.toObject(message.task[j], options);
        }
        return object;
    };
    ActorFriendship.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorFriendship;
})();
$root.ActorSkill = (function() {
    function ActorSkill(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorSkill.prototype.type = 0;
    ActorSkill.prototype.level = 0;
    ActorSkill.prototype.rate = 0;
    ActorSkill.prototype.priority = 0;
    ActorSkill.create = function create(properties) {
        return new ActorSkill(properties);
    };
    ActorSkill.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.level);
        if (message.rate != null && message.hasOwnProperty("rate"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.rate);
        if (message.priority != null && message.hasOwnProperty("priority"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.priority);
        return writer;
    };
    ActorSkill.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorSkill.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorSkill();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.type = reader.int32();
                break;
            case 2:
                message.level = reader.int32();
                break;
            case 3:
                message.rate = reader.int32();
                break;
            case 4:
                message.priority = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorSkill.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorSkill.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.rate != null && message.hasOwnProperty("rate"))
            if (!$util.isInteger(message.rate))
                return "rate: integer expected";
        if (message.priority != null && message.hasOwnProperty("priority"))
            if (!$util.isInteger(message.priority))
                return "priority: integer expected";
        return null;
    };
    ActorSkill.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorSkill)
            return object;
        var message = new $root.ActorSkill();
        if (object.type != null)
            message.type = object.type | 0;
        if (object.level != null)
            message.level = object.level | 0;
        if (object.rate != null)
            message.rate = object.rate | 0;
        if (object.priority != null)
            message.priority = object.priority | 0;
        return message;
    };
    ActorSkill.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.type = 0;
            object.level = 0;
            object.rate = 0;
            object.priority = 0;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.rate != null && message.hasOwnProperty("rate"))
            object.rate = message.rate;
        if (message.priority != null && message.hasOwnProperty("priority"))
            object.priority = message.priority;
        return object;
    };
    ActorSkill.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorSkill;
})();
$root.Actor = (function() {
    function Actor(properties) {
        this.propertys = [];
        this.skills = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Actor.prototype.id = 0;
    Actor.prototype.name = "";
    Actor.prototype.level = 0;
    Actor.prototype.star = 0;
    Actor.prototype.exp = 0;
    Actor.prototype.bulidId = 0;
    Actor.prototype.loveLevel = 0;
    Actor.prototype.propertys = $util.emptyArray;
    Actor.prototype.gift = null;
    Actor.prototype.levelMax = 0;
    Actor.prototype.actorLabel = null;
    Actor.prototype.friendship = null;
    Actor.prototype.skills = $util.emptyArray;
    Actor.create = function create(properties) {
        return new Actor(properties);
    };
    Actor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.level);
        if (message.star != null && message.hasOwnProperty("star"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.star);
        if (message.exp != null && message.hasOwnProperty("exp"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.exp);
        if (message.bulidId != null && message.hasOwnProperty("bulidId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.bulidId);
        if (message.loveLevel != null && message.hasOwnProperty("loveLevel"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.loveLevel);
        if (message.propertys != null && message.propertys.length)
            for (var i = 0; i < message.propertys.length; ++i)
                $root.ActorProperty.encode(message.propertys[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.gift != null && message.hasOwnProperty("gift"))
            $root.ActorGift.encode(message.gift, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.levelMax != null && message.hasOwnProperty("levelMax"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.levelMax);
        if (message.actorLabel != null && message.hasOwnProperty("actorLabel"))
            $root.ActorLabel.encode(message.actorLabel, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.friendship != null && message.hasOwnProperty("friendship"))
            $root.ActorFriendship.encode(message.friendship, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.skills != null && message.skills.length)
            for (var i = 0; i < message.skills.length; ++i)
                $root.ActorSkill.encode(message.skills[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        return writer;
    };
    Actor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Actor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Actor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.level = reader.int32();
                break;
            case 4:
                message.star = reader.int32();
                break;
            case 5:
                message.exp = reader.int32();
                break;
            case 6:
                message.bulidId = reader.int32();
                break;
            case 7:
                message.loveLevel = reader.int32();
                break;
            case 8:
                if (!(message.propertys && message.propertys.length))
                    message.propertys = [];
                message.propertys.push($root.ActorProperty.decode(reader, reader.uint32()));
                break;
            case 9:
                message.gift = $root.ActorGift.decode(reader, reader.uint32());
                break;
            case 10:
                message.levelMax = reader.int32();
                break;
            case 11:
                message.actorLabel = $root.ActorLabel.decode(reader, reader.uint32());
                break;
            case 12:
                message.friendship = $root.ActorFriendship.decode(reader, reader.uint32());
                break;
            case 13:
                if (!(message.skills && message.skills.length))
                    message.skills = [];
                message.skills.push($root.ActorSkill.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Actor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Actor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.star != null && message.hasOwnProperty("star"))
            if (!$util.isInteger(message.star))
                return "star: integer expected";
        if (message.exp != null && message.hasOwnProperty("exp"))
            if (!$util.isInteger(message.exp))
                return "exp: integer expected";
        if (message.bulidId != null && message.hasOwnProperty("bulidId"))
            if (!$util.isInteger(message.bulidId))
                return "bulidId: integer expected";
        if (message.loveLevel != null && message.hasOwnProperty("loveLevel"))
            if (!$util.isInteger(message.loveLevel))
                return "loveLevel: integer expected";
        if (message.propertys != null && message.hasOwnProperty("propertys")) {
            if (!Array.isArray(message.propertys))
                return "propertys: array expected";
            for (var i = 0; i < message.propertys.length; ++i) {
                var error = $root.ActorProperty.verify(message.propertys[i]);
                if (error)
                    return "propertys." + error;
            }
        }
        if (message.gift != null && message.hasOwnProperty("gift")) {
            var error = $root.ActorGift.verify(message.gift);
            if (error)
                return "gift." + error;
        }
        if (message.levelMax != null && message.hasOwnProperty("levelMax"))
            if (!$util.isInteger(message.levelMax))
                return "levelMax: integer expected";
        if (message.actorLabel != null && message.hasOwnProperty("actorLabel")) {
            var error = $root.ActorLabel.verify(message.actorLabel);
            if (error)
                return "actorLabel." + error;
        }
        if (message.friendship != null && message.hasOwnProperty("friendship")) {
            var error = $root.ActorFriendship.verify(message.friendship);
            if (error)
                return "friendship." + error;
        }
        if (message.skills != null && message.hasOwnProperty("skills")) {
            if (!Array.isArray(message.skills))
                return "skills: array expected";
            for (var i = 0; i < message.skills.length; ++i) {
                var error = $root.ActorSkill.verify(message.skills[i]);
                if (error)
                    return "skills." + error;
            }
        }
        return null;
    };
    Actor.fromObject = function fromObject(object) {
        if (object instanceof $root.Actor)
            return object;
        var message = new $root.Actor();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.level != null)
            message.level = object.level | 0;
        if (object.star != null)
            message.star = object.star | 0;
        if (object.exp != null)
            message.exp = object.exp | 0;
        if (object.bulidId != null)
            message.bulidId = object.bulidId | 0;
        if (object.loveLevel != null)
            message.loveLevel = object.loveLevel | 0;
        if (object.propertys) {
            if (!Array.isArray(object.propertys))
                throw TypeError(".Actor.propertys: array expected");
            message.propertys = [];
            for (var i = 0; i < object.propertys.length; ++i) {
                if (typeof object.propertys[i] !== "object")
                    throw TypeError(".Actor.propertys: object expected");
                message.propertys[i] = $root.ActorProperty.fromObject(object.propertys[i]);
            }
        }
        if (object.gift != null) {
            if (typeof object.gift !== "object")
                throw TypeError(".Actor.gift: object expected");
            message.gift = $root.ActorGift.fromObject(object.gift);
        }
        if (object.levelMax != null)
            message.levelMax = object.levelMax | 0;
        if (object.actorLabel != null) {
            if (typeof object.actorLabel !== "object")
                throw TypeError(".Actor.actorLabel: object expected");
            message.actorLabel = $root.ActorLabel.fromObject(object.actorLabel);
        }
        if (object.friendship != null) {
            if (typeof object.friendship !== "object")
                throw TypeError(".Actor.friendship: object expected");
            message.friendship = $root.ActorFriendship.fromObject(object.friendship);
        }
        if (object.skills) {
            if (!Array.isArray(object.skills))
                throw TypeError(".Actor.skills: array expected");
            message.skills = [];
            for (var i = 0; i < object.skills.length; ++i) {
                if (typeof object.skills[i] !== "object")
                    throw TypeError(".Actor.skills: object expected");
                message.skills[i] = $root.ActorSkill.fromObject(object.skills[i]);
            }
        }
        return message;
    };
    Actor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.propertys = [];
            object.skills = [];
        }
        if (options.defaults) {
            object.id = 0;
            object.name = "";
            object.level = 0;
            object.star = 0;
            object.exp = 0;
            object.bulidId = 0;
            object.loveLevel = 0;
            object.gift = null;
            object.levelMax = 0;
            object.actorLabel = null;
            object.friendship = null;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.star != null && message.hasOwnProperty("star"))
            object.star = message.star;
        if (message.exp != null && message.hasOwnProperty("exp"))
            object.exp = message.exp;
        if (message.bulidId != null && message.hasOwnProperty("bulidId"))
            object.bulidId = message.bulidId;
        if (message.loveLevel != null && message.hasOwnProperty("loveLevel"))
            object.loveLevel = message.loveLevel;
        if (message.propertys && message.propertys.length) {
            object.propertys = [];
            for (var j = 0; j < message.propertys.length; ++j)
                object.propertys[j] = $root.ActorProperty.toObject(message.propertys[j], options);
        }
        if (message.gift != null && message.hasOwnProperty("gift"))
            object.gift = $root.ActorGift.toObject(message.gift, options);
        if (message.levelMax != null && message.hasOwnProperty("levelMax"))
            object.levelMax = message.levelMax;
        if (message.actorLabel != null && message.hasOwnProperty("actorLabel"))
            object.actorLabel = $root.ActorLabel.toObject(message.actorLabel, options);
        if (message.friendship != null && message.hasOwnProperty("friendship"))
            object.friendship = $root.ActorFriendship.toObject(message.friendship, options);
        if (message.skills && message.skills.length) {
            object.skills = [];
            for (var j = 0; j < message.skills.length; ++j)
                object.skills[j] = $root.ActorSkill.toObject(message.skills[j], options);
        }
        return object;
    };
    Actor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Actor;
})();
$root.ActorSet = (function() {
    function ActorSet(properties) {
        this.actorsId = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    ActorSet.prototype.id = 0;
    ActorSet.prototype.actorNum = 0;
    ActorSet.prototype.curActorNum = 0;
    ActorSet.prototype.actorsId = $util.emptyArray;
    ActorSet.prototype.isReward = false;
    ActorSet.create = function create(properties) {
        return new ActorSet(properties);
    };
    ActorSet.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.actorNum != null && message.hasOwnProperty("actorNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorNum);
        if (message.curActorNum != null && message.hasOwnProperty("curActorNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.curActorNum);
        if (message.actorsId != null && message.actorsId.length) {
            writer.uint32(/* id 4, wireType 2 =*/34).fork();
            for (var i = 0; i < message.actorsId.length; ++i)
                writer.int32(message.actorsId[i]);
            writer.ldelim();
        }
        if (message.isReward != null && message.hasOwnProperty("isReward"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isReward);
        return writer;
    };
    ActorSet.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    ActorSet.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ActorSet();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.actorNum = reader.int32();
                break;
            case 3:
                message.curActorNum = reader.int32();
                break;
            case 4:
                if (!(message.actorsId && message.actorsId.length))
                    message.actorsId = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.actorsId.push(reader.int32());
                } else
                    message.actorsId.push(reader.int32());
                break;
            case 5:
                message.isReward = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    ActorSet.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    ActorSet.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.actorNum != null && message.hasOwnProperty("actorNum"))
            if (!$util.isInteger(message.actorNum))
                return "actorNum: integer expected";
        if (message.curActorNum != null && message.hasOwnProperty("curActorNum"))
            if (!$util.isInteger(message.curActorNum))
                return "curActorNum: integer expected";
        if (message.actorsId != null && message.hasOwnProperty("actorsId")) {
            if (!Array.isArray(message.actorsId))
                return "actorsId: array expected";
            for (var i = 0; i < message.actorsId.length; ++i)
                if (!$util.isInteger(message.actorsId[i]))
                    return "actorsId: integer[] expected";
        }
        if (message.isReward != null && message.hasOwnProperty("isReward"))
            if (typeof message.isReward !== "boolean")
                return "isReward: boolean expected";
        return null;
    };
    ActorSet.fromObject = function fromObject(object) {
        if (object instanceof $root.ActorSet)
            return object;
        var message = new $root.ActorSet();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.actorNum != null)
            message.actorNum = object.actorNum | 0;
        if (object.curActorNum != null)
            message.curActorNum = object.curActorNum | 0;
        if (object.actorsId) {
            if (!Array.isArray(object.actorsId))
                throw TypeError(".ActorSet.actorsId: array expected");
            message.actorsId = [];
            for (var i = 0; i < object.actorsId.length; ++i)
                message.actorsId[i] = object.actorsId[i] | 0;
        }
        if (object.isReward != null)
            message.isReward = Boolean(object.isReward);
        return message;
    };
    ActorSet.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.actorsId = [];
        if (options.defaults) {
            object.id = 0;
            object.actorNum = 0;
            object.curActorNum = 0;
            object.isReward = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.actorNum != null && message.hasOwnProperty("actorNum"))
            object.actorNum = message.actorNum;
        if (message.curActorNum != null && message.hasOwnProperty("curActorNum"))
            object.curActorNum = message.curActorNum;
        if (message.actorsId && message.actorsId.length) {
            object.actorsId = [];
            for (var j = 0; j < message.actorsId.length; ++j)
                object.actorsId[j] = message.actorsId[j];
        }
        if (message.isReward != null && message.hasOwnProperty("isReward"))
            object.isReward = message.isReward;
        return object;
    };
    ActorSet.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return ActorSet;
})();
$root.BuildInfo = (function() {
    function BuildInfo(properties) {
        this.productInfo = [];
        this.actorCell = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildInfo.prototype.buildId = 0;
    BuildInfo.prototype.buildType = 0;
    BuildInfo.prototype.buildLevel = 0;
    BuildInfo.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    BuildInfo.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    BuildInfo.prototype.state = 0;
    BuildInfo.prototype.breakLevelMax = 0;
    BuildInfo.prototype.productInfo = $util.emptyArray;
    BuildInfo.prototype.actorCell = $util.emptyArray;
    BuildInfo.prototype.effectInfo = null;
    BuildInfo.create = function create(properties) {
        return new BuildInfo(properties);
    };
    BuildInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.buildId != null && message.hasOwnProperty("buildId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.buildId);
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.buildType);
        if (message.buildLevel != null && message.hasOwnProperty("buildLevel"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.buildLevel);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.startTime);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.endTime);
        if (message.state != null && message.hasOwnProperty("state"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.state);
        if (message.breakLevelMax != null && message.hasOwnProperty("breakLevelMax"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.breakLevelMax);
        if (message.productInfo != null && message.productInfo.length)
            for (var i = 0; i < message.productInfo.length; ++i)
                $root.BuildProduct.encode(message.productInfo[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.actorCell != null && message.actorCell.length)
            for (var i = 0; i < message.actorCell.length; ++i)
                $root.BuildActorCell.encode(message.actorCell[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.effectInfo != null && message.hasOwnProperty("effectInfo"))
            $root.BuildEffect.encode(message.effectInfo, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        return writer;
    };
    BuildInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildInfo.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.buildId = reader.int32();
                break;
            case 2:
                message.buildType = reader.int32();
                break;
            case 3:
                message.buildLevel = reader.int32();
                break;
            case 4:
                message.startTime = reader.int64();
                break;
            case 5:
                message.endTime = reader.int64();
                break;
            case 6:
                message.state = reader.int32();
                break;
            case 7:
                message.breakLevelMax = reader.int32();
                break;
            case 8:
                if (!(message.productInfo && message.productInfo.length))
                    message.productInfo = [];
                message.productInfo.push($root.BuildProduct.decode(reader, reader.uint32()));
                break;
            case 9:
                if (!(message.actorCell && message.actorCell.length))
                    message.actorCell = [];
                message.actorCell.push($root.BuildActorCell.decode(reader, reader.uint32()));
                break;
            case 10:
                message.effectInfo = $root.BuildEffect.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.buildId != null && message.hasOwnProperty("buildId"))
            if (!$util.isInteger(message.buildId))
                return "buildId: integer expected";
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            if (!$util.isInteger(message.buildType))
                return "buildType: integer expected";
        if (message.buildLevel != null && message.hasOwnProperty("buildLevel"))
            if (!$util.isInteger(message.buildLevel))
                return "buildLevel: integer expected";
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
                return "startTime: integer|Long expected";
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                return "endTime: integer|Long expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.breakLevelMax != null && message.hasOwnProperty("breakLevelMax"))
            if (!$util.isInteger(message.breakLevelMax))
                return "breakLevelMax: integer expected";
        if (message.productInfo != null && message.hasOwnProperty("productInfo")) {
            if (!Array.isArray(message.productInfo))
                return "productInfo: array expected";
            for (var i = 0; i < message.productInfo.length; ++i) {
                var error = $root.BuildProduct.verify(message.productInfo[i]);
                if (error)
                    return "productInfo." + error;
            }
        }
        if (message.actorCell != null && message.hasOwnProperty("actorCell")) {
            if (!Array.isArray(message.actorCell))
                return "actorCell: array expected";
            for (var i = 0; i < message.actorCell.length; ++i) {
                var error = $root.BuildActorCell.verify(message.actorCell[i]);
                if (error)
                    return "actorCell." + error;
            }
        }
        if (message.effectInfo != null && message.hasOwnProperty("effectInfo")) {
            var error = $root.BuildEffect.verify(message.effectInfo);
            if (error)
                return "effectInfo." + error;
        }
        return null;
    };
    BuildInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildInfo)
            return object;
        var message = new $root.BuildInfo();
        if (object.buildId != null)
            message.buildId = object.buildId | 0;
        if (object.buildType != null)
            message.buildType = object.buildType | 0;
        if (object.buildLevel != null)
            message.buildLevel = object.buildLevel | 0;
        if (object.startTime != null)
            if ($util.Long)
                (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = false;
            else if (typeof object.startTime === "string")
                message.startTime = parseInt(object.startTime, 10);
            else if (typeof object.startTime === "number")
                message.startTime = object.startTime;
            else if (typeof object.startTime === "object")
                message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber();
        if (object.endTime != null)
            if ($util.Long)
                (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
            else if (typeof object.endTime === "string")
                message.endTime = parseInt(object.endTime, 10);
            else if (typeof object.endTime === "number")
                message.endTime = object.endTime;
            else if (typeof object.endTime === "object")
                message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
        switch (object.state) {
        case "Normal":
        case 0:
            message.state = 0;
            break;
        case "Building":
        case 1:
            message.state = 1;
            break;
        case "LevelUp":
        case 2:
            message.state = 2;
            break;
        }
        if (object.breakLevelMax != null)
            message.breakLevelMax = object.breakLevelMax | 0;
        if (object.productInfo) {
            if (!Array.isArray(object.productInfo))
                throw TypeError(".BuildInfo.productInfo: array expected");
            message.productInfo = [];
            for (var i = 0; i < object.productInfo.length; ++i) {
                if (typeof object.productInfo[i] !== "object")
                    throw TypeError(".BuildInfo.productInfo: object expected");
                message.productInfo[i] = $root.BuildProduct.fromObject(object.productInfo[i]);
            }
        }
        if (object.actorCell) {
            if (!Array.isArray(object.actorCell))
                throw TypeError(".BuildInfo.actorCell: array expected");
            message.actorCell = [];
            for (var i = 0; i < object.actorCell.length; ++i) {
                if (typeof object.actorCell[i] !== "object")
                    throw TypeError(".BuildInfo.actorCell: object expected");
                message.actorCell[i] = $root.BuildActorCell.fromObject(object.actorCell[i]);
            }
        }
        if (object.effectInfo != null) {
            if (typeof object.effectInfo !== "object")
                throw TypeError(".BuildInfo.effectInfo: object expected");
            message.effectInfo = $root.BuildEffect.fromObject(object.effectInfo);
        }
        return message;
    };
    BuildInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.productInfo = [];
            object.actorCell = [];
        }
        if (options.defaults) {
            object.buildId = 0;
            object.buildType = 0;
            object.buildLevel = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.startTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.endTime = options.longs === String ? "0" : 0;
            object.state = options.enums === String ? "Normal" : 0;
            object.breakLevelMax = 0;
            object.effectInfo = null;
        }
        if (message.buildId != null && message.hasOwnProperty("buildId"))
            object.buildId = message.buildId;
        if (message.buildType != null && message.hasOwnProperty("buildType"))
            object.buildType = message.buildType;
        if (message.buildLevel != null && message.hasOwnProperty("buildLevel"))
            object.buildLevel = message.buildLevel;
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (typeof message.startTime === "number")
                object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
            else
                object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber() : message.startTime;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
                object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
                object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.BuildState[message.state] : message.state;
        if (message.breakLevelMax != null && message.hasOwnProperty("breakLevelMax"))
            object.breakLevelMax = message.breakLevelMax;
        if (message.productInfo && message.productInfo.length) {
            object.productInfo = [];
            for (var j = 0; j < message.productInfo.length; ++j)
                object.productInfo[j] = $root.BuildProduct.toObject(message.productInfo[j], options);
        }
        if (message.actorCell && message.actorCell.length) {
            object.actorCell = [];
            for (var j = 0; j < message.actorCell.length; ++j)
                object.actorCell[j] = $root.BuildActorCell.toObject(message.actorCell[j], options);
        }
        if (message.effectInfo != null && message.hasOwnProperty("effectInfo"))
            object.effectInfo = $root.BuildEffect.toObject(message.effectInfo, options);
        return object;
    };
    BuildInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildInfo;
})();
$root.BuildProduct = (function() {
    function BuildProduct(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildProduct.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    BuildProduct.prototype.notGetNum = 0;
    BuildProduct.prototype.isCritical = 0;
    BuildProduct.prototype.itemId = 0;
    BuildProduct.prototype.GetNum = 0;
    BuildProduct.prototype.AccessoryMallProduct = null;
    BuildProduct.create = function create(properties) {
        return new BuildProduct(properties);
    };
    BuildProduct.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.startTime);
        if (message.notGetNum != null && message.hasOwnProperty("notGetNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.notGetNum);
        if (message.isCritical != null && message.hasOwnProperty("isCritical"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.isCritical);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.itemId);
        if (message.GetNum != null && message.hasOwnProperty("GetNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.GetNum);
        if (message.AccessoryMallProduct != null && message.hasOwnProperty("AccessoryMallProduct"))
            $root.BuildProduct.encode(message.AccessoryMallProduct, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };
    BuildProduct.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildProduct.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildProduct();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.startTime = reader.int64();
                break;
            case 2:
                message.notGetNum = reader.int32();
                break;
            case 3:
                message.isCritical = reader.int32();
                break;
            case 4:
                message.itemId = reader.int32();
                break;
            case 5:
                message.GetNum = reader.int32();
                break;
            case 6:
                message.AccessoryMallProduct = $root.BuildProduct.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildProduct.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildProduct.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
                return "startTime: integer|Long expected";
        if (message.notGetNum != null && message.hasOwnProperty("notGetNum"))
            if (!$util.isInteger(message.notGetNum))
                return "notGetNum: integer expected";
        if (message.isCritical != null && message.hasOwnProperty("isCritical"))
            if (!$util.isInteger(message.isCritical))
                return "isCritical: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        if (message.GetNum != null && message.hasOwnProperty("GetNum"))
            if (!$util.isInteger(message.GetNum))
                return "GetNum: integer expected";
        if (message.AccessoryMallProduct != null && message.hasOwnProperty("AccessoryMallProduct")) {
            var error = $root.BuildProduct.verify(message.AccessoryMallProduct);
            if (error)
                return "AccessoryMallProduct." + error;
        }
        return null;
    };
    BuildProduct.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildProduct)
            return object;
        var message = new $root.BuildProduct();
        if (object.startTime != null)
            if ($util.Long)
                (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = false;
            else if (typeof object.startTime === "string")
                message.startTime = parseInt(object.startTime, 10);
            else if (typeof object.startTime === "number")
                message.startTime = object.startTime;
            else if (typeof object.startTime === "object")
                message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber();
        if (object.notGetNum != null)
            message.notGetNum = object.notGetNum | 0;
        if (object.isCritical != null)
            message.isCritical = object.isCritical | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        if (object.GetNum != null)
            message.GetNum = object.GetNum | 0;
        if (object.AccessoryMallProduct != null) {
            if (typeof object.AccessoryMallProduct !== "object")
                throw TypeError(".BuildProduct.AccessoryMallProduct: object expected");
            message.AccessoryMallProduct = $root.BuildProduct.fromObject(object.AccessoryMallProduct);
        }
        return message;
    };
    BuildProduct.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.startTime = options.longs === String ? "0" : 0;
            object.notGetNum = 0;
            object.isCritical = 0;
            object.itemId = 0;
            object.GetNum = 0;
            object.AccessoryMallProduct = null;
        }
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (typeof message.startTime === "number")
                object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
            else
                object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber() : message.startTime;
        if (message.notGetNum != null && message.hasOwnProperty("notGetNum"))
            object.notGetNum = message.notGetNum;
        if (message.isCritical != null && message.hasOwnProperty("isCritical"))
            object.isCritical = message.isCritical;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        if (message.GetNum != null && message.hasOwnProperty("GetNum"))
            object.GetNum = message.GetNum;
        if (message.AccessoryMallProduct != null && message.hasOwnProperty("AccessoryMallProduct"))
            object.AccessoryMallProduct = $root.BuildProduct.toObject(message.AccessoryMallProduct, options);
        return object;
    };
    BuildProduct.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildProduct;
})();
$root.BuildActorCell = (function() {
    function BuildActorCell(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildActorCell.prototype.cellId = 0;
    BuildActorCell.prototype.actorId = 0;
    BuildActorCell.create = function create(properties) {
        return new BuildActorCell(properties);
    };
    BuildActorCell.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cellId != null && message.hasOwnProperty("cellId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cellId);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        return writer;
    };
    BuildActorCell.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildActorCell.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildActorCell();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.cellId = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildActorCell.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildActorCell.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cellId != null && message.hasOwnProperty("cellId"))
            if (!$util.isInteger(message.cellId))
                return "cellId: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    BuildActorCell.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildActorCell)
            return object;
        var message = new $root.BuildActorCell();
        if (object.cellId != null)
            message.cellId = object.cellId | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    BuildActorCell.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.cellId = 0;
            object.actorId = 0;
        }
        if (message.cellId != null && message.hasOwnProperty("cellId"))
            object.cellId = message.cellId;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    BuildActorCell.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildActorCell;
})();
$root.BuildEffect = (function() {
    function BuildEffect(properties) {
        this.assistancecard = [];
        this.giftbox = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    BuildEffect.prototype.reserve = 0;
    BuildEffect.prototype.reserveMax = 0;
    BuildEffect.prototype.produceCd = 0;
    BuildEffect.prototype.produceNum = 0;
    BuildEffect.prototype.buildingCd = 0;
    BuildEffect.prototype.playDay = 0;
    BuildEffect.prototype.recruitProbability = 0;
    BuildEffect.prototype.criticalHitChance = 0;
    BuildEffect.prototype.critEffect = 0;
    BuildEffect.prototype.audienceRatings = 0;
    BuildEffect.prototype.followUp = 0;
    BuildEffect.prototype.event = 0;
    BuildEffect.prototype.script = 0;
    BuildEffect.prototype.assistancecard = $util.emptyArray;
    BuildEffect.prototype.giftbox = $util.emptyArray;
    BuildEffect.create = function create(properties) {
        return new BuildEffect(properties);
    };
    BuildEffect.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.reserve != null && message.hasOwnProperty("reserve"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.reserve);
        if (message.reserveMax != null && message.hasOwnProperty("reserveMax"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reserveMax);
        if (message.produceCd != null && message.hasOwnProperty("produceCd"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.produceCd);
        if (message.produceNum != null && message.hasOwnProperty("produceNum"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.produceNum);
        if (message.buildingCd != null && message.hasOwnProperty("buildingCd"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.buildingCd);
        if (message.playDay != null && message.hasOwnProperty("playDay"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.playDay);
        if (message.recruitProbability != null && message.hasOwnProperty("recruitProbability"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.recruitProbability);
        if (message.criticalHitChance != null && message.hasOwnProperty("criticalHitChance"))
            writer.uint32(/* id 8, wireType 5 =*/69).float(message.criticalHitChance);
        if (message.critEffect != null && message.hasOwnProperty("critEffect"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.critEffect);
        if (message.audienceRatings != null && message.hasOwnProperty("audienceRatings"))
            writer.uint32(/* id 10, wireType 5 =*/85).float(message.audienceRatings);
        if (message.followUp != null && message.hasOwnProperty("followUp"))
            writer.uint32(/* id 11, wireType 5 =*/93).float(message.followUp);
        if (message.event != null && message.hasOwnProperty("event"))
            writer.uint32(/* id 12, wireType 5 =*/101).float(message.event);
        if (message.script != null && message.hasOwnProperty("script"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.script);
        if (message.assistancecard != null && message.assistancecard.length)
            for (var i = 0; i < message.assistancecard.length; ++i)
                $root.assistanceCard.encode(message.assistancecard[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.giftbox != null && message.giftbox.length)
            for (var i = 0; i < message.giftbox.length; ++i)
                $root.giftBox.encode(message.giftbox[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        return writer;
    };
    BuildEffect.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    BuildEffect.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BuildEffect();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.reserve = reader.int32();
                break;
            case 2:
                message.reserveMax = reader.int32();
                break;
            case 3:
                message.produceCd = reader.int32();
                break;
            case 4:
                message.produceNum = reader.int32();
                break;
            case 5:
                message.buildingCd = reader.int32();
                break;
            case 6:
                message.playDay = reader.int32();
                break;
            case 7:
                message.recruitProbability = reader.float();
                break;
            case 8:
                message.criticalHitChance = reader.float();
                break;
            case 9:
                message.critEffect = reader.float();
                break;
            case 10:
                message.audienceRatings = reader.float();
                break;
            case 11:
                message.followUp = reader.float();
                break;
            case 12:
                message.event = reader.float();
                break;
            case 13:
                message.script = reader.int32();
                break;
            case 14:
                if (!(message.assistancecard && message.assistancecard.length))
                    message.assistancecard = [];
                message.assistancecard.push($root.assistanceCard.decode(reader, reader.uint32()));
                break;
            case 15:
                if (!(message.giftbox && message.giftbox.length))
                    message.giftbox = [];
                message.giftbox.push($root.giftBox.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    BuildEffect.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    BuildEffect.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.reserve != null && message.hasOwnProperty("reserve"))
            if (!$util.isInteger(message.reserve))
                return "reserve: integer expected";
        if (message.reserveMax != null && message.hasOwnProperty("reserveMax"))
            if (!$util.isInteger(message.reserveMax))
                return "reserveMax: integer expected";
        if (message.produceCd != null && message.hasOwnProperty("produceCd"))
            if (!$util.isInteger(message.produceCd))
                return "produceCd: integer expected";
        if (message.produceNum != null && message.hasOwnProperty("produceNum"))
            if (!$util.isInteger(message.produceNum))
                return "produceNum: integer expected";
        if (message.buildingCd != null && message.hasOwnProperty("buildingCd"))
            if (!$util.isInteger(message.buildingCd))
                return "buildingCd: integer expected";
        if (message.playDay != null && message.hasOwnProperty("playDay"))
            if (!$util.isInteger(message.playDay))
                return "playDay: integer expected";
        if (message.recruitProbability != null && message.hasOwnProperty("recruitProbability"))
            if (typeof message.recruitProbability !== "number")
                return "recruitProbability: number expected";
        if (message.criticalHitChance != null && message.hasOwnProperty("criticalHitChance"))
            if (typeof message.criticalHitChance !== "number")
                return "criticalHitChance: number expected";
        if (message.critEffect != null && message.hasOwnProperty("critEffect"))
            if (typeof message.critEffect !== "number")
                return "critEffect: number expected";
        if (message.audienceRatings != null && message.hasOwnProperty("audienceRatings"))
            if (typeof message.audienceRatings !== "number")
                return "audienceRatings: number expected";
        if (message.followUp != null && message.hasOwnProperty("followUp"))
            if (typeof message.followUp !== "number")
                return "followUp: number expected";
        if (message.event != null && message.hasOwnProperty("event"))
            if (typeof message.event !== "number")
                return "event: number expected";
        if (message.script != null && message.hasOwnProperty("script"))
            if (!$util.isInteger(message.script))
                return "script: integer expected";
        if (message.assistancecard != null && message.hasOwnProperty("assistancecard")) {
            if (!Array.isArray(message.assistancecard))
                return "assistancecard: array expected";
            for (var i = 0; i < message.assistancecard.length; ++i) {
                var error = $root.assistanceCard.verify(message.assistancecard[i]);
                if (error)
                    return "assistancecard." + error;
            }
        }
        if (message.giftbox != null && message.hasOwnProperty("giftbox")) {
            if (!Array.isArray(message.giftbox))
                return "giftbox: array expected";
            for (var i = 0; i < message.giftbox.length; ++i) {
                var error = $root.giftBox.verify(message.giftbox[i]);
                if (error)
                    return "giftbox." + error;
            }
        }
        return null;
    };
    BuildEffect.fromObject = function fromObject(object) {
        if (object instanceof $root.BuildEffect)
            return object;
        var message = new $root.BuildEffect();
        if (object.reserve != null)
            message.reserve = object.reserve | 0;
        if (object.reserveMax != null)
            message.reserveMax = object.reserveMax | 0;
        if (object.produceCd != null)
            message.produceCd = object.produceCd | 0;
        if (object.produceNum != null)
            message.produceNum = object.produceNum | 0;
        if (object.buildingCd != null)
            message.buildingCd = object.buildingCd | 0;
        if (object.playDay != null)
            message.playDay = object.playDay | 0;
        if (object.recruitProbability != null)
            message.recruitProbability = Number(object.recruitProbability);
        if (object.criticalHitChance != null)
            message.criticalHitChance = Number(object.criticalHitChance);
        if (object.critEffect != null)
            message.critEffect = Number(object.critEffect);
        if (object.audienceRatings != null)
            message.audienceRatings = Number(object.audienceRatings);
        if (object.followUp != null)
            message.followUp = Number(object.followUp);
        if (object.event != null)
            message.event = Number(object.event);
        if (object.script != null)
            message.script = object.script | 0;
        if (object.assistancecard) {
            if (!Array.isArray(object.assistancecard))
                throw TypeError(".BuildEffect.assistancecard: array expected");
            message.assistancecard = [];
            for (var i = 0; i < object.assistancecard.length; ++i) {
                if (typeof object.assistancecard[i] !== "object")
                    throw TypeError(".BuildEffect.assistancecard: object expected");
                message.assistancecard[i] = $root.assistanceCard.fromObject(object.assistancecard[i]);
            }
        }
        if (object.giftbox) {
            if (!Array.isArray(object.giftbox))
                throw TypeError(".BuildEffect.giftbox: array expected");
            message.giftbox = [];
            for (var i = 0; i < object.giftbox.length; ++i) {
                if (typeof object.giftbox[i] !== "object")
                    throw TypeError(".BuildEffect.giftbox: object expected");
                message.giftbox[i] = $root.giftBox.fromObject(object.giftbox[i]);
            }
        }
        return message;
    };
    BuildEffect.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.assistancecard = [];
            object.giftbox = [];
        }
        if (options.defaults) {
            object.reserve = 0;
            object.reserveMax = 0;
            object.produceCd = 0;
            object.produceNum = 0;
            object.buildingCd = 0;
            object.playDay = 0;
            object.recruitProbability = 0;
            object.criticalHitChance = 0;
            object.critEffect = 0;
            object.audienceRatings = 0;
            object.followUp = 0;
            object.event = 0;
            object.script = 0;
        }
        if (message.reserve != null && message.hasOwnProperty("reserve"))
            object.reserve = message.reserve;
        if (message.reserveMax != null && message.hasOwnProperty("reserveMax"))
            object.reserveMax = message.reserveMax;
        if (message.produceCd != null && message.hasOwnProperty("produceCd"))
            object.produceCd = message.produceCd;
        if (message.produceNum != null && message.hasOwnProperty("produceNum"))
            object.produceNum = message.produceNum;
        if (message.buildingCd != null && message.hasOwnProperty("buildingCd"))
            object.buildingCd = message.buildingCd;
        if (message.playDay != null && message.hasOwnProperty("playDay"))
            object.playDay = message.playDay;
        if (message.recruitProbability != null && message.hasOwnProperty("recruitProbability"))
            object.recruitProbability = options.json && !isFinite(message.recruitProbability) ? String(message.recruitProbability) : message.recruitProbability;
        if (message.criticalHitChance != null && message.hasOwnProperty("criticalHitChance"))
            object.criticalHitChance = options.json && !isFinite(message.criticalHitChance) ? String(message.criticalHitChance) : message.criticalHitChance;
        if (message.critEffect != null && message.hasOwnProperty("critEffect"))
            object.critEffect = options.json && !isFinite(message.critEffect) ? String(message.critEffect) : message.critEffect;
        if (message.audienceRatings != null && message.hasOwnProperty("audienceRatings"))
            object.audienceRatings = options.json && !isFinite(message.audienceRatings) ? String(message.audienceRatings) : message.audienceRatings;
        if (message.followUp != null && message.hasOwnProperty("followUp"))
            object.followUp = options.json && !isFinite(message.followUp) ? String(message.followUp) : message.followUp;
        if (message.event != null && message.hasOwnProperty("event"))
            object.event = options.json && !isFinite(message.event) ? String(message.event) : message.event;
        if (message.script != null && message.hasOwnProperty("script"))
            object.script = message.script;
        if (message.assistancecard && message.assistancecard.length) {
            object.assistancecard = [];
            for (var j = 0; j < message.assistancecard.length; ++j)
                object.assistancecard[j] = $root.assistanceCard.toObject(message.assistancecard[j], options);
        }
        if (message.giftbox && message.giftbox.length) {
            object.giftbox = [];
            for (var j = 0; j < message.giftbox.length; ++j)
                object.giftbox[j] = $root.giftBox.toObject(message.giftbox[j], options);
        }
        return object;
    };
    BuildEffect.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return BuildEffect;
})();
$root.assistanceCard = (function() {
    function assistanceCard(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    assistanceCard.prototype.actorId = 0;
    assistanceCard.prototype.itemId = 0;
    assistanceCard.create = function create(properties) {
        return new assistanceCard(properties);
    };
    assistanceCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.actorId);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        return writer;
    };
    assistanceCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    assistanceCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.assistanceCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.actorId = reader.int32();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    assistanceCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    assistanceCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        return null;
    };
    assistanceCard.fromObject = function fromObject(object) {
        if (object instanceof $root.assistanceCard)
            return object;
        var message = new $root.assistanceCard();
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        return message;
    };
    assistanceCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.actorId = 0;
            object.itemId = 0;
        }
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        return object;
    };
    assistanceCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return assistanceCard;
})();
$root.giftBox = (function() {
    function giftBox(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    giftBox.prototype.probability = 0;
    giftBox.prototype.itemId = 0;
    giftBox.create = function create(properties) {
        return new giftBox(properties);
    };
    giftBox.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.probability != null && message.hasOwnProperty("probability"))
            writer.uint32(/* id 1, wireType 5 =*/13).float(message.probability);
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.itemId);
        return writer;
    };
    giftBox.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    giftBox.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.giftBox();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.probability = reader.float();
                break;
            case 2:
                message.itemId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    giftBox.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    giftBox.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.probability != null && message.hasOwnProperty("probability"))
            if (typeof message.probability !== "number")
                return "probability: number expected";
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            if (!$util.isInteger(message.itemId))
                return "itemId: integer expected";
        return null;
    };
    giftBox.fromObject = function fromObject(object) {
        if (object instanceof $root.giftBox)
            return object;
        var message = new $root.giftBox();
        if (object.probability != null)
            message.probability = Number(object.probability);
        if (object.itemId != null)
            message.itemId = object.itemId | 0;
        return message;
    };
    giftBox.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.probability = 0;
            object.itemId = 0;
        }
        if (message.probability != null && message.hasOwnProperty("probability"))
            object.probability = options.json && !isFinite(message.probability) ? String(message.probability) : message.probability;
        if (message.itemId != null && message.hasOwnProperty("itemId"))
            object.itemId = message.itemId;
        return object;
    };
    giftBox.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return giftBox;
})();
$root.Story = (function() {
    function Story(properties) {
        this.eventList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Story.prototype.storyType = 0;
    Story.prototype.storySeriesId = 0;
    Story.prototype.storyId = 0;
    Story.prototype.storyName = "";
    Story.prototype.eventNum = 0;
    Story.prototype.labelStar = 0;
    Story.prototype.maxAudienceRatings = 0;
    Story.prototype.maxScore = 0;
    Story.prototype.eventList = $util.emptyArray;
    Story.prototype.id = 0;
    Story.create = function create(properties) {
        return new Story(properties);
    };
    Story.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.storyType);
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storySeriesId);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.storyId);
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.storyName);
        if (message.eventNum != null && message.hasOwnProperty("eventNum"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.eventNum);
        if (message.labelStar != null && message.hasOwnProperty("labelStar"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.labelStar);
        if (message.maxAudienceRatings != null && message.hasOwnProperty("maxAudienceRatings"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.maxAudienceRatings);
        if (message.maxScore != null && message.hasOwnProperty("maxScore"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.maxScore);
        if (message.eventList != null && message.eventList.length) {
            writer.uint32(/* id 9, wireType 2 =*/74).fork();
            for (var i = 0; i < message.eventList.length; ++i)
                writer.int32(message.eventList[i]);
            writer.ldelim();
        }
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.id);
        return writer;
    };
    Story.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Story.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Story();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.storyType = reader.int32();
                break;
            case 2:
                message.storySeriesId = reader.int32();
                break;
            case 3:
                message.storyId = reader.int32();
                break;
            case 4:
                message.storyName = reader.string();
                break;
            case 5:
                message.eventNum = reader.int32();
                break;
            case 6:
                message.labelStar = reader.int32();
                break;
            case 7:
                message.maxAudienceRatings = reader.int32();
                break;
            case 8:
                message.maxScore = reader.int32();
                break;
            case 9:
                if (!(message.eventList && message.eventList.length))
                    message.eventList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.eventList.push(reader.int32());
                } else
                    message.eventList.push(reader.int32());
                break;
            case 10:
                message.id = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Story.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Story.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            switch (message.storyType) {
            default:
                return "storyType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            if (!$util.isInteger(message.storySeriesId))
                return "storySeriesId: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            if (!$util.isString(message.storyName))
                return "storyName: string expected";
        if (message.eventNum != null && message.hasOwnProperty("eventNum"))
            if (!$util.isInteger(message.eventNum))
                return "eventNum: integer expected";
        if (message.labelStar != null && message.hasOwnProperty("labelStar"))
            if (!$util.isInteger(message.labelStar))
                return "labelStar: integer expected";
        if (message.maxAudienceRatings != null && message.hasOwnProperty("maxAudienceRatings"))
            if (!$util.isInteger(message.maxAudienceRatings))
                return "maxAudienceRatings: integer expected";
        if (message.maxScore != null && message.hasOwnProperty("maxScore"))
            if (!$util.isInteger(message.maxScore))
                return "maxScore: integer expected";
        if (message.eventList != null && message.hasOwnProperty("eventList")) {
            if (!Array.isArray(message.eventList))
                return "eventList: array expected";
            for (var i = 0; i < message.eventList.length; ++i)
                if (!$util.isInteger(message.eventList[i]))
                    return "eventList: integer[] expected";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        return null;
    };
    Story.fromObject = function fromObject(object) {
        if (object instanceof $root.Story)
            return object;
        var message = new $root.Story();
        switch (object.storyType) {
        case "StudioStoryType_Invalid":
        case 0:
            message.storyType = 0;
            break;
        case "StudioStoryType_Normal":
        case 1:
            message.storyType = 1;
            break;
        case "StudioStoryType_gold":
        case 2:
            message.storyType = 2;
            break;
        }
        if (object.storySeriesId != null)
            message.storySeriesId = object.storySeriesId | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.storyName != null)
            message.storyName = String(object.storyName);
        if (object.eventNum != null)
            message.eventNum = object.eventNum | 0;
        if (object.labelStar != null)
            message.labelStar = object.labelStar | 0;
        if (object.maxAudienceRatings != null)
            message.maxAudienceRatings = object.maxAudienceRatings | 0;
        if (object.maxScore != null)
            message.maxScore = object.maxScore | 0;
        if (object.eventList) {
            if (!Array.isArray(object.eventList))
                throw TypeError(".Story.eventList: array expected");
            message.eventList = [];
            for (var i = 0; i < object.eventList.length; ++i)
                message.eventList[i] = object.eventList[i] | 0;
        }
        if (object.id != null)
            message.id = object.id | 0;
        return message;
    };
    Story.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.eventList = [];
        if (options.defaults) {
            object.storyType = options.enums === String ? "StudioStoryType_Invalid" : 0;
            object.storySeriesId = 0;
            object.storyId = 0;
            object.storyName = "";
            object.eventNum = 0;
            object.labelStar = 0;
            object.maxAudienceRatings = 0;
            object.maxScore = 0;
            object.id = 0;
        }
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            object.storyType = options.enums === String ? $root.StudioStoryType[message.storyType] : message.storyType;
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            object.storySeriesId = message.storySeriesId;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            object.storyName = message.storyName;
        if (message.eventNum != null && message.hasOwnProperty("eventNum"))
            object.eventNum = message.eventNum;
        if (message.labelStar != null && message.hasOwnProperty("labelStar"))
            object.labelStar = message.labelStar;
        if (message.maxAudienceRatings != null && message.hasOwnProperty("maxAudienceRatings"))
            object.maxAudienceRatings = message.maxAudienceRatings;
        if (message.maxScore != null && message.hasOwnProperty("maxScore"))
            object.maxScore = message.maxScore;
        if (message.eventList && message.eventList.length) {
            object.eventList = [];
            for (var j = 0; j < message.eventList.length; ++j)
                object.eventList[j] = message.eventList[j];
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        return object;
    };
    Story.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Story;
})();
$root.StoryComment = (function() {
    function StoryComment(properties) {
        this.likeId = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StoryComment.prototype.id = 0;
    StoryComment.prototype.storySeriesId = 0;
    StoryComment.prototype.name = "";
    StoryComment.prototype.content = "";
    StoryComment.prototype.likeCount = 0;
    StoryComment.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    StoryComment.prototype.likeId = $util.emptyArray;
    StoryComment.prototype.isLike = false;
    StoryComment.create = function create(properties) {
        return new StoryComment(properties);
    };
    StoryComment.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storySeriesId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.content != null && message.hasOwnProperty("content"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.content);
        if (message.likeCount != null && message.hasOwnProperty("likeCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.likeCount);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.time);
        if (message.likeId != null && message.likeId.length) {
            writer.uint32(/* id 7, wireType 2 =*/58).fork();
            for (var i = 0; i < message.likeId.length; ++i)
                writer.int32(message.likeId[i]);
            writer.ldelim();
        }
        if (message.isLike != null && message.hasOwnProperty("isLike"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isLike);
        return writer;
    };
    StoryComment.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StoryComment.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StoryComment();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.storySeriesId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            case 4:
                message.content = reader.string();
                break;
            case 5:
                message.likeCount = reader.int32();
                break;
            case 6:
                message.time = reader.int64();
                break;
            case 7:
                if (!(message.likeId && message.likeId.length))
                    message.likeId = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.likeId.push(reader.int32());
                } else
                    message.likeId.push(reader.int32());
                break;
            case 8:
                message.isLike = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StoryComment.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StoryComment.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            if (!$util.isInteger(message.storySeriesId))
                return "storySeriesId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.likeCount != null && message.hasOwnProperty("likeCount"))
            if (!$util.isInteger(message.likeCount))
                return "likeCount: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                return "time: integer|Long expected";
        if (message.likeId != null && message.hasOwnProperty("likeId")) {
            if (!Array.isArray(message.likeId))
                return "likeId: array expected";
            for (var i = 0; i < message.likeId.length; ++i)
                if (!$util.isInteger(message.likeId[i]))
                    return "likeId: integer[] expected";
        }
        if (message.isLike != null && message.hasOwnProperty("isLike"))
            if (typeof message.isLike !== "boolean")
                return "isLike: boolean expected";
        return null;
    };
    StoryComment.fromObject = function fromObject(object) {
        if (object instanceof $root.StoryComment)
            return object;
        var message = new $root.StoryComment();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.storySeriesId != null)
            message.storySeriesId = object.storySeriesId | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.content != null)
            message.content = String(object.content);
        if (object.likeCount != null)
            message.likeCount = object.likeCount | 0;
        if (object.time != null)
            if ($util.Long)
                (message.time = $util.Long.fromValue(object.time)).unsigned = false;
            else if (typeof object.time === "string")
                message.time = parseInt(object.time, 10);
            else if (typeof object.time === "number")
                message.time = object.time;
            else if (typeof object.time === "object")
                message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
        if (object.likeId) {
            if (!Array.isArray(object.likeId))
                throw TypeError(".StoryComment.likeId: array expected");
            message.likeId = [];
            for (var i = 0; i < object.likeId.length; ++i)
                message.likeId[i] = object.likeId[i] | 0;
        }
        if (object.isLike != null)
            message.isLike = Boolean(object.isLike);
        return message;
    };
    StoryComment.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.likeId = [];
        if (options.defaults) {
            object.id = 0;
            object.storySeriesId = 0;
            object.name = "";
            object.content = "";
            object.likeCount = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.time = options.longs === String ? "0" : 0;
            object.isLike = false;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            object.storySeriesId = message.storySeriesId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.likeCount != null && message.hasOwnProperty("likeCount"))
            object.likeCount = message.likeCount;
        if (message.time != null && message.hasOwnProperty("time"))
            if (typeof message.time === "number")
                object.time = options.longs === String ? String(message.time) : message.time;
            else
                object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
        if (message.likeId && message.likeId.length) {
            object.likeId = [];
            for (var j = 0; j < message.likeId.length; ++j)
                object.likeId[j] = message.likeId[j];
        }
        if (message.isLike != null && message.hasOwnProperty("isLike"))
            object.isLike = message.isLike;
        return object;
    };
    StoryComment.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StoryComment;
})();
$root.StudioStory = (function() {
    function StudioStory(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioStory.prototype.storyType = 0;
    StudioStory.prototype.storySeriesId = 0;
    StudioStory.prototype.storyId = 0;
    StudioStory.prototype.storyName = "";
    StudioStory.prototype.expect = 0;
    StudioStory.prototype.eventNum = 0;
    StudioStory.prototype.season = 0;
    StudioStory.prototype.episode = 0;
    StudioStory.create = function create(properties) {
        return new StudioStory(properties);
    };
    StudioStory.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.storyType);
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storySeriesId);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.storyId);
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.storyName);
        if (message.expect != null && message.hasOwnProperty("expect"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.expect);
        if (message.eventNum != null && message.hasOwnProperty("eventNum"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.eventNum);
        if (message.season != null && message.hasOwnProperty("season"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.season);
        if (message.episode != null && message.hasOwnProperty("episode"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.episode);
        return writer;
    };
    StudioStory.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioStory.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioStory();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.storyType = reader.int32();
                break;
            case 2:
                message.storySeriesId = reader.int32();
                break;
            case 3:
                message.storyId = reader.int32();
                break;
            case 4:
                message.storyName = reader.string();
                break;
            case 5:
                message.expect = reader.float();
                break;
            case 6:
                message.eventNum = reader.int32();
                break;
            case 7:
                message.season = reader.int32();
                break;
            case 8:
                message.episode = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioStory.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioStory.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            switch (message.storyType) {
            default:
                return "storyType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            if (!$util.isInteger(message.storySeriesId))
                return "storySeriesId: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            if (!$util.isString(message.storyName))
                return "storyName: string expected";
        if (message.expect != null && message.hasOwnProperty("expect"))
            if (typeof message.expect !== "number")
                return "expect: number expected";
        if (message.eventNum != null && message.hasOwnProperty("eventNum"))
            if (!$util.isInteger(message.eventNum))
                return "eventNum: integer expected";
        if (message.season != null && message.hasOwnProperty("season"))
            if (!$util.isInteger(message.season))
                return "season: integer expected";
        if (message.episode != null && message.hasOwnProperty("episode"))
            if (!$util.isInteger(message.episode))
                return "episode: integer expected";
        return null;
    };
    StudioStory.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioStory)
            return object;
        var message = new $root.StudioStory();
        switch (object.storyType) {
        case "StudioStoryType_Invalid":
        case 0:
            message.storyType = 0;
            break;
        case "StudioStoryType_Normal":
        case 1:
            message.storyType = 1;
            break;
        case "StudioStoryType_gold":
        case 2:
            message.storyType = 2;
            break;
        }
        if (object.storySeriesId != null)
            message.storySeriesId = object.storySeriesId | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.storyName != null)
            message.storyName = String(object.storyName);
        if (object.expect != null)
            message.expect = Number(object.expect);
        if (object.eventNum != null)
            message.eventNum = object.eventNum | 0;
        if (object.season != null)
            message.season = object.season | 0;
        if (object.episode != null)
            message.episode = object.episode | 0;
        return message;
    };
    StudioStory.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.storyType = options.enums === String ? "StudioStoryType_Invalid" : 0;
            object.storySeriesId = 0;
            object.storyId = 0;
            object.storyName = "";
            object.expect = 0;
            object.eventNum = 0;
            object.season = 0;
            object.episode = 0;
        }
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            object.storyType = options.enums === String ? $root.StudioStoryType[message.storyType] : message.storyType;
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            object.storySeriesId = message.storySeriesId;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            object.storyName = message.storyName;
        if (message.expect != null && message.hasOwnProperty("expect"))
            object.expect = options.json && !isFinite(message.expect) ? String(message.expect) : message.expect;
        if (message.eventNum != null && message.hasOwnProperty("eventNum"))
            object.eventNum = message.eventNum;
        if (message.season != null && message.hasOwnProperty("season"))
            object.season = message.season;
        if (message.episode != null && message.hasOwnProperty("episode"))
            object.episode = message.episode;
        return object;
    };
    StudioStory.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioStory;
})();
$root.StudioActor = (function() {
    function StudioActor(properties) {
        this.matchingLabels = [];
        this.matchingProps = [];
        this.scoreProps = [];
        this.skills = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioActor.prototype.storyCharactersId = 0;
    StudioActor.prototype.actorId = 0;
    StudioActor.prototype.name = "";
    StudioActor.prototype.cost = 0;
    StudioActor.prototype.actorState = 0;
    StudioActor.prototype.isMvp = false;
    StudioActor.prototype.matchingLabels = $util.emptyArray;
    StudioActor.prototype.matchingProps = $util.emptyArray;
    StudioActor.prototype.scoreProps = $util.emptyArray;
    StudioActor.prototype.skills = $util.emptyArray;
    StudioActor.prototype.normalScoreTotal = 0;
    StudioActor.create = function create(properties) {
        return new StudioActor(properties);
    };
    StudioActor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.storyCharactersId);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.cost != null && message.hasOwnProperty("cost"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cost);
        if (message.actorState != null && message.hasOwnProperty("actorState"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.actorState);
        if (message.isMvp != null && message.hasOwnProperty("isMvp"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isMvp);
        if (message.matchingLabels != null && message.matchingLabels.length) {
            writer.uint32(/* id 7, wireType 2 =*/58).fork();
            for (var i = 0; i < message.matchingLabels.length; ++i)
                writer.int32(message.matchingLabels[i]);
            writer.ldelim();
        }
        if (message.matchingProps != null && message.matchingProps.length)
            for (var i = 0; i < message.matchingProps.length; ++i)
                $root.StudioActorProp.encode(message.matchingProps[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.scoreProps != null && message.scoreProps.length)
            for (var i = 0; i < message.scoreProps.length; ++i)
                $root.StudioActorProp.encode(message.scoreProps[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.skills != null && message.skills.length)
            for (var i = 0; i < message.skills.length; ++i)
                $root.StudioActorSkill.encode(message.skills[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.normalScoreTotal != null && message.hasOwnProperty("normalScoreTotal"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.normalScoreTotal);
        return writer;
    };
    StudioActor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioActor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioActor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.storyCharactersId = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            case 3:
                message.name = reader.string();
                break;
            case 4:
                message.cost = reader.int32();
                break;
            case 5:
                message.actorState = reader.int32();
                break;
            case 6:
                message.isMvp = reader.bool();
                break;
            case 7:
                if (!(message.matchingLabels && message.matchingLabels.length))
                    message.matchingLabels = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.matchingLabels.push(reader.int32());
                } else
                    message.matchingLabels.push(reader.int32());
                break;
            case 8:
                if (!(message.matchingProps && message.matchingProps.length))
                    message.matchingProps = [];
                message.matchingProps.push($root.StudioActorProp.decode(reader, reader.uint32()));
                break;
            case 9:
                if (!(message.scoreProps && message.scoreProps.length))
                    message.scoreProps = [];
                message.scoreProps.push($root.StudioActorProp.decode(reader, reader.uint32()));
                break;
            case 10:
                if (!(message.skills && message.skills.length))
                    message.skills = [];
                message.skills.push($root.StudioActorSkill.decode(reader, reader.uint32()));
                break;
            case 11:
                message.normalScoreTotal = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioActor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioActor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            if (!$util.isInteger(message.storyCharactersId))
                return "storyCharactersId: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.cost != null && message.hasOwnProperty("cost"))
            if (!$util.isInteger(message.cost))
                return "cost: integer expected";
        if (message.actorState != null && message.hasOwnProperty("actorState"))
            switch (message.actorState) {
            default:
                return "actorState: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.isMvp != null && message.hasOwnProperty("isMvp"))
            if (typeof message.isMvp !== "boolean")
                return "isMvp: boolean expected";
        if (message.matchingLabels != null && message.hasOwnProperty("matchingLabels")) {
            if (!Array.isArray(message.matchingLabels))
                return "matchingLabels: array expected";
            for (var i = 0; i < message.matchingLabels.length; ++i)
                if (!$util.isInteger(message.matchingLabels[i]))
                    return "matchingLabels: integer[] expected";
        }
        if (message.matchingProps != null && message.hasOwnProperty("matchingProps")) {
            if (!Array.isArray(message.matchingProps))
                return "matchingProps: array expected";
            for (var i = 0; i < message.matchingProps.length; ++i) {
                var error = $root.StudioActorProp.verify(message.matchingProps[i]);
                if (error)
                    return "matchingProps." + error;
            }
        }
        if (message.scoreProps != null && message.hasOwnProperty("scoreProps")) {
            if (!Array.isArray(message.scoreProps))
                return "scoreProps: array expected";
            for (var i = 0; i < message.scoreProps.length; ++i) {
                var error = $root.StudioActorProp.verify(message.scoreProps[i]);
                if (error)
                    return "scoreProps." + error;
            }
        }
        if (message.skills != null && message.hasOwnProperty("skills")) {
            if (!Array.isArray(message.skills))
                return "skills: array expected";
            for (var i = 0; i < message.skills.length; ++i) {
                var error = $root.StudioActorSkill.verify(message.skills[i]);
                if (error)
                    return "skills." + error;
            }
        }
        if (message.normalScoreTotal != null && message.hasOwnProperty("normalScoreTotal"))
            if (!$util.isInteger(message.normalScoreTotal))
                return "normalScoreTotal: integer expected";
        return null;
    };
    StudioActor.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioActor)
            return object;
        var message = new $root.StudioActor();
        if (object.storyCharactersId != null)
            message.storyCharactersId = object.storyCharactersId | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.cost != null)
            message.cost = object.cost | 0;
        switch (object.actorState) {
        case "ActorStateInvalid":
        case 0:
            message.actorState = 0;
            break;
        case "normal":
        case 1:
            message.actorState = 1;
            break;
        case "help":
        case 2:
            message.actorState = 2;
            break;
        case "best":
        case 3:
            message.actorState = 3;
            break;
        }
        if (object.isMvp != null)
            message.isMvp = Boolean(object.isMvp);
        if (object.matchingLabels) {
            if (!Array.isArray(object.matchingLabels))
                throw TypeError(".StudioActor.matchingLabels: array expected");
            message.matchingLabels = [];
            for (var i = 0; i < object.matchingLabels.length; ++i)
                message.matchingLabels[i] = object.matchingLabels[i] | 0;
        }
        if (object.matchingProps) {
            if (!Array.isArray(object.matchingProps))
                throw TypeError(".StudioActor.matchingProps: array expected");
            message.matchingProps = [];
            for (var i = 0; i < object.matchingProps.length; ++i) {
                if (typeof object.matchingProps[i] !== "object")
                    throw TypeError(".StudioActor.matchingProps: object expected");
                message.matchingProps[i] = $root.StudioActorProp.fromObject(object.matchingProps[i]);
            }
        }
        if (object.scoreProps) {
            if (!Array.isArray(object.scoreProps))
                throw TypeError(".StudioActor.scoreProps: array expected");
            message.scoreProps = [];
            for (var i = 0; i < object.scoreProps.length; ++i) {
                if (typeof object.scoreProps[i] !== "object")
                    throw TypeError(".StudioActor.scoreProps: object expected");
                message.scoreProps[i] = $root.StudioActorProp.fromObject(object.scoreProps[i]);
            }
        }
        if (object.skills) {
            if (!Array.isArray(object.skills))
                throw TypeError(".StudioActor.skills: array expected");
            message.skills = [];
            for (var i = 0; i < object.skills.length; ++i) {
                if (typeof object.skills[i] !== "object")
                    throw TypeError(".StudioActor.skills: object expected");
                message.skills[i] = $root.StudioActorSkill.fromObject(object.skills[i]);
            }
        }
        if (object.normalScoreTotal != null)
            message.normalScoreTotal = object.normalScoreTotal | 0;
        return message;
    };
    StudioActor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.matchingLabels = [];
            object.matchingProps = [];
            object.scoreProps = [];
            object.skills = [];
        }
        if (options.defaults) {
            object.storyCharactersId = 0;
            object.actorId = 0;
            object.name = "";
            object.cost = 0;
            object.actorState = options.enums === String ? "ActorStateInvalid" : 0;
            object.isMvp = false;
            object.normalScoreTotal = 0;
        }
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            object.storyCharactersId = message.storyCharactersId;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.cost != null && message.hasOwnProperty("cost"))
            object.cost = message.cost;
        if (message.actorState != null && message.hasOwnProperty("actorState"))
            object.actorState = options.enums === String ? $root.StudioActorState[message.actorState] : message.actorState;
        if (message.isMvp != null && message.hasOwnProperty("isMvp"))
            object.isMvp = message.isMvp;
        if (message.matchingLabels && message.matchingLabels.length) {
            object.matchingLabels = [];
            for (var j = 0; j < message.matchingLabels.length; ++j)
                object.matchingLabels[j] = message.matchingLabels[j];
        }
        if (message.matchingProps && message.matchingProps.length) {
            object.matchingProps = [];
            for (var j = 0; j < message.matchingProps.length; ++j)
                object.matchingProps[j] = $root.StudioActorProp.toObject(message.matchingProps[j], options);
        }
        if (message.scoreProps && message.scoreProps.length) {
            object.scoreProps = [];
            for (var j = 0; j < message.scoreProps.length; ++j)
                object.scoreProps[j] = $root.StudioActorProp.toObject(message.scoreProps[j], options);
        }
        if (message.skills && message.skills.length) {
            object.skills = [];
            for (var j = 0; j < message.skills.length; ++j)
                object.skills[j] = $root.StudioActorSkill.toObject(message.skills[j], options);
        }
        if (message.normalScoreTotal != null && message.hasOwnProperty("normalScoreTotal"))
            object.normalScoreTotal = message.normalScoreTotal;
        return object;
    };
    StudioActor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioActor;
})();
$root.StudioActorHistoryPos = (function() {
    function StudioActorHistoryPos(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioActorHistoryPos.prototype.storyCharactersId = 0;
    StudioActorHistoryPos.prototype.actorId = 0;
    StudioActorHistoryPos.create = function create(properties) {
        return new StudioActorHistoryPos(properties);
    };
    StudioActorHistoryPos.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.storyCharactersId);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.actorId);
        return writer;
    };
    StudioActorHistoryPos.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioActorHistoryPos.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioActorHistoryPos();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.storyCharactersId = reader.int32();
                break;
            case 2:
                message.actorId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioActorHistoryPos.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioActorHistoryPos.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            if (!$util.isInteger(message.storyCharactersId))
                return "storyCharactersId: integer expected";
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        return null;
    };
    StudioActorHistoryPos.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioActorHistoryPos)
            return object;
        var message = new $root.StudioActorHistoryPos();
        if (object.storyCharactersId != null)
            message.storyCharactersId = object.storyCharactersId | 0;
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        return message;
    };
    StudioActorHistoryPos.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.storyCharactersId = 0;
            object.actorId = 0;
        }
        if (message.storyCharactersId != null && message.hasOwnProperty("storyCharactersId"))
            object.storyCharactersId = message.storyCharactersId;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        return object;
    };
    StudioActorHistoryPos.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioActorHistoryPos;
})();
$root.StudioStoryHistory = (function() {
    function StudioStoryHistory(properties) {
        this.actors = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioStoryHistory.prototype.storySeriesId = 0;
    StudioStoryHistory.prototype.story = null;
    StudioStoryHistory.prototype.actors = $util.emptyArray;
    StudioStoryHistory.create = function create(properties) {
        return new StudioStoryHistory(properties);
    };
    StudioStoryHistory.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.storySeriesId);
        if (message.story != null && message.hasOwnProperty("story"))
            $root.StudioStory.encode(message.story, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.actors != null && message.actors.length)
            for (var i = 0; i < message.actors.length; ++i)
                $root.StudioActor.encode(message.actors[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };
    StudioStoryHistory.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioStoryHistory.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioStoryHistory();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.storySeriesId = reader.int32();
                break;
            case 2:
                message.story = $root.StudioStory.decode(reader, reader.uint32());
                break;
            case 3:
                if (!(message.actors && message.actors.length))
                    message.actors = [];
                message.actors.push($root.StudioActor.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioStoryHistory.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioStoryHistory.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            if (!$util.isInteger(message.storySeriesId))
                return "storySeriesId: integer expected";
        if (message.story != null && message.hasOwnProperty("story")) {
            var error = $root.StudioStory.verify(message.story);
            if (error)
                return "story." + error;
        }
        if (message.actors != null && message.hasOwnProperty("actors")) {
            if (!Array.isArray(message.actors))
                return "actors: array expected";
            for (var i = 0; i < message.actors.length; ++i) {
                var error = $root.StudioActor.verify(message.actors[i]);
                if (error)
                    return "actors." + error;
            }
        }
        return null;
    };
    StudioStoryHistory.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioStoryHistory)
            return object;
        var message = new $root.StudioStoryHistory();
        if (object.storySeriesId != null)
            message.storySeriesId = object.storySeriesId | 0;
        if (object.story != null) {
            if (typeof object.story !== "object")
                throw TypeError(".StudioStoryHistory.story: object expected");
            message.story = $root.StudioStory.fromObject(object.story);
        }
        if (object.actors) {
            if (!Array.isArray(object.actors))
                throw TypeError(".StudioStoryHistory.actors: array expected");
            message.actors = [];
            for (var i = 0; i < object.actors.length; ++i) {
                if (typeof object.actors[i] !== "object")
                    throw TypeError(".StudioStoryHistory.actors: object expected");
                message.actors[i] = $root.StudioActor.fromObject(object.actors[i]);
            }
        }
        return message;
    };
    StudioStoryHistory.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.actors = [];
        if (options.defaults) {
            object.storySeriesId = 0;
            object.story = null;
        }
        if (message.storySeriesId != null && message.hasOwnProperty("storySeriesId"))
            object.storySeriesId = message.storySeriesId;
        if (message.story != null && message.hasOwnProperty("story"))
            object.story = $root.StudioStory.toObject(message.story, options);
        if (message.actors && message.actors.length) {
            object.actors = [];
            for (var j = 0; j < message.actors.length; ++j)
                object.actors[j] = $root.StudioActor.toObject(message.actors[j], options);
        }
        return object;
    };
    StudioStoryHistory.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioStoryHistory;
})();
$root.StudioRecentlyStoryList = (function() {
    function StudioRecentlyStoryList(properties) {
        this.list = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioRecentlyStoryList.prototype.list = $util.emptyArray;
    StudioRecentlyStoryList.create = function create(properties) {
        return new StudioRecentlyStoryList(properties);
    };
    StudioRecentlyStoryList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.list != null && message.list.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.list.length; ++i)
                writer.int32(message.list[i]);
            writer.ldelim();
        }
        return writer;
    };
    StudioRecentlyStoryList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioRecentlyStoryList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioRecentlyStoryList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.list && message.list.length))
                    message.list = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.list.push(reader.int32());
                } else
                    message.list.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioRecentlyStoryList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioRecentlyStoryList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.list != null && message.hasOwnProperty("list")) {
            if (!Array.isArray(message.list))
                return "list: array expected";
            for (var i = 0; i < message.list.length; ++i)
                if (!$util.isInteger(message.list[i]))
                    return "list: integer[] expected";
        }
        return null;
    };
    StudioRecentlyStoryList.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioRecentlyStoryList)
            return object;
        var message = new $root.StudioRecentlyStoryList();
        if (object.list) {
            if (!Array.isArray(object.list))
                throw TypeError(".StudioRecentlyStoryList.list: array expected");
            message.list = [];
            for (var i = 0; i < object.list.length; ++i)
                message.list[i] = object.list[i] | 0;
        }
        return message;
    };
    StudioRecentlyStoryList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.list = [];
        if (message.list && message.list.length) {
            object.list = [];
            for (var j = 0; j < message.list.length; ++j)
                object.list[j] = message.list[j];
        }
        return object;
    };
    StudioRecentlyStoryList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioRecentlyStoryList;
})();
$root.StudioActorProp = (function() {
    function StudioActorProp(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioActorProp.prototype.propId = 0;
    StudioActorProp.prototype.propVal = 0;
    StudioActorProp.create = function create(properties) {
        return new StudioActorProp(properties);
    };
    StudioActorProp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.propId != null && message.hasOwnProperty("propId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.propId);
        if (message.propVal != null && message.hasOwnProperty("propVal"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.propVal);
        return writer;
    };
    StudioActorProp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioActorProp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioActorProp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.propId = reader.int32();
                break;
            case 2:
                message.propVal = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioActorProp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioActorProp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.propId != null && message.hasOwnProperty("propId"))
            if (!$util.isInteger(message.propId))
                return "propId: integer expected";
        if (message.propVal != null && message.hasOwnProperty("propVal"))
            if (!$util.isInteger(message.propVal))
                return "propVal: integer expected";
        return null;
    };
    StudioActorProp.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioActorProp)
            return object;
        var message = new $root.StudioActorProp();
        if (object.propId != null)
            message.propId = object.propId | 0;
        if (object.propVal != null)
            message.propVal = object.propVal | 0;
        return message;
    };
    StudioActorProp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.propId = 0;
            object.propVal = 0;
        }
        if (message.propId != null && message.hasOwnProperty("propId"))
            object.propId = message.propId;
        if (message.propVal != null && message.hasOwnProperty("propVal"))
            object.propVal = message.propVal;
        return object;
    };
    StudioActorProp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioActorProp;
})();
$root.StudioActorSkill = (function() {
    function StudioActorSkill(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioActorSkill.prototype.skillId = 0;
    StudioActorSkill.prototype.propId = 0;
    StudioActorSkill.prototype.effectType = 0;
    StudioActorSkill.prototype.effectValue = 0;
    StudioActorSkill.create = function create(properties) {
        return new StudioActorSkill(properties);
    };
    StudioActorSkill.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.skillId);
        if (message.propId != null && message.hasOwnProperty("propId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.propId);
        if (message.effectType != null && message.hasOwnProperty("effectType"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.effectType);
        if (message.effectValue != null && message.hasOwnProperty("effectValue"))
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.effectValue);
        return writer;
    };
    StudioActorSkill.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioActorSkill.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioActorSkill();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.skillId = reader.int32();
                break;
            case 2:
                message.propId = reader.int32();
                break;
            case 3:
                message.effectType = reader.int32();
                break;
            case 4:
                message.effectValue = reader.float();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioActorSkill.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioActorSkill.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            if (!$util.isInteger(message.skillId))
                return "skillId: integer expected";
        if (message.propId != null && message.hasOwnProperty("propId"))
            if (!$util.isInteger(message.propId))
                return "propId: integer expected";
        if (message.effectType != null && message.hasOwnProperty("effectType"))
            if (!$util.isInteger(message.effectType))
                return "effectType: integer expected";
        if (message.effectValue != null && message.hasOwnProperty("effectValue"))
            if (typeof message.effectValue !== "number")
                return "effectValue: number expected";
        return null;
    };
    StudioActorSkill.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioActorSkill)
            return object;
        var message = new $root.StudioActorSkill();
        if (object.skillId != null)
            message.skillId = object.skillId | 0;
        if (object.propId != null)
            message.propId = object.propId | 0;
        if (object.effectType != null)
            message.effectType = object.effectType | 0;
        if (object.effectValue != null)
            message.effectValue = Number(object.effectValue);
        return message;
    };
    StudioActorSkill.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.skillId = 0;
            object.propId = 0;
            object.effectType = 0;
            object.effectValue = 0;
        }
        if (message.skillId != null && message.hasOwnProperty("skillId"))
            object.skillId = message.skillId;
        if (message.propId != null && message.hasOwnProperty("propId"))
            object.propId = message.propId;
        if (message.effectType != null && message.hasOwnProperty("effectType"))
            object.effectType = message.effectType;
        if (message.effectValue != null && message.hasOwnProperty("effectValue"))
            object.effectValue = options.json && !isFinite(message.effectValue) ? String(message.effectValue) : message.effectValue;
        return object;
    };
    StudioActorSkill.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioActorSkill;
})();
$root.StudioEvent = (function() {
    function StudioEvent(properties) {
        this.eventEvaluations = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioEvent.prototype.eventId = 0;
    StudioEvent.prototype.eventType = 0;
    StudioEvent.prototype.actorId = 0;
    StudioEvent.prototype.eventOption = 0;
    StudioEvent.prototype.eventEvaluations = $util.emptyArray;
    StudioEvent.create = function create(properties) {
        return new StudioEvent(properties);
    };
    StudioEvent.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.eventId != null && message.hasOwnProperty("eventId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eventId);
        if (message.eventType != null && message.hasOwnProperty("eventType"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.eventType);
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.actorId);
        if (message.eventOption != null && message.hasOwnProperty("eventOption"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.eventOption);
        if (message.eventEvaluations != null && message.eventEvaluations.length) {
            writer.uint32(/* id 5, wireType 2 =*/42).fork();
            for (var i = 0; i < message.eventEvaluations.length; ++i)
                writer.int32(message.eventEvaluations[i]);
            writer.ldelim();
        }
        return writer;
    };
    StudioEvent.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioEvent.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.eventId = reader.int32();
                break;
            case 2:
                message.eventType = reader.int32();
                break;
            case 3:
                message.actorId = reader.int32();
                break;
            case 4:
                message.eventOption = reader.int32();
                break;
            case 5:
                if (!(message.eventEvaluations && message.eventEvaluations.length))
                    message.eventEvaluations = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.eventEvaluations.push(reader.int32());
                } else
                    message.eventEvaluations.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioEvent.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioEvent.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.eventId != null && message.hasOwnProperty("eventId"))
            if (!$util.isInteger(message.eventId))
                return "eventId: integer expected";
        if (message.eventType != null && message.hasOwnProperty("eventType"))
            switch (message.eventType) {
            default:
                return "eventType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            if (!$util.isInteger(message.actorId))
                return "actorId: integer expected";
        if (message.eventOption != null && message.hasOwnProperty("eventOption"))
            if (!$util.isInteger(message.eventOption))
                return "eventOption: integer expected";
        if (message.eventEvaluations != null && message.hasOwnProperty("eventEvaluations")) {
            if (!Array.isArray(message.eventEvaluations))
                return "eventEvaluations: array expected";
            for (var i = 0; i < message.eventEvaluations.length; ++i)
                if (!$util.isInteger(message.eventEvaluations[i]))
                    return "eventEvaluations: integer[] expected";
        }
        return null;
    };
    StudioEvent.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioEvent)
            return object;
        var message = new $root.StudioEvent();
        if (object.eventId != null)
            message.eventId = object.eventId | 0;
        switch (object.eventType) {
        case "storyInvalid":
        case 0:
            message.eventType = 0;
            break;
        case "storyCharactersBest":
        case 1:
            message.eventType = 1;
            break;
        case "storyNoraml":
        case 2:
            message.eventType = 2;
            break;
        case "storyActor":
        case 3:
            message.eventType = 3;
            break;
        }
        if (object.actorId != null)
            message.actorId = object.actorId | 0;
        if (object.eventOption != null)
            message.eventOption = object.eventOption | 0;
        if (object.eventEvaluations) {
            if (!Array.isArray(object.eventEvaluations))
                throw TypeError(".StudioEvent.eventEvaluations: array expected");
            message.eventEvaluations = [];
            for (var i = 0; i < object.eventEvaluations.length; ++i)
                message.eventEvaluations[i] = object.eventEvaluations[i] | 0;
        }
        return message;
    };
    StudioEvent.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.eventEvaluations = [];
        if (options.defaults) {
            object.eventId = 0;
            object.eventType = options.enums === String ? "storyInvalid" : 0;
            object.actorId = 0;
            object.eventOption = 0;
        }
        if (message.eventId != null && message.hasOwnProperty("eventId"))
            object.eventId = message.eventId;
        if (message.eventType != null && message.hasOwnProperty("eventType"))
            object.eventType = options.enums === String ? $root.StudioEventType[message.eventType] : message.eventType;
        if (message.actorId != null && message.hasOwnProperty("actorId"))
            object.actorId = message.actorId;
        if (message.eventOption != null && message.hasOwnProperty("eventOption"))
            object.eventOption = message.eventOption;
        if (message.eventEvaluations && message.eventEvaluations.length) {
            object.eventEvaluations = [];
            for (var j = 0; j < message.eventEvaluations.length; ++j)
                object.eventEvaluations[j] = message.eventEvaluations[j];
        }
        return object;
    };
    StudioEvent.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioEvent;
})();
$root.StudioResult = (function() {
    function StudioResult(properties) {
        this.audienceEvaluation = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioResult.prototype.level = 0;
    StudioResult.prototype.score = 0;
    StudioResult.prototype.publicPraise = 0;
    StudioResult.prototype.firstProfit = 0;
    StudioResult.prototype.continuedProfit = 0;
    StudioResult.prototype.continuedBuyCount = 0;
    StudioResult.prototype.audienceEvaluation = $util.emptyArray;
    StudioResult.create = function create(properties) {
        return new StudioResult(properties);
    };
    StudioResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
        if (message.score != null && message.hasOwnProperty("score"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.score);
        if (message.publicPraise != null && message.hasOwnProperty("publicPraise"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.publicPraise);
        if (message.firstProfit != null && message.hasOwnProperty("firstProfit"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.firstProfit);
        if (message.continuedProfit != null && message.hasOwnProperty("continuedProfit"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.continuedProfit);
        if (message.continuedBuyCount != null && message.hasOwnProperty("continuedBuyCount"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.continuedBuyCount);
        if (message.audienceEvaluation != null && message.audienceEvaluation.length) {
            writer.uint32(/* id 8, wireType 2 =*/66).fork();
            for (var i = 0; i < message.audienceEvaluation.length; ++i)
                writer.int32(message.audienceEvaluation[i]);
            writer.ldelim();
        }
        return writer;
    };
    StudioResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.level = reader.int32();
                break;
            case 2:
                message.score = reader.float();
                break;
            case 3:
                message.publicPraise = reader.float();
                break;
            case 4:
                message.firstProfit = reader.int32();
                break;
            case 6:
                message.continuedProfit = reader.int32();
                break;
            case 7:
                message.continuedBuyCount = reader.int32();
                break;
            case 8:
                if (!(message.audienceEvaluation && message.audienceEvaluation.length))
                    message.audienceEvaluation = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.audienceEvaluation.push(reader.int32());
                } else
                    message.audienceEvaluation.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.score != null && message.hasOwnProperty("score"))
            if (typeof message.score !== "number")
                return "score: number expected";
        if (message.publicPraise != null && message.hasOwnProperty("publicPraise"))
            if (typeof message.publicPraise !== "number")
                return "publicPraise: number expected";
        if (message.firstProfit != null && message.hasOwnProperty("firstProfit"))
            if (!$util.isInteger(message.firstProfit))
                return "firstProfit: integer expected";
        if (message.continuedProfit != null && message.hasOwnProperty("continuedProfit"))
            if (!$util.isInteger(message.continuedProfit))
                return "continuedProfit: integer expected";
        if (message.continuedBuyCount != null && message.hasOwnProperty("continuedBuyCount"))
            if (!$util.isInteger(message.continuedBuyCount))
                return "continuedBuyCount: integer expected";
        if (message.audienceEvaluation != null && message.hasOwnProperty("audienceEvaluation")) {
            if (!Array.isArray(message.audienceEvaluation))
                return "audienceEvaluation: array expected";
            for (var i = 0; i < message.audienceEvaluation.length; ++i)
                if (!$util.isInteger(message.audienceEvaluation[i]))
                    return "audienceEvaluation: integer[] expected";
        }
        return null;
    };
    StudioResult.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioResult)
            return object;
        var message = new $root.StudioResult();
        if (object.level != null)
            message.level = object.level | 0;
        if (object.score != null)
            message.score = Number(object.score);
        if (object.publicPraise != null)
            message.publicPraise = Number(object.publicPraise);
        if (object.firstProfit != null)
            message.firstProfit = object.firstProfit | 0;
        if (object.continuedProfit != null)
            message.continuedProfit = object.continuedProfit | 0;
        if (object.continuedBuyCount != null)
            message.continuedBuyCount = object.continuedBuyCount | 0;
        if (object.audienceEvaluation) {
            if (!Array.isArray(object.audienceEvaluation))
                throw TypeError(".StudioResult.audienceEvaluation: array expected");
            message.audienceEvaluation = [];
            for (var i = 0; i < object.audienceEvaluation.length; ++i)
                message.audienceEvaluation[i] = object.audienceEvaluation[i] | 0;
        }
        return message;
    };
    StudioResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.audienceEvaluation = [];
        if (options.defaults) {
            object.level = 0;
            object.score = 0;
            object.publicPraise = 0;
            object.firstProfit = 0;
            object.continuedProfit = 0;
            object.continuedBuyCount = 0;
        }
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.score != null && message.hasOwnProperty("score"))
            object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
        if (message.publicPraise != null && message.hasOwnProperty("publicPraise"))
            object.publicPraise = options.json && !isFinite(message.publicPraise) ? String(message.publicPraise) : message.publicPraise;
        if (message.firstProfit != null && message.hasOwnProperty("firstProfit"))
            object.firstProfit = message.firstProfit;
        if (message.continuedProfit != null && message.hasOwnProperty("continuedProfit"))
            object.continuedProfit = message.continuedProfit;
        if (message.continuedBuyCount != null && message.hasOwnProperty("continuedBuyCount"))
            object.continuedBuyCount = message.continuedBuyCount;
        if (message.audienceEvaluation && message.audienceEvaluation.length) {
            object.audienceEvaluation = [];
            for (var j = 0; j < message.audienceEvaluation.length; ++j)
                object.audienceEvaluation[j] = message.audienceEvaluation[j];
        }
        return object;
    };
    StudioResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioResult;
})();
$root.StudioData = (function() {
    function StudioData(properties) {
        this.selectStoryList = [];
        this.actors = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioData.prototype.step = 0;
    StudioData.prototype.selectStoryList = $util.emptyArray;
    StudioData.prototype.story = null;
    StudioData.prototype.actors = $util.emptyArray;
    StudioData.prototype.event = null;
    StudioData.prototype.result = null;
    StudioData.create = function create(properties) {
        return new StudioData(properties);
    };
    StudioData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.step != null && message.hasOwnProperty("step"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.step);
        if (message.selectStoryList != null && message.selectStoryList.length)
            for (var i = 0; i < message.selectStoryList.length; ++i)
                $root.StudioStory.encode(message.selectStoryList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.story != null && message.hasOwnProperty("story"))
            $root.StudioStory.encode(message.story, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.actors != null && message.actors.length)
            for (var i = 0; i < message.actors.length; ++i)
                $root.StudioActor.encode(message.actors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.event != null && message.hasOwnProperty("event"))
            $root.StudioEvent.encode(message.event, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.result != null && message.hasOwnProperty("result"))
            $root.StudioResult.encode(message.result, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };
    StudioData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.step = reader.int32();
                break;
            case 2:
                if (!(message.selectStoryList && message.selectStoryList.length))
                    message.selectStoryList = [];
                message.selectStoryList.push($root.StudioStory.decode(reader, reader.uint32()));
                break;
            case 3:
                message.story = $root.StudioStory.decode(reader, reader.uint32());
                break;
            case 4:
                if (!(message.actors && message.actors.length))
                    message.actors = [];
                message.actors.push($root.StudioActor.decode(reader, reader.uint32()));
                break;
            case 5:
                message.event = $root.StudioEvent.decode(reader, reader.uint32());
                break;
            case 6:
                message.result = $root.StudioResult.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.step != null && message.hasOwnProperty("step"))
            switch (message.step) {
            default:
                return "step: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
        if (message.selectStoryList != null && message.hasOwnProperty("selectStoryList")) {
            if (!Array.isArray(message.selectStoryList))
                return "selectStoryList: array expected";
            for (var i = 0; i < message.selectStoryList.length; ++i) {
                var error = $root.StudioStory.verify(message.selectStoryList[i]);
                if (error)
                    return "selectStoryList." + error;
            }
        }
        if (message.story != null && message.hasOwnProperty("story")) {
            var error = $root.StudioStory.verify(message.story);
            if (error)
                return "story." + error;
        }
        if (message.actors != null && message.hasOwnProperty("actors")) {
            if (!Array.isArray(message.actors))
                return "actors: array expected";
            for (var i = 0; i < message.actors.length; ++i) {
                var error = $root.StudioActor.verify(message.actors[i]);
                if (error)
                    return "actors." + error;
            }
        }
        if (message.event != null && message.hasOwnProperty("event")) {
            var error = $root.StudioEvent.verify(message.event);
            if (error)
                return "event." + error;
        }
        if (message.result != null && message.hasOwnProperty("result")) {
            var error = $root.StudioResult.verify(message.result);
            if (error)
                return "result." + error;
        }
        return null;
    };
    StudioData.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioData)
            return object;
        var message = new $root.StudioData();
        switch (object.step) {
        case "studioStepInvalid":
        case 0:
            message.step = 0;
            break;
        case "selectStory":
        case 1:
            message.step = 1;
            break;
        case "selectActor":
        case 2:
            message.step = 2;
            break;
        case "matchingDisplay":
        case 3:
            message.step = 3;
            break;
        case "selectEventOption":
        case 4:
            message.step = 4;
            break;
        case "eventEvaluations":
        case 5:
            message.step = 5;
            break;
        case "studio":
        case 6:
            message.step = 6;
            break;
        case "propDisplay":
        case 7:
            message.step = 7;
            break;
        case "shareDisplay":
        case 8:
            message.step = 8;
            break;
        case "firstReward":
        case 9:
            message.step = 9;
            break;
        case "end":
        case 10:
            message.step = 10;
            break;
        }
        if (object.selectStoryList) {
            if (!Array.isArray(object.selectStoryList))
                throw TypeError(".StudioData.selectStoryList: array expected");
            message.selectStoryList = [];
            for (var i = 0; i < object.selectStoryList.length; ++i) {
                if (typeof object.selectStoryList[i] !== "object")
                    throw TypeError(".StudioData.selectStoryList: object expected");
                message.selectStoryList[i] = $root.StudioStory.fromObject(object.selectStoryList[i]);
            }
        }
        if (object.story != null) {
            if (typeof object.story !== "object")
                throw TypeError(".StudioData.story: object expected");
            message.story = $root.StudioStory.fromObject(object.story);
        }
        if (object.actors) {
            if (!Array.isArray(object.actors))
                throw TypeError(".StudioData.actors: array expected");
            message.actors = [];
            for (var i = 0; i < object.actors.length; ++i) {
                if (typeof object.actors[i] !== "object")
                    throw TypeError(".StudioData.actors: object expected");
                message.actors[i] = $root.StudioActor.fromObject(object.actors[i]);
            }
        }
        if (object.event != null) {
            if (typeof object.event !== "object")
                throw TypeError(".StudioData.event: object expected");
            message.event = $root.StudioEvent.fromObject(object.event);
        }
        if (object.result != null) {
            if (typeof object.result !== "object")
                throw TypeError(".StudioData.result: object expected");
            message.result = $root.StudioResult.fromObject(object.result);
        }
        return message;
    };
    StudioData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.selectStoryList = [];
            object.actors = [];
        }
        if (options.defaults) {
            object.step = options.enums === String ? "studioStepInvalid" : 0;
            object.story = null;
            object.event = null;
            object.result = null;
        }
        if (message.step != null && message.hasOwnProperty("step"))
            object.step = options.enums === String ? $root.StudioStep[message.step] : message.step;
        if (message.selectStoryList && message.selectStoryList.length) {
            object.selectStoryList = [];
            for (var j = 0; j < message.selectStoryList.length; ++j)
                object.selectStoryList[j] = $root.StudioStory.toObject(message.selectStoryList[j], options);
        }
        if (message.story != null && message.hasOwnProperty("story"))
            object.story = $root.StudioStory.toObject(message.story, options);
        if (message.actors && message.actors.length) {
            object.actors = [];
            for (var j = 0; j < message.actors.length; ++j)
                object.actors[j] = $root.StudioActor.toObject(message.actors[j], options);
        }
        if (message.event != null && message.hasOwnProperty("event"))
            object.event = $root.StudioEvent.toObject(message.event, options);
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = $root.StudioResult.toObject(message.result, options);
        return object;
    };
    StudioData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioData;
})();
$root.StudioContinuedData = (function() {
    function StudioContinuedData(properties) {
        this.profitList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedData.prototype.uid = 0;
    StudioContinuedData.prototype.storyId = 0;
    StudioContinuedData.prototype.storyName = "";
    StudioContinuedData.prototype.storyType = 0;
    StudioContinuedData.prototype.season = 0;
    StudioContinuedData.prototype.episode = 0;
    StudioContinuedData.prototype.publicPraise = 0;
    StudioContinuedData.prototype.profitList = $util.emptyArray;
    StudioContinuedData.prototype.profitTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    StudioContinuedData.prototype.profitEndTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    StudioContinuedData.prototype.interval = 0;
    StudioContinuedData.prototype.receivePeriod = 0;
    StudioContinuedData.create = function create(properties) {
        return new StudioContinuedData(properties);
    };
    StudioContinuedData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.storyId);
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.storyName);
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.storyType);
        if (message.season != null && message.hasOwnProperty("season"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.season);
        if (message.episode != null && message.hasOwnProperty("episode"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.episode);
        if (message.publicPraise != null && message.hasOwnProperty("publicPraise"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.publicPraise);
        if (message.profitList != null && message.profitList.length) {
            writer.uint32(/* id 8, wireType 2 =*/66).fork();
            for (var i = 0; i < message.profitList.length; ++i)
                writer.int32(message.profitList[i]);
            writer.ldelim();
        }
        if (message.profitTimestamp != null && message.hasOwnProperty("profitTimestamp"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.profitTimestamp);
        if (message.profitEndTimestamp != null && message.hasOwnProperty("profitEndTimestamp"))
            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.profitEndTimestamp);
        if (message.interval != null && message.hasOwnProperty("interval"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.interval);
        if (message.receivePeriod != null && message.hasOwnProperty("receivePeriod"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.receivePeriod);
        return writer;
    };
    StudioContinuedData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.int32();
                break;
            case 2:
                message.storyId = reader.int32();
                break;
            case 3:
                message.storyName = reader.string();
                break;
            case 4:
                message.storyType = reader.int32();
                break;
            case 5:
                message.season = reader.int32();
                break;
            case 6:
                message.episode = reader.int32();
                break;
            case 7:
                message.publicPraise = reader.float();
                break;
            case 8:
                if (!(message.profitList && message.profitList.length))
                    message.profitList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.profitList.push(reader.int32());
                } else
                    message.profitList.push(reader.int32());
                break;
            case 9:
                message.profitTimestamp = reader.int64();
                break;
            case 10:
                message.profitEndTimestamp = reader.int64();
                break;
            case 11:
                message.interval = reader.int32();
                break;
            case 12:
                message.receivePeriod = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            if (!$util.isInteger(message.storyId))
                return "storyId: integer expected";
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            if (!$util.isString(message.storyName))
                return "storyName: string expected";
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            switch (message.storyType) {
            default:
                return "storyType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.season != null && message.hasOwnProperty("season"))
            if (!$util.isInteger(message.season))
                return "season: integer expected";
        if (message.episode != null && message.hasOwnProperty("episode"))
            if (!$util.isInteger(message.episode))
                return "episode: integer expected";
        if (message.publicPraise != null && message.hasOwnProperty("publicPraise"))
            if (typeof message.publicPraise !== "number")
                return "publicPraise: number expected";
        if (message.profitList != null && message.hasOwnProperty("profitList")) {
            if (!Array.isArray(message.profitList))
                return "profitList: array expected";
            for (var i = 0; i < message.profitList.length; ++i)
                if (!$util.isInteger(message.profitList[i]))
                    return "profitList: integer[] expected";
        }
        if (message.profitTimestamp != null && message.hasOwnProperty("profitTimestamp"))
            if (!$util.isInteger(message.profitTimestamp) && !(message.profitTimestamp && $util.isInteger(message.profitTimestamp.low) && $util.isInteger(message.profitTimestamp.high)))
                return "profitTimestamp: integer|Long expected";
        if (message.profitEndTimestamp != null && message.hasOwnProperty("profitEndTimestamp"))
            if (!$util.isInteger(message.profitEndTimestamp) && !(message.profitEndTimestamp && $util.isInteger(message.profitEndTimestamp.low) && $util.isInteger(message.profitEndTimestamp.high)))
                return "profitEndTimestamp: integer|Long expected";
        if (message.interval != null && message.hasOwnProperty("interval"))
            if (!$util.isInteger(message.interval))
                return "interval: integer expected";
        if (message.receivePeriod != null && message.hasOwnProperty("receivePeriod"))
            if (!$util.isInteger(message.receivePeriod))
                return "receivePeriod: integer expected";
        return null;
    };
    StudioContinuedData.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedData)
            return object;
        var message = new $root.StudioContinuedData();
        if (object.uid != null)
            message.uid = object.uid | 0;
        if (object.storyId != null)
            message.storyId = object.storyId | 0;
        if (object.storyName != null)
            message.storyName = String(object.storyName);
        switch (object.storyType) {
        case "StudioStoryType_Invalid":
        case 0:
            message.storyType = 0;
            break;
        case "StudioStoryType_Normal":
        case 1:
            message.storyType = 1;
            break;
        case "StudioStoryType_gold":
        case 2:
            message.storyType = 2;
            break;
        }
        if (object.season != null)
            message.season = object.season | 0;
        if (object.episode != null)
            message.episode = object.episode | 0;
        if (object.publicPraise != null)
            message.publicPraise = Number(object.publicPraise);
        if (object.profitList) {
            if (!Array.isArray(object.profitList))
                throw TypeError(".StudioContinuedData.profitList: array expected");
            message.profitList = [];
            for (var i = 0; i < object.profitList.length; ++i)
                message.profitList[i] = object.profitList[i] | 0;
        }
        if (object.profitTimestamp != null)
            if ($util.Long)
                (message.profitTimestamp = $util.Long.fromValue(object.profitTimestamp)).unsigned = false;
            else if (typeof object.profitTimestamp === "string")
                message.profitTimestamp = parseInt(object.profitTimestamp, 10);
            else if (typeof object.profitTimestamp === "number")
                message.profitTimestamp = object.profitTimestamp;
            else if (typeof object.profitTimestamp === "object")
                message.profitTimestamp = new $util.LongBits(object.profitTimestamp.low >>> 0, object.profitTimestamp.high >>> 0).toNumber();
        if (object.profitEndTimestamp != null)
            if ($util.Long)
                (message.profitEndTimestamp = $util.Long.fromValue(object.profitEndTimestamp)).unsigned = false;
            else if (typeof object.profitEndTimestamp === "string")
                message.profitEndTimestamp = parseInt(object.profitEndTimestamp, 10);
            else if (typeof object.profitEndTimestamp === "number")
                message.profitEndTimestamp = object.profitEndTimestamp;
            else if (typeof object.profitEndTimestamp === "object")
                message.profitEndTimestamp = new $util.LongBits(object.profitEndTimestamp.low >>> 0, object.profitEndTimestamp.high >>> 0).toNumber();
        if (object.interval != null)
            message.interval = object.interval | 0;
        if (object.receivePeriod != null)
            message.receivePeriod = object.receivePeriod | 0;
        return message;
    };
    StudioContinuedData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.profitList = [];
        if (options.defaults) {
            object.uid = 0;
            object.storyId = 0;
            object.storyName = "";
            object.storyType = options.enums === String ? "StudioStoryType_Invalid" : 0;
            object.season = 0;
            object.episode = 0;
            object.publicPraise = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.profitTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.profitTimestamp = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.profitEndTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.profitEndTimestamp = options.longs === String ? "0" : 0;
            object.interval = 0;
            object.receivePeriod = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.storyId != null && message.hasOwnProperty("storyId"))
            object.storyId = message.storyId;
        if (message.storyName != null && message.hasOwnProperty("storyName"))
            object.storyName = message.storyName;
        if (message.storyType != null && message.hasOwnProperty("storyType"))
            object.storyType = options.enums === String ? $root.StudioStoryType[message.storyType] : message.storyType;
        if (message.season != null && message.hasOwnProperty("season"))
            object.season = message.season;
        if (message.episode != null && message.hasOwnProperty("episode"))
            object.episode = message.episode;
        if (message.publicPraise != null && message.hasOwnProperty("publicPraise"))
            object.publicPraise = options.json && !isFinite(message.publicPraise) ? String(message.publicPraise) : message.publicPraise;
        if (message.profitList && message.profitList.length) {
            object.profitList = [];
            for (var j = 0; j < message.profitList.length; ++j)
                object.profitList[j] = message.profitList[j];
        }
        if (message.profitTimestamp != null && message.hasOwnProperty("profitTimestamp"))
            if (typeof message.profitTimestamp === "number")
                object.profitTimestamp = options.longs === String ? String(message.profitTimestamp) : message.profitTimestamp;
            else
                object.profitTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.profitTimestamp) : options.longs === Number ? new $util.LongBits(message.profitTimestamp.low >>> 0, message.profitTimestamp.high >>> 0).toNumber() : message.profitTimestamp;
        if (message.profitEndTimestamp != null && message.hasOwnProperty("profitEndTimestamp"))
            if (typeof message.profitEndTimestamp === "number")
                object.profitEndTimestamp = options.longs === String ? String(message.profitEndTimestamp) : message.profitEndTimestamp;
            else
                object.profitEndTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.profitEndTimestamp) : options.longs === Number ? new $util.LongBits(message.profitEndTimestamp.low >>> 0, message.profitEndTimestamp.high >>> 0).toNumber() : message.profitEndTimestamp;
        if (message.interval != null && message.hasOwnProperty("interval"))
            object.interval = message.interval;
        if (message.receivePeriod != null && message.hasOwnProperty("receivePeriod"))
            object.receivePeriod = message.receivePeriod;
        return object;
    };
    StudioContinuedData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedData;
})();
$root.StudioContinuedUpdateData = (function() {
    function StudioContinuedUpdateData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    StudioContinuedUpdateData.prototype.uid = 0;
    StudioContinuedUpdateData.prototype.receivePeriod = 0;
    StudioContinuedUpdateData.create = function create(properties) {
        return new StudioContinuedUpdateData(properties);
    };
    StudioContinuedUpdateData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uid != null && message.hasOwnProperty("uid"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.uid);
        if (message.receivePeriod != null && message.hasOwnProperty("receivePeriod"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.receivePeriod);
        return writer;
    };
    StudioContinuedUpdateData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    StudioContinuedUpdateData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StudioContinuedUpdateData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.uid = reader.int32();
                break;
            case 2:
                message.receivePeriod = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    StudioContinuedUpdateData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    StudioContinuedUpdateData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uid != null && message.hasOwnProperty("uid"))
            if (!$util.isInteger(message.uid))
                return "uid: integer expected";
        if (message.receivePeriod != null && message.hasOwnProperty("receivePeriod"))
            if (!$util.isInteger(message.receivePeriod))
                return "receivePeriod: integer expected";
        return null;
    };
    StudioContinuedUpdateData.fromObject = function fromObject(object) {
        if (object instanceof $root.StudioContinuedUpdateData)
            return object;
        var message = new $root.StudioContinuedUpdateData();
        if (object.uid != null)
            message.uid = object.uid | 0;
        if (object.receivePeriod != null)
            message.receivePeriod = object.receivePeriod | 0;
        return message;
    };
    StudioContinuedUpdateData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.uid = 0;
            object.receivePeriod = 0;
        }
        if (message.uid != null && message.hasOwnProperty("uid"))
            object.uid = message.uid;
        if (message.receivePeriod != null && message.hasOwnProperty("receivePeriod"))
            object.receivePeriod = message.receivePeriod;
        return object;
    };
    StudioContinuedUpdateData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return StudioContinuedUpdateData;
})();
$root.Gashapon = (function() {
    function Gashapon(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    Gashapon.prototype.id = 0;
    Gashapon.prototype.extractNum = 0;
    Gashapon.prototype.freeNum = 0;
    Gashapon.prototype.nextFreeTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.storyCurrentExtractNum = 0;
    Gashapon.prototype.storyPurchaseNum = 0;
    Gashapon.prototype.lastPurchaseTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.storyExtractStartTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.prototype.storyExtractEndTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    Gashapon.create = function create(properties) {
        return new Gashapon(properties);
    };
    Gashapon.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.extractNum != null && message.hasOwnProperty("extractNum"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.extractNum);
        if (message.freeNum != null && message.hasOwnProperty("freeNum"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeNum);
        if (message.nextFreeTime != null && message.hasOwnProperty("nextFreeTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.nextFreeTime);
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            writer.uint32(/* id 5, wireType 0 =*/40).int64(message.startTime);
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            writer.uint32(/* id 6, wireType 0 =*/48).int64(message.endTime);
        if (message.storyCurrentExtractNum != null && message.hasOwnProperty("storyCurrentExtractNum"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.storyCurrentExtractNum);
        if (message.storyPurchaseNum != null && message.hasOwnProperty("storyPurchaseNum"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.storyPurchaseNum);
        if (message.lastPurchaseTime != null && message.hasOwnProperty("lastPurchaseTime"))
            writer.uint32(/* id 9, wireType 0 =*/72).int64(message.lastPurchaseTime);
        if (message.storyExtractStartTime != null && message.hasOwnProperty("storyExtractStartTime"))
            writer.uint32(/* id 10, wireType 0 =*/80).int64(message.storyExtractStartTime);
        if (message.storyExtractEndTime != null && message.hasOwnProperty("storyExtractEndTime"))
            writer.uint32(/* id 11, wireType 0 =*/88).int64(message.storyExtractEndTime);
        return writer;
    };
    Gashapon.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    Gashapon.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Gashapon();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.extractNum = reader.int32();
                break;
            case 3:
                message.freeNum = reader.int32();
                break;
            case 4:
                message.nextFreeTime = reader.int64();
                break;
            case 5:
                message.startTime = reader.int64();
                break;
            case 6:
                message.endTime = reader.int64();
                break;
            case 7:
                message.storyCurrentExtractNum = reader.int32();
                break;
            case 8:
                message.storyPurchaseNum = reader.int32();
                break;
            case 9:
                message.lastPurchaseTime = reader.int64();
                break;
            case 10:
                message.storyExtractStartTime = reader.int64();
                break;
            case 11:
                message.storyExtractEndTime = reader.int64();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    Gashapon.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    Gashapon.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.extractNum != null && message.hasOwnProperty("extractNum"))
            if (!$util.isInteger(message.extractNum))
                return "extractNum: integer expected";
        if (message.freeNum != null && message.hasOwnProperty("freeNum"))
            if (!$util.isInteger(message.freeNum))
                return "freeNum: integer expected";
        if (message.nextFreeTime != null && message.hasOwnProperty("nextFreeTime"))
            if (!$util.isInteger(message.nextFreeTime) && !(message.nextFreeTime && $util.isInteger(message.nextFreeTime.low) && $util.isInteger(message.nextFreeTime.high)))
                return "nextFreeTime: integer|Long expected";
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
                return "startTime: integer|Long expected";
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                return "endTime: integer|Long expected";
        if (message.storyCurrentExtractNum != null && message.hasOwnProperty("storyCurrentExtractNum"))
            if (!$util.isInteger(message.storyCurrentExtractNum))
                return "storyCurrentExtractNum: integer expected";
        if (message.storyPurchaseNum != null && message.hasOwnProperty("storyPurchaseNum"))
            if (!$util.isInteger(message.storyPurchaseNum))
                return "storyPurchaseNum: integer expected";
        if (message.lastPurchaseTime != null && message.hasOwnProperty("lastPurchaseTime"))
            if (!$util.isInteger(message.lastPurchaseTime) && !(message.lastPurchaseTime && $util.isInteger(message.lastPurchaseTime.low) && $util.isInteger(message.lastPurchaseTime.high)))
                return "lastPurchaseTime: integer|Long expected";
        if (message.storyExtractStartTime != null && message.hasOwnProperty("storyExtractStartTime"))
            if (!$util.isInteger(message.storyExtractStartTime) && !(message.storyExtractStartTime && $util.isInteger(message.storyExtractStartTime.low) && $util.isInteger(message.storyExtractStartTime.high)))
                return "storyExtractStartTime: integer|Long expected";
        if (message.storyExtractEndTime != null && message.hasOwnProperty("storyExtractEndTime"))
            if (!$util.isInteger(message.storyExtractEndTime) && !(message.storyExtractEndTime && $util.isInteger(message.storyExtractEndTime.low) && $util.isInteger(message.storyExtractEndTime.high)))
                return "storyExtractEndTime: integer|Long expected";
        return null;
    };
    Gashapon.fromObject = function fromObject(object) {
        if (object instanceof $root.Gashapon)
            return object;
        var message = new $root.Gashapon();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.extractNum != null)
            message.extractNum = object.extractNum | 0;
        if (object.freeNum != null)
            message.freeNum = object.freeNum | 0;
        if (object.nextFreeTime != null)
            if ($util.Long)
                (message.nextFreeTime = $util.Long.fromValue(object.nextFreeTime)).unsigned = false;
            else if (typeof object.nextFreeTime === "string")
                message.nextFreeTime = parseInt(object.nextFreeTime, 10);
            else if (typeof object.nextFreeTime === "number")
                message.nextFreeTime = object.nextFreeTime;
            else if (typeof object.nextFreeTime === "object")
                message.nextFreeTime = new $util.LongBits(object.nextFreeTime.low >>> 0, object.nextFreeTime.high >>> 0).toNumber();
        if (object.startTime != null)
            if ($util.Long)
                (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = false;
            else if (typeof object.startTime === "string")
                message.startTime = parseInt(object.startTime, 10);
            else if (typeof object.startTime === "number")
                message.startTime = object.startTime;
            else if (typeof object.startTime === "object")
                message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber();
        if (object.endTime != null)
            if ($util.Long)
                (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
            else if (typeof object.endTime === "string")
                message.endTime = parseInt(object.endTime, 10);
            else if (typeof object.endTime === "number")
                message.endTime = object.endTime;
            else if (typeof object.endTime === "object")
                message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
        if (object.storyCurrentExtractNum != null)
            message.storyCurrentExtractNum = object.storyCurrentExtractNum | 0;
        if (object.storyPurchaseNum != null)
            message.storyPurchaseNum = object.storyPurchaseNum | 0;
        if (object.lastPurchaseTime != null)
            if ($util.Long)
                (message.lastPurchaseTime = $util.Long.fromValue(object.lastPurchaseTime)).unsigned = false;
            else if (typeof object.lastPurchaseTime === "string")
                message.lastPurchaseTime = parseInt(object.lastPurchaseTime, 10);
            else if (typeof object.lastPurchaseTime === "number")
                message.lastPurchaseTime = object.lastPurchaseTime;
            else if (typeof object.lastPurchaseTime === "object")
                message.lastPurchaseTime = new $util.LongBits(object.lastPurchaseTime.low >>> 0, object.lastPurchaseTime.high >>> 0).toNumber();
        if (object.storyExtractStartTime != null)
            if ($util.Long)
                (message.storyExtractStartTime = $util.Long.fromValue(object.storyExtractStartTime)).unsigned = false;
            else if (typeof object.storyExtractStartTime === "string")
                message.storyExtractStartTime = parseInt(object.storyExtractStartTime, 10);
            else if (typeof object.storyExtractStartTime === "number")
                message.storyExtractStartTime = object.storyExtractStartTime;
            else if (typeof object.storyExtractStartTime === "object")
                message.storyExtractStartTime = new $util.LongBits(object.storyExtractStartTime.low >>> 0, object.storyExtractStartTime.high >>> 0).toNumber();
        if (object.storyExtractEndTime != null)
            if ($util.Long)
                (message.storyExtractEndTime = $util.Long.fromValue(object.storyExtractEndTime)).unsigned = false;
            else if (typeof object.storyExtractEndTime === "string")
                message.storyExtractEndTime = parseInt(object.storyExtractEndTime, 10);
            else if (typeof object.storyExtractEndTime === "number")
                message.storyExtractEndTime = object.storyExtractEndTime;
            else if (typeof object.storyExtractEndTime === "object")
                message.storyExtractEndTime = new $util.LongBits(object.storyExtractEndTime.low >>> 0, object.storyExtractEndTime.high >>> 0).toNumber();
        return message;
    };
    Gashapon.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.extractNum = 0;
            object.freeNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.nextFreeTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.nextFreeTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.startTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.endTime = options.longs === String ? "0" : 0;
            object.storyCurrentExtractNum = 0;
            object.storyPurchaseNum = 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.lastPurchaseTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.lastPurchaseTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.storyExtractStartTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.storyExtractStartTime = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.storyExtractEndTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.storyExtractEndTime = options.longs === String ? "0" : 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.extractNum != null && message.hasOwnProperty("extractNum"))
            object.extractNum = message.extractNum;
        if (message.freeNum != null && message.hasOwnProperty("freeNum"))
            object.freeNum = message.freeNum;
        if (message.nextFreeTime != null && message.hasOwnProperty("nextFreeTime"))
            if (typeof message.nextFreeTime === "number")
                object.nextFreeTime = options.longs === String ? String(message.nextFreeTime) : message.nextFreeTime;
            else
                object.nextFreeTime = options.longs === String ? $util.Long.prototype.toString.call(message.nextFreeTime) : options.longs === Number ? new $util.LongBits(message.nextFreeTime.low >>> 0, message.nextFreeTime.high >>> 0).toNumber() : message.nextFreeTime;
        if (message.startTime != null && message.hasOwnProperty("startTime"))
            if (typeof message.startTime === "number")
                object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
            else
                object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber() : message.startTime;
        if (message.endTime != null && message.hasOwnProperty("endTime"))
            if (typeof message.endTime === "number")
                object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
            else
                object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
        if (message.storyCurrentExtractNum != null && message.hasOwnProperty("storyCurrentExtractNum"))
            object.storyCurrentExtractNum = message.storyCurrentExtractNum;
        if (message.storyPurchaseNum != null && message.hasOwnProperty("storyPurchaseNum"))
            object.storyPurchaseNum = message.storyPurchaseNum;
        if (message.lastPurchaseTime != null && message.hasOwnProperty("lastPurchaseTime"))
            if (typeof message.lastPurchaseTime === "number")
                object.lastPurchaseTime = options.longs === String ? String(message.lastPurchaseTime) : message.lastPurchaseTime;
            else
                object.lastPurchaseTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastPurchaseTime) : options.longs === Number ? new $util.LongBits(message.lastPurchaseTime.low >>> 0, message.lastPurchaseTime.high >>> 0).toNumber() : message.lastPurchaseTime;
        if (message.storyExtractStartTime != null && message.hasOwnProperty("storyExtractStartTime"))
            if (typeof message.storyExtractStartTime === "number")
                object.storyExtractStartTime = options.longs === String ? String(message.storyExtractStartTime) : message.storyExtractStartTime;
            else
                object.storyExtractStartTime = options.longs === String ? $util.Long.prototype.toString.call(message.storyExtractStartTime) : options.longs === Number ? new $util.LongBits(message.storyExtractStartTime.low >>> 0, message.storyExtractStartTime.high >>> 0).toNumber() : message.storyExtractStartTime;
        if (message.storyExtractEndTime != null && message.hasOwnProperty("storyExtractEndTime"))
            if (typeof message.storyExtractEndTime === "number")
                object.storyExtractEndTime = options.longs === String ? String(message.storyExtractEndTime) : message.storyExtractEndTime;
            else
                object.storyExtractEndTime = options.longs === String ? $util.Long.prototype.toString.call(message.storyExtractEndTime) : options.longs === Number ? new $util.LongBits(message.storyExtractEndTime.low >>> 0, message.storyExtractEndTime.high >>> 0).toNumber() : message.storyExtractEndTime;
        return object;
    };
    Gashapon.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return Gashapon;
})();
$root.CountActivity = (function() {
    function CountActivity(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    CountActivity.prototype.id = 0;
    CountActivity.prototype.currentDay = 0;
    CountActivity.prototype.alreadyGetDay = 0;
    CountActivity.create = function create(properties) {
        return new CountActivity(properties);
    };
    CountActivity.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && message.hasOwnProperty("id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.currentDay != null && message.hasOwnProperty("currentDay"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.currentDay);
        if (message.alreadyGetDay != null && message.hasOwnProperty("alreadyGetDay"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.alreadyGetDay);
        return writer;
    };
    CountActivity.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    CountActivity.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CountActivity();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.id = reader.int32();
                break;
            case 2:
                message.currentDay = reader.int32();
                break;
            case 3:
                message.alreadyGetDay = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    CountActivity.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    CountActivity.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.currentDay != null && message.hasOwnProperty("currentDay"))
            if (!$util.isInteger(message.currentDay))
                return "currentDay: integer expected";
        if (message.alreadyGetDay != null && message.hasOwnProperty("alreadyGetDay"))
            if (!$util.isInteger(message.alreadyGetDay))
                return "alreadyGetDay: integer expected";
        return null;
    };
    CountActivity.fromObject = function fromObject(object) {
        if (object instanceof $root.CountActivity)
            return object;
        var message = new $root.CountActivity();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.currentDay != null)
            message.currentDay = object.currentDay | 0;
        if (object.alreadyGetDay != null)
            message.alreadyGetDay = object.alreadyGetDay | 0;
        return message;
    };
    CountActivity.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.currentDay = 0;
            object.alreadyGetDay = 0;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.currentDay != null && message.hasOwnProperty("currentDay"))
            object.currentDay = message.currentDay;
        if (message.alreadyGetDay != null && message.hasOwnProperty("alreadyGetDay"))
            object.alreadyGetDay = message.alreadyGetDay;
        return object;
    };
    CountActivity.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return CountActivity;
})();
$root.GamerStatus = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Offline"] = 0;
    values[valuesById[1] = "Online"] = 1;
    values[valuesById[2] = "Teaming"] = 2;
    values[valuesById[3] = "Matching"] = 3;
    values[valuesById[4] = "Fighting"] = 4;
    return values;
})();
$root.ChatChannel = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "GamerChat"] = 0;
    values[valuesById[1] = "WorldChat"] = 1;
    return values;
})();
$root.MailType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ActivityMail"] = 0;
    values[valuesById[1] = "SysMail"] = 1;
    values[valuesById[2] = "AnnouncementMail"] = 2;
    values[valuesById[3] = "GamerMail"] = 3;
    return values;
})();
$root.MailState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MailUnRead"] = 0;
    values[valuesById[1] = "MailRead"] = 1;
    values[valuesById[2] = "MailReceived"] = 2;
    return values;
})();
$root.PVPType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MINVALID"] = 0;
    values[valuesById[100] = "M1V1"] = 100;
    values[valuesById[103] = "M2V2"] = 103;
    values[valuesById[104] = "M3V3"] = 104;
    values[valuesById[105] = "M5V5"] = 105;
    values[valuesById[106] = "M1V10"] = 106;
    values[valuesById[200] = "RankM3v3"] = 200;
    values[valuesById[201] = "RankM5v5"] = 201;
    values[valuesById[301] = "TeamM1v1"] = 301;
    values[valuesById[401] = "C2V2"] = 401;
    values[valuesById[402] = "C3V3"] = 402;
    values[valuesById[403] = "C5V5"] = 403;
    values[valuesById[501] = "H3V3"] = 501;
    values[valuesById[502] = "RankH3V3"] = 502;
    values[valuesById[601] = "Conscript3v3"] = 601;
    values[valuesById[1000] = "M1"] = 1000;
    values[valuesById[2000] = "MT1"] = 2000;
    values[valuesById[2001] = "MT1V1"] = 2001;
    values[valuesById[2002] = "MT2V2"] = 2002;
    values[valuesById[2003] = "MT3V3"] = 2003;
    return values;
})();
$root.BuildState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Normal"] = 0;
    values[valuesById[1] = "Building"] = 1;
    values[valuesById[2] = "LevelUp"] = 2;
    return values;
})();
$root.SpeedUpType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Invite"] = 0;
    values[valuesById[1] = "Diamond"] = 1;
    values[valuesById[2] = "WatchAd"] = 2;
    return values;
})();
$root.ItemType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "invalid"] = 0;
    values[valuesById[1] = "diamond"] = 1;
    values[valuesById[2] = "gold"] = 2;
    values[valuesById[3] = "dollar"] = 3;
    values[valuesById[4] = "product"] = 4;
    values[valuesById[5] = "Item"] = 5;
    values[valuesById[6] = "property"] = 6;
    values[valuesById[7] = "artistContract"] = 7;
    values[valuesById[8] = "gift"] = 8;
    values[valuesById[9] = "buildingMaterial"] = 9;
    values[valuesById[10] = "execution"] = 10;
    values[valuesById[11] = "exp"] = 11;
    values[valuesById[12] = "like"] = 12;
    values[valuesById[13] = "expect"] = 13;
    values[valuesById[14] = "cup"] = 14;
    values[valuesById[15] = "artistPhysical"] = 15;
    values[valuesById[16] = "artistChip"] = 16;
    values[valuesById[17] = "multipleChoiceOne"] = 17;
    values[valuesById[18] = "script"] = 18;
    values[valuesById[19] = "completeType"] = 19;
    values[valuesById[20] = "information"] = 20;
    values[valuesById[21] = "story"] = 21;
    values[valuesById[22] = "actorType"] = 22;
    values[valuesById[30] = "envelope"] = 30;
    return values;
})();
$root.IntelligenceConst = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "INVALID"] = 0;
    values[valuesById[3] = "minNum"] = 3;
    values[valuesById[6] = "maxNum"] = 6;
    values[valuesById[20] = "SpecialIntelligenceTypeId"] = 20;
    values[valuesById[100] = "TreasureChestExtractNum"] = 100;
    values[valuesById[16003002] = "NoActorRewardId"] = 16003002;
    return values;
})();
$root.IntelligencePaseType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "IntelligencePaseType_Normal"] = 0;
    values[valuesById[1] = "IntelligencePaseType_Special"] = 1;
    return values;
})();
$root.IntelligencePaseResultType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "IntelligencePaseResultType_Actor"] = 0;
    values[valuesById[1] = "IntelligencePaseResultType_Item"] = 1;
    values[valuesById[2] = "IntelligencePaseResultType_ActorExit"] = 2;
    return values;
})();
$root.IntelligenceState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Unread"] = 0;
    values[valuesById[1] = "Read"] = 1;
    return values;
})();
$root.BuildType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Reserved"] = 0;
    values[valuesById[1] = "shootingCenter"] = 1;
    values[valuesById[2] = "rookieDepartment"] = 2;
    values[valuesById[3] = "financeDepartment"] = 3;
    values[valuesById[4] = "productionCenter"] = 4;
    values[valuesById[5] = "accessoryMall"] = 5;
    values[valuesById[6] = "trainingCamp"] = 6;
    values[valuesById[7] = "propagandaDepartment"] = 7;
    values[valuesById[8] = "trainingDepartment"] = 8;
    return values;
})();
$root.StudioStep = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "studioStepInvalid"] = 0;
    values[valuesById[1] = "selectStory"] = 1;
    values[valuesById[2] = "selectActor"] = 2;
    values[valuesById[3] = "matchingDisplay"] = 3;
    values[valuesById[4] = "selectEventOption"] = 4;
    values[valuesById[5] = "eventEvaluations"] = 5;
    values[valuesById[6] = "studio"] = 6;
    values[valuesById[7] = "propDisplay"] = 7;
    values[valuesById[8] = "shareDisplay"] = 8;
    values[valuesById[9] = "firstReward"] = 9;
    values[valuesById[10] = "end"] = 10;
    return values;
})();
$root.StudioEventType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "storyInvalid"] = 0;
    values[valuesById[1] = "storyCharactersBest"] = 1;
    values[valuesById[2] = "storyNoraml"] = 2;
    values[valuesById[3] = "storyActor"] = 3;
    return values;
})();
$root.StudioActorState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ActorStateInvalid"] = 0;
    values[valuesById[1] = "normal"] = 1;
    values[valuesById[2] = "help"] = 2;
    values[valuesById[3] = "best"] = 3;
    return values;
})();
$root.StudioStoryType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "StudioStoryType_Invalid"] = 0;
    values[valuesById[1] = "StudioStoryType_Normal"] = 1;
    values[valuesById[2] = "StudioStoryType_gold"] = 2;
    return values;
})();
$root.StudioPropType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "StudioPropType_Invalid"] = 0;
    values[valuesById[1] = "spectacle"] = 1;
    values[valuesById[2] = "perform"] = 2;
    values[valuesById[3] = "scenario"] = 3;
    values[valuesById[4] = "art"] = 4;
    values[valuesById[5] = "entertainment"] = 5;
    return values;
})();
$root.ActorLabelType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Initial"] = 0;
    values[valuesById[1] = "actor"] = 1;
    values[valuesById[2] = "ad"] = 2;
    values[valuesById[3] = "buy"] = 3;
    values[valuesById[4] = "expand"] = 4;
    return values;
})();
$root.ActorLabelSlot = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "Invalid"] = 0;
    values[valuesById[1] = "Initial_1"] = 1;
    values[valuesById[2] = "Initial_2"] = 2;
    values[valuesById[3] = "Actor_3"] = 3;
    values[valuesById[4] = "Actor_4"] = 4;
    values[valuesById[5] = "Actor_5"] = 5;
    values[valuesById[6] = "Actor_6"] = 6;
    values[valuesById[7] = "Ad_7"] = 7;
    values[valuesById[8] = "Buy_8"] = 8;
    values[valuesById[9] = "Expand_9"] = 9;
    values[valuesById[10] = "Expand_10"] = 10;
    return values;
})();
$root.TaskState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CannotAccept"] = 0;
    values[valuesById[1] = "CanAccept"] = 1;
    values[valuesById[2] = "Doing"] = 2;
    values[valuesById[3] = "Complete"] = 3;
    values[valuesById[4] = "TaskFinish"] = 4;
    return values;
})();
$root.ActorConst = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ActorInvalid"] = 0;
    values[valuesById[4] = "FiendshipMaxLevel"] = 4;
    return values;
})();
$root.GashaponType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "GashaponTypeInvalid"] = 0;
    values[valuesById[1] = "IntelligenceGashapon"] = 1;
    values[valuesById[2] = "ItemGashapon"] = 2;
    values[valuesById[3] = "StoryGashapon"] = 3;
    return values;
})();
$root.StoryExtractRes = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "StoryExtractRes_Invalid"] = 0;
    values[valuesById[1] = "NoRepetition"] = 1;
    values[valuesById[2] = "IsRepetition"] = 2;
    values[valuesById[3] = "Fail"] = 3;
    return values;
})();
$root.LeagueData = (function() {
    function LeagueData(properties) {
        this.gamerList = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    LeagueData.prototype.leagueId = 0;
    LeagueData.prototype.name = "";
    LeagueData.prototype.declaration = "";
    LeagueData.prototype.createTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    LeagueData.prototype.level = 0;
    LeagueData.prototype.chairman = 0;
    LeagueData.prototype.gamerList = $util.emptyArray;
    LeagueData.create = function create(properties) {
        return new LeagueData(properties);
    };
    LeagueData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.leagueId != null && message.hasOwnProperty("leagueId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.leagueId);
        if (message.name != null && message.hasOwnProperty("name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.declaration != null && message.hasOwnProperty("declaration"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.declaration);
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.createTime);
        if (message.level != null && message.hasOwnProperty("level"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.level);
        if (message.chairman != null && message.hasOwnProperty("chairman"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.chairman);
        if (message.gamerList != null && message.gamerList.length) {
            writer.uint32(/* id 7, wireType 2 =*/58).fork();
            for (var i = 0; i < message.gamerList.length; ++i)
                writer.int32(message.gamerList[i]);
            writer.ldelim();
        }
        return writer;
    };
    LeagueData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    LeagueData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LeagueData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.leagueId = reader.int32();
                break;
            case 2:
                message.name = reader.string();
                break;
            case 3:
                message.declaration = reader.string();
                break;
            case 4:
                message.createTime = reader.int64();
                break;
            case 5:
                message.level = reader.int32();
                break;
            case 6:
                message.chairman = reader.int32();
                break;
            case 7:
                if (!(message.gamerList && message.gamerList.length))
                    message.gamerList = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.gamerList.push(reader.int32());
                } else
                    message.gamerList.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    LeagueData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    LeagueData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.leagueId != null && message.hasOwnProperty("leagueId"))
            if (!$util.isInteger(message.leagueId))
                return "leagueId: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.declaration != null && message.hasOwnProperty("declaration"))
            if (!$util.isString(message.declaration))
                return "declaration: string expected";
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            if (!$util.isInteger(message.createTime) && !(message.createTime && $util.isInteger(message.createTime.low) && $util.isInteger(message.createTime.high)))
                return "createTime: integer|Long expected";
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.chairman != null && message.hasOwnProperty("chairman"))
            if (!$util.isInteger(message.chairman))
                return "chairman: integer expected";
        if (message.gamerList != null && message.hasOwnProperty("gamerList")) {
            if (!Array.isArray(message.gamerList))
                return "gamerList: array expected";
            for (var i = 0; i < message.gamerList.length; ++i)
                if (!$util.isInteger(message.gamerList[i]))
                    return "gamerList: integer[] expected";
        }
        return null;
    };
    LeagueData.fromObject = function fromObject(object) {
        if (object instanceof $root.LeagueData)
            return object;
        var message = new $root.LeagueData();
        if (object.leagueId != null)
            message.leagueId = object.leagueId | 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.declaration != null)
            message.declaration = String(object.declaration);
        if (object.createTime != null)
            if ($util.Long)
                (message.createTime = $util.Long.fromValue(object.createTime)).unsigned = false;
            else if (typeof object.createTime === "string")
                message.createTime = parseInt(object.createTime, 10);
            else if (typeof object.createTime === "number")
                message.createTime = object.createTime;
            else if (typeof object.createTime === "object")
                message.createTime = new $util.LongBits(object.createTime.low >>> 0, object.createTime.high >>> 0).toNumber();
        if (object.level != null)
            message.level = object.level | 0;
        if (object.chairman != null)
            message.chairman = object.chairman | 0;
        if (object.gamerList) {
            if (!Array.isArray(object.gamerList))
                throw TypeError(".LeagueData.gamerList: array expected");
            message.gamerList = [];
            for (var i = 0; i < object.gamerList.length; ++i)
                message.gamerList[i] = object.gamerList[i] | 0;
        }
        return message;
    };
    LeagueData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.gamerList = [];
        if (options.defaults) {
            object.leagueId = 0;
            object.name = "";
            object.declaration = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, false);
                object.createTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.createTime = options.longs === String ? "0" : 0;
            object.level = 0;
            object.chairman = 0;
        }
        if (message.leagueId != null && message.hasOwnProperty("leagueId"))
            object.leagueId = message.leagueId;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.declaration != null && message.hasOwnProperty("declaration"))
            object.declaration = message.declaration;
        if (message.createTime != null && message.hasOwnProperty("createTime"))
            if (typeof message.createTime === "number")
                object.createTime = options.longs === String ? String(message.createTime) : message.createTime;
            else
                object.createTime = options.longs === String ? $util.Long.prototype.toString.call(message.createTime) : options.longs === Number ? new $util.LongBits(message.createTime.low >>> 0, message.createTime.high >>> 0).toNumber() : message.createTime;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.chairman != null && message.hasOwnProperty("chairman"))
            object.chairman = message.chairman;
        if (message.gamerList && message.gamerList.length) {
            object.gamerList = [];
            for (var j = 0; j < message.gamerList.length; ++j)
                object.gamerList[j] = message.gamerList[j];
        }
        return object;
    };
    LeagueData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return LeagueData;
})();
$root.OnlineLeague = (function() {
    function OnlineLeague(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    OnlineLeague.prototype.gid = 0;
    OnlineLeague.create = function create(properties) {
        return new OnlineLeague(properties);
    };
    OnlineLeague.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gid != null && message.hasOwnProperty("gid"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gid);
        return writer;
    };
    OnlineLeague.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    OnlineLeague.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.OnlineLeague();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.gid = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    OnlineLeague.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    OnlineLeague.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gid != null && message.hasOwnProperty("gid"))
            if (!$util.isInteger(message.gid))
                return "gid: integer expected";
        return null;
    };
    OnlineLeague.fromObject = function fromObject(object) {
        if (object instanceof $root.OnlineLeague)
            return object;
        var message = new $root.OnlineLeague();
        if (object.gid != null)
            message.gid = object.gid | 0;
        return message;
    };
    OnlineLeague.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.gid = 0;
        if (message.gid != null && message.hasOwnProperty("gid"))
            object.gid = message.gid;
        return object;
    };
    OnlineLeague.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return OnlineLeague;
})();
$root.S2C = (function() {
    function S2C(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }
    S2C.prototype.error = 0;
    S2C.prototype.key = "";
    S2C.prototype.gamerLoginS2C = null;
    S2C.prototype.gamerLoginGetDataS2C = null;
    S2C.prototype.serverTimeS2C = null;
    S2C.prototype.gamerNotifyLoginOtherS2C = null;
    S2C.prototype.gamerSubChatChannelS2C = null;
    S2C.prototype.gamerNotifyExpLevelS2C = null;
    S2C.prototype.gamerFriendChatS2C = null;
    S2C.prototype.gamerWorldChatS2C = null;
    S2C.prototype.gamerTestChatS2C = null;
    S2C.prototype.gamerClubRequestS2C = null;
    S2C.prototype.gamerNotifyNewChatS2C = null;
    S2C.prototype.gamerNewFriendReqS2C = null;
    S2C.prototype.gamerNotifyNewFriendReqS2C = null;
    S2C.prototype.gamerProcessFriendReqS2C = null;
    S2C.prototype.gamerNotifyNewFriendS2C = null;
    S2C.prototype.gamerNotifyMailS2C = null;
    S2C.prototype.gamerNotifyNewMailS2C = null;
    S2C.prototype.gamerGetMailS2C = null;
    S2C.prototype.gamerDelMailS2C = null;
    S2C.prototype.gamerDelHaveReadMailS2C = null;
    S2C.prototype.gamerOneKeyRcvMailRewardS2C = null;
    S2C.prototype.gamerChangeMailStateS2C = null;
    S2C.prototype.gamerMatchS2C = null;
    S2C.prototype.gamerNotifyMatchInfoS2C = null;
    S2C.prototype.gamerPVPSyncS2C = null;
    S2C.prototype.gamerNotifyPVPSyncS2C = null;
    S2C.prototype.gamerNotifyNewPVPResultS2C = null;
    S2C.prototype.gamerNotifyIconChangeS2C = null;
    S2C.prototype.gamerGetRealTimeRankS2C = null;
    S2C.prototype.gamerCheckPVPBattleS2C = null;
    S2C.prototype.gamerUploadWXInfoS2C = null;
    S2C.prototype.createLeagueS2C = null;
    S2C.prototype.gamerNotifyLeagueDataS2C = null;
    S2C.prototype.gamerNotifyLeagueGamerOnlineS2C = null;
    S2C.prototype.gamerGetBackpackS2C = null;
    S2C.prototype.gamerNotifyItemS2C = null;
    S2C.prototype.gamerSellItemS2C = null;
    S2C.prototype.gamerUseItemS2C = null;
    S2C.prototype.gamerCompoundItemS2C = null;
    S2C.prototype.gamerSplitItemS2C = null;
    S2C.prototype.gamerNotifyItemChangeS2C = null;
    S2C.prototype.gamerGetActorListS2C = null;
    S2C.prototype.gamerChangeActorNameS2C = null;
    S2C.prototype.gamerActorUpLevelS2C = null;
    S2C.prototype.gamerNotifyActorChangeS2C = null;
    S2C.prototype.gamerGetActorSetListS2C = null;
    S2C.prototype.gamerGetActorSetRewardS2C = null;
    S2C.prototype.gamerNotifyActorSetChangeS2C = null;
    S2C.prototype.gamerActorSendGiftS2C = null;
    S2C.prototype.gamerActorLabelUpLevelS2C = null;
    S2C.prototype.gamerActorOpenNewLabelS2C = null;
    S2C.prototype.gamerActorBuyNewLabelS2C = null;
    S2C.prototype.gamerActorAdNewLabelS2C = null;
    S2C.prototype.gamerActorFriendshipUpLevelS2C = null;
    S2C.prototype.gamerActorFriendshipTaskReportS2C = null;
    S2C.prototype.gamerActorSkillUpLevelS2C = null;
    S2C.prototype.gMS2C = null;
    S2C.prototype.gamerNotifyStoryListS2C = null;
    S2C.prototype.storyGiveLikeS2C = null;
    S2C.prototype.storyCommentS2C = null;
    S2C.prototype.storyReadCommentS2C = null;
    S2C.prototype.storyGetCommentS2C = null;
    S2C.prototype.storyChangeNameS2C = null;
    S2C.prototype.gamerNotifyBuildInfoS2C = null;
    S2C.prototype.buildLevelUpS2C = null;
    S2C.prototype.buildEndOfLevelUpS2C = null;
    S2C.prototype.buildBreakUpS2C = null;
    S2C.prototype.buildSpeedUpS2C = null;
    S2C.prototype.buildGetProductS2C = null;
    S2C.prototype.actorEnterBuildS2C = null;
    S2C.prototype.actorLeaveBuildS2C = null;
    S2C.prototype.gamerNotifyGashaponInfoS2C = null;
    S2C.prototype.gamerExtractGashaponS2C = null;
    S2C.prototype.storyExtractGashaponS2C = null;
    S2C.prototype.gamerGetAllowanceS2C = null;
    S2C.prototype.getStoryExtractInfoS2C = null;
    S2C.prototype.cleanStoryExtractCDS2C = null;
    S2C.prototype.purchaseStoryExtractNumS2C = null;
    S2C.prototype.gamerNotifyIntelligenceS2C = null;
    S2C.prototype.gamerGetIntelligenceS2C = null;
    S2C.prototype.gamerChangeIntelligenceStateS2C = null;
    S2C.prototype.gamerIntelligenceParseS2C = null;
    S2C.prototype.studioS2C = null;
    S2C.prototype.studioStorySelectS2C = null;
    S2C.prototype.studioActorSelectS2C = null;
    S2C.prototype.studioMatchingDisplayEndS2C = null;
    S2C.prototype.gamerNotifyStudioEventS2C = null;
    S2C.prototype.studioEventOptionSelectS2C = null;
    S2C.prototype.studioStartS2C = null;
    S2C.prototype.studioNextStepS2C = null;
    S2C.prototype.gamerNotifyStudioFirstRewardS2C = null;
    S2C.prototype.studioContinuedListS2C = null;
    S2C.prototype.studioContinuedReceiveS2C = null;
    S2C.prototype.studioContinuedReceiveAllS2C = null;
    S2C.prototype.gamerNotifyActivitiesS2C = null;
    S2C.prototype.getActivityRewardS2C = null;
    S2C.create = function create(properties) {
        return new S2C(properties);
    };
    S2C.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
        if (message.key != null && message.hasOwnProperty("key"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.key);
        if (message.gamerLoginS2C != null && message.hasOwnProperty("gamerLoginS2C"))
            $root.GamerLoginS2C.encode(message.gamerLoginS2C, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.gamerLoginGetDataS2C != null && message.hasOwnProperty("gamerLoginGetDataS2C"))
            $root.GamerLoginGetDataS2C.encode(message.gamerLoginGetDataS2C, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.serverTimeS2C != null && message.hasOwnProperty("serverTimeS2C"))
            $root.ServerTimeS2C.encode(message.serverTimeS2C, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.gamerNotifyLoginOtherS2C != null && message.hasOwnProperty("gamerNotifyLoginOtherS2C"))
            $root.GamerNotifyLoginOtherS2C.encode(message.gamerNotifyLoginOtherS2C, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.gamerSubChatChannelS2C != null && message.hasOwnProperty("gamerSubChatChannelS2C"))
            $root.GamerSubChatChannelS2C.encode(message.gamerSubChatChannelS2C, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.gamerNotifyExpLevelS2C != null && message.hasOwnProperty("gamerNotifyExpLevelS2C"))
            $root.GamerNotifyExpLevelS2C.encode(message.gamerNotifyExpLevelS2C, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.gamerFriendChatS2C != null && message.hasOwnProperty("gamerFriendChatS2C"))
            $root.GamerFriendChatS2C.encode(message.gamerFriendChatS2C, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.gamerWorldChatS2C != null && message.hasOwnProperty("gamerWorldChatS2C"))
            $root.GamerWorldChatS2C.encode(message.gamerWorldChatS2C, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.gamerTestChatS2C != null && message.hasOwnProperty("gamerTestChatS2C"))
            $root.GamerTestChatS2C.encode(message.gamerTestChatS2C, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.gamerClubRequestS2C != null && message.hasOwnProperty("gamerClubRequestS2C"))
            $root.GamerClubRequestS2C.encode(message.gamerClubRequestS2C, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.gamerNotifyNewChatS2C != null && message.hasOwnProperty("gamerNotifyNewChatS2C"))
            $root.GamerNotifyNewChatS2C.encode(message.gamerNotifyNewChatS2C, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.gamerNewFriendReqS2C != null && message.hasOwnProperty("gamerNewFriendReqS2C"))
            $root.GamerNewFriendReqS2C.encode(message.gamerNewFriendReqS2C, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.gamerNotifyNewFriendReqS2C != null && message.hasOwnProperty("gamerNotifyNewFriendReqS2C"))
            $root.GamerNotifyNewFriendReqS2C.encode(message.gamerNotifyNewFriendReqS2C, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.gamerProcessFriendReqS2C != null && message.hasOwnProperty("gamerProcessFriendReqS2C"))
            $root.GamerProcessFriendReqS2C.encode(message.gamerProcessFriendReqS2C, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.gamerNotifyNewFriendS2C != null && message.hasOwnProperty("gamerNotifyNewFriendS2C"))
            $root.GamerNotifyNewFriendS2C.encode(message.gamerNotifyNewFriendS2C, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.gamerNotifyMailS2C != null && message.hasOwnProperty("gamerNotifyMailS2C"))
            $root.GamerNotifyMailS2C.encode(message.gamerNotifyMailS2C, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.gamerNotifyNewMailS2C != null && message.hasOwnProperty("gamerNotifyNewMailS2C"))
            $root.GamerNotifyNewMailS2C.encode(message.gamerNotifyNewMailS2C, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.gamerGetMailS2C != null && message.hasOwnProperty("gamerGetMailS2C"))
            $root.GamerGetMailS2C.encode(message.gamerGetMailS2C, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.gamerDelMailS2C != null && message.hasOwnProperty("gamerDelMailS2C"))
            $root.GamerDelMailS2C.encode(message.gamerDelMailS2C, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.gamerDelHaveReadMailS2C != null && message.hasOwnProperty("gamerDelHaveReadMailS2C"))
            $root.GamerDelHaveReadMailS2C.encode(message.gamerDelHaveReadMailS2C, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.gamerOneKeyRcvMailRewardS2C != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardS2C"))
            $root.GamerOneKeyRcvMailRewardS2C.encode(message.gamerOneKeyRcvMailRewardS2C, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.gamerChangeMailStateS2C != null && message.hasOwnProperty("gamerChangeMailStateS2C"))
            $root.GamerChangeMailStateS2C.encode(message.gamerChangeMailStateS2C, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
        if (message.gamerMatchS2C != null && message.hasOwnProperty("gamerMatchS2C"))
            $root.GamerMatchS2C.encode(message.gamerMatchS2C, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
        if (message.gamerNotifyMatchInfoS2C != null && message.hasOwnProperty("gamerNotifyMatchInfoS2C"))
            $root.GamerNotifyMatchInfoS2C.encode(message.gamerNotifyMatchInfoS2C, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.gamerPVPSyncS2C != null && message.hasOwnProperty("gamerPVPSyncS2C"))
            $root.GamerPVPSyncS2C.encode(message.gamerPVPSyncS2C, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
        if (message.gamerNotifyPVPSyncS2C != null && message.hasOwnProperty("gamerNotifyPVPSyncS2C"))
            $root.GamerNotifyPVPSyncS2C.encode(message.gamerNotifyPVPSyncS2C, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
        if (message.gamerNotifyNewPVPResultS2C != null && message.hasOwnProperty("gamerNotifyNewPVPResultS2C"))
            $root.GamerNotifyNewPVPResultS2C.encode(message.gamerNotifyNewPVPResultS2C, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
        if (message.gamerNotifyIconChangeS2C != null && message.hasOwnProperty("gamerNotifyIconChangeS2C"))
            $root.GamerNotifyIconChangeS2C.encode(message.gamerNotifyIconChangeS2C, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
        if (message.gamerGetRealTimeRankS2C != null && message.hasOwnProperty("gamerGetRealTimeRankS2C"))
            $root.GamerGetRealTimeRankS2C.encode(message.gamerGetRealTimeRankS2C, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.gamerCheckPVPBattleS2C != null && message.hasOwnProperty("gamerCheckPVPBattleS2C"))
            $root.GamerCheckPVPBattleS2C.encode(message.gamerCheckPVPBattleS2C, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.gamerUploadWXInfoS2C != null && message.hasOwnProperty("gamerUploadWXInfoS2C"))
            $root.GamerUploadWXInfoS2C.encode(message.gamerUploadWXInfoS2C, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.createLeagueS2C != null && message.hasOwnProperty("createLeagueS2C"))
            $root.CreateLeagueS2C.encode(message.createLeagueS2C, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.gamerNotifyLeagueDataS2C != null && message.hasOwnProperty("gamerNotifyLeagueDataS2C"))
            $root.GamerNotifyLeagueDataS2C.encode(message.gamerNotifyLeagueDataS2C, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.gamerNotifyLeagueGamerOnlineS2C != null && message.hasOwnProperty("gamerNotifyLeagueGamerOnlineS2C"))
            $root.GamerNotifyLeagueGamerOnlineS2C.encode(message.gamerNotifyLeagueGamerOnlineS2C, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.gamerGetBackpackS2C != null && message.hasOwnProperty("gamerGetBackpackS2C"))
            $root.GamerGetBackpackS2C.encode(message.gamerGetBackpackS2C, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.gamerNotifyItemS2C != null && message.hasOwnProperty("gamerNotifyItemS2C"))
            $root.GamerNotifyItemS2C.encode(message.gamerNotifyItemS2C, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.gamerSellItemS2C != null && message.hasOwnProperty("gamerSellItemS2C"))
            $root.GamerSellItemS2C.encode(message.gamerSellItemS2C, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
        if (message.gamerUseItemS2C != null && message.hasOwnProperty("gamerUseItemS2C"))
            $root.GamerUseItemS2C.encode(message.gamerUseItemS2C, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
        if (message.gamerCompoundItemS2C != null && message.hasOwnProperty("gamerCompoundItemS2C"))
            $root.GamerCompoundItemS2C.encode(message.gamerCompoundItemS2C, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
        if (message.gamerSplitItemS2C != null && message.hasOwnProperty("gamerSplitItemS2C"))
            $root.GamerSplitItemS2C.encode(message.gamerSplitItemS2C, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
        if (message.gamerNotifyItemChangeS2C != null && message.hasOwnProperty("gamerNotifyItemChangeS2C"))
            $root.GamerNotifyItemChangeS2C.encode(message.gamerNotifyItemChangeS2C, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
        if (message.gamerGetActorListS2C != null && message.hasOwnProperty("gamerGetActorListS2C"))
            $root.GamerGetActorListS2C.encode(message.gamerGetActorListS2C, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.gamerChangeActorNameS2C != null && message.hasOwnProperty("gamerChangeActorNameS2C"))
            $root.GamerChangeActorNameS2C.encode(message.gamerChangeActorNameS2C, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
        if (message.gamerActorUpLevelS2C != null && message.hasOwnProperty("gamerActorUpLevelS2C"))
            $root.GamerActorUpLevelS2C.encode(message.gamerActorUpLevelS2C, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
        if (message.gamerNotifyActorChangeS2C != null && message.hasOwnProperty("gamerNotifyActorChangeS2C"))
            $root.GamerNotifyActorChangeS2C.encode(message.gamerNotifyActorChangeS2C, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.gamerGetActorSetListS2C != null && message.hasOwnProperty("gamerGetActorSetListS2C"))
            $root.GamerGetActorSetListS2C.encode(message.gamerGetActorSetListS2C, writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
        if (message.gamerGetActorSetRewardS2C != null && message.hasOwnProperty("gamerGetActorSetRewardS2C"))
            $root.GamerGetActorSetRewardS2C.encode(message.gamerGetActorSetRewardS2C, writer.uint32(/* id 49, wireType 2 =*/394).fork()).ldelim();
        if (message.gamerNotifyActorSetChangeS2C != null && message.hasOwnProperty("gamerNotifyActorSetChangeS2C"))
            $root.GamerNotifyActorSetChangeS2C.encode(message.gamerNotifyActorSetChangeS2C, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
        if (message.gamerActorSendGiftS2C != null && message.hasOwnProperty("gamerActorSendGiftS2C"))
            $root.GamerActorSendGiftS2C.encode(message.gamerActorSendGiftS2C, writer.uint32(/* id 51, wireType 2 =*/410).fork()).ldelim();
        if (message.gamerActorLabelUpLevelS2C != null && message.hasOwnProperty("gamerActorLabelUpLevelS2C"))
            $root.GamerActorLabelUpLevelS2C.encode(message.gamerActorLabelUpLevelS2C, writer.uint32(/* id 52, wireType 2 =*/418).fork()).ldelim();
        if (message.gamerActorOpenNewLabelS2C != null && message.hasOwnProperty("gamerActorOpenNewLabelS2C"))
            $root.GamerActorOpenNewLabelS2C.encode(message.gamerActorOpenNewLabelS2C, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
        if (message.gamerActorBuyNewLabelS2C != null && message.hasOwnProperty("gamerActorBuyNewLabelS2C"))
            $root.GamerActorBuyNewLabelS2C.encode(message.gamerActorBuyNewLabelS2C, writer.uint32(/* id 54, wireType 2 =*/434).fork()).ldelim();
        if (message.gamerActorAdNewLabelS2C != null && message.hasOwnProperty("gamerActorAdNewLabelS2C"))
            $root.GamerActorAdNewLabelS2C.encode(message.gamerActorAdNewLabelS2C, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
        if (message.gamerActorFriendshipUpLevelS2C != null && message.hasOwnProperty("gamerActorFriendshipUpLevelS2C"))
            $root.GamerActorFriendshipUpLevelS2C.encode(message.gamerActorFriendshipUpLevelS2C, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.gamerActorFriendshipTaskReportS2C != null && message.hasOwnProperty("gamerActorFriendshipTaskReportS2C"))
            $root.GamerActorFriendshipTaskReportS2C.encode(message.gamerActorFriendshipTaskReportS2C, writer.uint32(/* id 57, wireType 2 =*/458).fork()).ldelim();
        if (message.gamerActorSkillUpLevelS2C != null && message.hasOwnProperty("gamerActorSkillUpLevelS2C"))
            $root.GamerActorSkillUpLevelS2C.encode(message.gamerActorSkillUpLevelS2C, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
        if (message.gMS2C != null && message.hasOwnProperty("gMS2C"))
            $root.GMS2C.encode(message.gMS2C, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.gamerNotifyStoryListS2C != null && message.hasOwnProperty("gamerNotifyStoryListS2C"))
            $root.GamerNotifyStoryListS2C.encode(message.gamerNotifyStoryListS2C, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
        if (message.storyGiveLikeS2C != null && message.hasOwnProperty("storyGiveLikeS2C"))
            $root.StoryGiveLikeS2C.encode(message.storyGiveLikeS2C, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
        if (message.storyCommentS2C != null && message.hasOwnProperty("storyCommentS2C"))
            $root.StoryCommentS2C.encode(message.storyCommentS2C, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
        if (message.storyReadCommentS2C != null && message.hasOwnProperty("storyReadCommentS2C"))
            $root.StoryReadCommentS2C.encode(message.storyReadCommentS2C, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
        if (message.storyGetCommentS2C != null && message.hasOwnProperty("storyGetCommentS2C"))
            $root.StoryGetCommentS2C.encode(message.storyGetCommentS2C, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
        if (message.storyChangeNameS2C != null && message.hasOwnProperty("storyChangeNameS2C"))
            $root.StoryChangeNameS2C.encode(message.storyChangeNameS2C, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
        if (message.gamerNotifyBuildInfoS2C != null && message.hasOwnProperty("gamerNotifyBuildInfoS2C"))
            $root.GamerNotifyBuildInfoS2C.encode(message.gamerNotifyBuildInfoS2C, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
        if (message.buildLevelUpS2C != null && message.hasOwnProperty("buildLevelUpS2C"))
            $root.BuildLevelUpS2C.encode(message.buildLevelUpS2C, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
        if (message.buildEndOfLevelUpS2C != null && message.hasOwnProperty("buildEndOfLevelUpS2C"))
            $root.BuildEndOfLevelUpS2C.encode(message.buildEndOfLevelUpS2C, writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
        if (message.buildBreakUpS2C != null && message.hasOwnProperty("buildBreakUpS2C"))
            $root.BuildBreakUpS2C.encode(message.buildBreakUpS2C, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
        if (message.buildSpeedUpS2C != null && message.hasOwnProperty("buildSpeedUpS2C"))
            $root.BuildSpeedUpS2C.encode(message.buildSpeedUpS2C, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
        if (message.buildGetProductS2C != null && message.hasOwnProperty("buildGetProductS2C"))
            $root.BuildGetProductS2C.encode(message.buildGetProductS2C, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
        if (message.actorEnterBuildS2C != null && message.hasOwnProperty("actorEnterBuildS2C"))
            $root.ActorEnterBuildS2C.encode(message.actorEnterBuildS2C, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
        if (message.actorLeaveBuildS2C != null && message.hasOwnProperty("actorLeaveBuildS2C"))
            $root.ActorLeaveBuildS2C.encode(message.actorLeaveBuildS2C, writer.uint32(/* id 73, wireType 2 =*/586).fork()).ldelim();
        if (message.gamerNotifyGashaponInfoS2C != null && message.hasOwnProperty("gamerNotifyGashaponInfoS2C"))
            $root.GamerNotifyGashaponInfoS2C.encode(message.gamerNotifyGashaponInfoS2C, writer.uint32(/* id 74, wireType 2 =*/594).fork()).ldelim();
        if (message.gamerExtractGashaponS2C != null && message.hasOwnProperty("gamerExtractGashaponS2C"))
            $root.GamerExtractGashaponS2C.encode(message.gamerExtractGashaponS2C, writer.uint32(/* id 75, wireType 2 =*/602).fork()).ldelim();
        if (message.storyExtractGashaponS2C != null && message.hasOwnProperty("storyExtractGashaponS2C"))
            $root.StoryExtractGashaponS2C.encode(message.storyExtractGashaponS2C, writer.uint32(/* id 76, wireType 2 =*/610).fork()).ldelim();
        if (message.gamerGetAllowanceS2C != null && message.hasOwnProperty("gamerGetAllowanceS2C"))
            $root.GamerGetAllowanceS2C.encode(message.gamerGetAllowanceS2C, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
        if (message.getStoryExtractInfoS2C != null && message.hasOwnProperty("getStoryExtractInfoS2C"))
            $root.GetStoryExtractInfoS2C.encode(message.getStoryExtractInfoS2C, writer.uint32(/* id 78, wireType 2 =*/626).fork()).ldelim();
        if (message.cleanStoryExtractCDS2C != null && message.hasOwnProperty("cleanStoryExtractCDS2C"))
            $root.CleanStoryExtractCDS2C.encode(message.cleanStoryExtractCDS2C, writer.uint32(/* id 79, wireType 2 =*/634).fork()).ldelim();
        if (message.purchaseStoryExtractNumS2C != null && message.hasOwnProperty("purchaseStoryExtractNumS2C"))
            $root.PurchaseStoryExtractNumS2C.encode(message.purchaseStoryExtractNumS2C, writer.uint32(/* id 80, wireType 2 =*/642).fork()).ldelim();
        if (message.gamerNotifyIntelligenceS2C != null && message.hasOwnProperty("gamerNotifyIntelligenceS2C"))
            $root.GamerNotifyIntelligenceS2C.encode(message.gamerNotifyIntelligenceS2C, writer.uint32(/* id 81, wireType 2 =*/650).fork()).ldelim();
        if (message.gamerGetIntelligenceS2C != null && message.hasOwnProperty("gamerGetIntelligenceS2C"))
            $root.GamerGetIntelligenceS2C.encode(message.gamerGetIntelligenceS2C, writer.uint32(/* id 82, wireType 2 =*/658).fork()).ldelim();
        if (message.gamerChangeIntelligenceStateS2C != null && message.hasOwnProperty("gamerChangeIntelligenceStateS2C"))
            $root.GamerChangeIntelligenceStateS2C.encode(message.gamerChangeIntelligenceStateS2C, writer.uint32(/* id 83, wireType 2 =*/666).fork()).ldelim();
        if (message.gamerIntelligenceParseS2C != null && message.hasOwnProperty("gamerIntelligenceParseS2C"))
            $root.GamerIntelligenceParseS2C.encode(message.gamerIntelligenceParseS2C, writer.uint32(/* id 84, wireType 2 =*/674).fork()).ldelim();
        if (message.studioS2C != null && message.hasOwnProperty("studioS2C"))
            $root.StudioS2C.encode(message.studioS2C, writer.uint32(/* id 85, wireType 2 =*/682).fork()).ldelim();
        if (message.studioStorySelectS2C != null && message.hasOwnProperty("studioStorySelectS2C"))
            $root.StudioStorySelectS2C.encode(message.studioStorySelectS2C, writer.uint32(/* id 86, wireType 2 =*/690).fork()).ldelim();
        if (message.studioActorSelectS2C != null && message.hasOwnProperty("studioActorSelectS2C"))
            $root.StudioActorSelectS2C.encode(message.studioActorSelectS2C, writer.uint32(/* id 87, wireType 2 =*/698).fork()).ldelim();
        if (message.studioMatchingDisplayEndS2C != null && message.hasOwnProperty("studioMatchingDisplayEndS2C"))
            $root.StudioMatchingDisplayEndS2C.encode(message.studioMatchingDisplayEndS2C, writer.uint32(/* id 88, wireType 2 =*/706).fork()).ldelim();
        if (message.gamerNotifyStudioEventS2C != null && message.hasOwnProperty("gamerNotifyStudioEventS2C"))
            $root.GamerNotifyStudioEventS2C.encode(message.gamerNotifyStudioEventS2C, writer.uint32(/* id 89, wireType 2 =*/714).fork()).ldelim();
        if (message.studioEventOptionSelectS2C != null && message.hasOwnProperty("studioEventOptionSelectS2C"))
            $root.StudioEventOptionSelectS2C.encode(message.studioEventOptionSelectS2C, writer.uint32(/* id 90, wireType 2 =*/722).fork()).ldelim();
        if (message.studioStartS2C != null && message.hasOwnProperty("studioStartS2C"))
            $root.StudioStartS2C.encode(message.studioStartS2C, writer.uint32(/* id 91, wireType 2 =*/730).fork()).ldelim();
        if (message.studioNextStepS2C != null && message.hasOwnProperty("studioNextStepS2C"))
            $root.StudioNextStepS2C.encode(message.studioNextStepS2C, writer.uint32(/* id 92, wireType 2 =*/738).fork()).ldelim();
        if (message.gamerNotifyStudioFirstRewardS2C != null && message.hasOwnProperty("gamerNotifyStudioFirstRewardS2C"))
            $root.GamerNotifyStudioFirstRewardS2C.encode(message.gamerNotifyStudioFirstRewardS2C, writer.uint32(/* id 93, wireType 2 =*/746).fork()).ldelim();
        if (message.studioContinuedListS2C != null && message.hasOwnProperty("studioContinuedListS2C"))
            $root.StudioContinuedListS2C.encode(message.studioContinuedListS2C, writer.uint32(/* id 94, wireType 2 =*/754).fork()).ldelim();
        if (message.studioContinuedReceiveS2C != null && message.hasOwnProperty("studioContinuedReceiveS2C"))
            $root.StudioContinuedReceiveS2C.encode(message.studioContinuedReceiveS2C, writer.uint32(/* id 95, wireType 2 =*/762).fork()).ldelim();
        if (message.studioContinuedReceiveAllS2C != null && message.hasOwnProperty("studioContinuedReceiveAllS2C"))
            $root.StudioContinuedReceiveAllS2C.encode(message.studioContinuedReceiveAllS2C, writer.uint32(/* id 96, wireType 2 =*/770).fork()).ldelim();
        if (message.gamerNotifyActivitiesS2C != null && message.hasOwnProperty("gamerNotifyActivitiesS2C"))
            $root.GamerNotifyActivitiesS2C.encode(message.gamerNotifyActivitiesS2C, writer.uint32(/* id 97, wireType 2 =*/778).fork()).ldelim();
        if (message.getActivityRewardS2C != null && message.hasOwnProperty("getActivityRewardS2C"))
            $root.GetActivityRewardS2C.encode(message.getActivityRewardS2C, writer.uint32(/* id 98, wireType 2 =*/786).fork()).ldelim();
        return writer;
    };
    S2C.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };
    S2C.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.S2C();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.error = reader.int32();
                break;
            case 2:
                message.key = reader.string();
                break;
            case 3:
                message.gamerLoginS2C = $root.GamerLoginS2C.decode(reader, reader.uint32());
                break;
            case 4:
                message.gamerLoginGetDataS2C = $root.GamerLoginGetDataS2C.decode(reader, reader.uint32());
                break;
            case 5:
                message.serverTimeS2C = $root.ServerTimeS2C.decode(reader, reader.uint32());
                break;
            case 6:
                message.gamerNotifyLoginOtherS2C = $root.GamerNotifyLoginOtherS2C.decode(reader, reader.uint32());
                break;
            case 7:
                message.gamerSubChatChannelS2C = $root.GamerSubChatChannelS2C.decode(reader, reader.uint32());
                break;
            case 8:
                message.gamerNotifyExpLevelS2C = $root.GamerNotifyExpLevelS2C.decode(reader, reader.uint32());
                break;
            case 9:
                message.gamerFriendChatS2C = $root.GamerFriendChatS2C.decode(reader, reader.uint32());
                break;
            case 10:
                message.gamerWorldChatS2C = $root.GamerWorldChatS2C.decode(reader, reader.uint32());
                break;
            case 11:
                message.gamerTestChatS2C = $root.GamerTestChatS2C.decode(reader, reader.uint32());
                break;
            case 12:
                message.gamerClubRequestS2C = $root.GamerClubRequestS2C.decode(reader, reader.uint32());
                break;
            case 13:
                message.gamerNotifyNewChatS2C = $root.GamerNotifyNewChatS2C.decode(reader, reader.uint32());
                break;
            case 14:
                message.gamerNewFriendReqS2C = $root.GamerNewFriendReqS2C.decode(reader, reader.uint32());
                break;
            case 15:
                message.gamerNotifyNewFriendReqS2C = $root.GamerNotifyNewFriendReqS2C.decode(reader, reader.uint32());
                break;
            case 16:
                message.gamerProcessFriendReqS2C = $root.GamerProcessFriendReqS2C.decode(reader, reader.uint32());
                break;
            case 17:
                message.gamerNotifyNewFriendS2C = $root.GamerNotifyNewFriendS2C.decode(reader, reader.uint32());
                break;
            case 18:
                message.gamerNotifyMailS2C = $root.GamerNotifyMailS2C.decode(reader, reader.uint32());
                break;
            case 19:
                message.gamerNotifyNewMailS2C = $root.GamerNotifyNewMailS2C.decode(reader, reader.uint32());
                break;
            case 20:
                message.gamerGetMailS2C = $root.GamerGetMailS2C.decode(reader, reader.uint32());
                break;
            case 21:
                message.gamerDelMailS2C = $root.GamerDelMailS2C.decode(reader, reader.uint32());
                break;
            case 22:
                message.gamerDelHaveReadMailS2C = $root.GamerDelHaveReadMailS2C.decode(reader, reader.uint32());
                break;
            case 23:
                message.gamerOneKeyRcvMailRewardS2C = $root.GamerOneKeyRcvMailRewardS2C.decode(reader, reader.uint32());
                break;
            case 24:
                message.gamerChangeMailStateS2C = $root.GamerChangeMailStateS2C.decode(reader, reader.uint32());
                break;
            case 25:
                message.gamerMatchS2C = $root.GamerMatchS2C.decode(reader, reader.uint32());
                break;
            case 26:
                message.gamerNotifyMatchInfoS2C = $root.GamerNotifyMatchInfoS2C.decode(reader, reader.uint32());
                break;
            case 27:
                message.gamerPVPSyncS2C = $root.GamerPVPSyncS2C.decode(reader, reader.uint32());
                break;
            case 28:
                message.gamerNotifyPVPSyncS2C = $root.GamerNotifyPVPSyncS2C.decode(reader, reader.uint32());
                break;
            case 29:
                message.gamerNotifyNewPVPResultS2C = $root.GamerNotifyNewPVPResultS2C.decode(reader, reader.uint32());
                break;
            case 30:
                message.gamerNotifyIconChangeS2C = $root.GamerNotifyIconChangeS2C.decode(reader, reader.uint32());
                break;
            case 31:
                message.gamerGetRealTimeRankS2C = $root.GamerGetRealTimeRankS2C.decode(reader, reader.uint32());
                break;
            case 32:
                message.gamerCheckPVPBattleS2C = $root.GamerCheckPVPBattleS2C.decode(reader, reader.uint32());
                break;
            case 33:
                message.gamerUploadWXInfoS2C = $root.GamerUploadWXInfoS2C.decode(reader, reader.uint32());
                break;
            case 34:
                message.createLeagueS2C = $root.CreateLeagueS2C.decode(reader, reader.uint32());
                break;
            case 35:
                message.gamerNotifyLeagueDataS2C = $root.GamerNotifyLeagueDataS2C.decode(reader, reader.uint32());
                break;
            case 36:
                message.gamerNotifyLeagueGamerOnlineS2C = $root.GamerNotifyLeagueGamerOnlineS2C.decode(reader, reader.uint32());
                break;
            case 37:
                message.gamerGetBackpackS2C = $root.GamerGetBackpackS2C.decode(reader, reader.uint32());
                break;
            case 38:
                message.gamerNotifyItemS2C = $root.GamerNotifyItemS2C.decode(reader, reader.uint32());
                break;
            case 39:
                message.gamerSellItemS2C = $root.GamerSellItemS2C.decode(reader, reader.uint32());
                break;
            case 40:
                message.gamerUseItemS2C = $root.GamerUseItemS2C.decode(reader, reader.uint32());
                break;
            case 41:
                message.gamerCompoundItemS2C = $root.GamerCompoundItemS2C.decode(reader, reader.uint32());
                break;
            case 42:
                message.gamerSplitItemS2C = $root.GamerSplitItemS2C.decode(reader, reader.uint32());
                break;
            case 43:
                message.gamerNotifyItemChangeS2C = $root.GamerNotifyItemChangeS2C.decode(reader, reader.uint32());
                break;
            case 44:
                message.gamerGetActorListS2C = $root.GamerGetActorListS2C.decode(reader, reader.uint32());
                break;
            case 45:
                message.gamerChangeActorNameS2C = $root.GamerChangeActorNameS2C.decode(reader, reader.uint32());
                break;
            case 46:
                message.gamerActorUpLevelS2C = $root.GamerActorUpLevelS2C.decode(reader, reader.uint32());
                break;
            case 47:
                message.gamerNotifyActorChangeS2C = $root.GamerNotifyActorChangeS2C.decode(reader, reader.uint32());
                break;
            case 48:
                message.gamerGetActorSetListS2C = $root.GamerGetActorSetListS2C.decode(reader, reader.uint32());
                break;
            case 49:
                message.gamerGetActorSetRewardS2C = $root.GamerGetActorSetRewardS2C.decode(reader, reader.uint32());
                break;
            case 50:
                message.gamerNotifyActorSetChangeS2C = $root.GamerNotifyActorSetChangeS2C.decode(reader, reader.uint32());
                break;
            case 51:
                message.gamerActorSendGiftS2C = $root.GamerActorSendGiftS2C.decode(reader, reader.uint32());
                break;
            case 52:
                message.gamerActorLabelUpLevelS2C = $root.GamerActorLabelUpLevelS2C.decode(reader, reader.uint32());
                break;
            case 53:
                message.gamerActorOpenNewLabelS2C = $root.GamerActorOpenNewLabelS2C.decode(reader, reader.uint32());
                break;
            case 54:
                message.gamerActorBuyNewLabelS2C = $root.GamerActorBuyNewLabelS2C.decode(reader, reader.uint32());
                break;
            case 55:
                message.gamerActorAdNewLabelS2C = $root.GamerActorAdNewLabelS2C.decode(reader, reader.uint32());
                break;
            case 56:
                message.gamerActorFriendshipUpLevelS2C = $root.GamerActorFriendshipUpLevelS2C.decode(reader, reader.uint32());
                break;
            case 57:
                message.gamerActorFriendshipTaskReportS2C = $root.GamerActorFriendshipTaskReportS2C.decode(reader, reader.uint32());
                break;
            case 58:
                message.gamerActorSkillUpLevelS2C = $root.GamerActorSkillUpLevelS2C.decode(reader, reader.uint32());
                break;
            case 59:
                message.gMS2C = $root.GMS2C.decode(reader, reader.uint32());
                break;
            case 60:
                message.gamerNotifyStoryListS2C = $root.GamerNotifyStoryListS2C.decode(reader, reader.uint32());
                break;
            case 61:
                message.storyGiveLikeS2C = $root.StoryGiveLikeS2C.decode(reader, reader.uint32());
                break;
            case 62:
                message.storyCommentS2C = $root.StoryCommentS2C.decode(reader, reader.uint32());
                break;
            case 63:
                message.storyReadCommentS2C = $root.StoryReadCommentS2C.decode(reader, reader.uint32());
                break;
            case 64:
                message.storyGetCommentS2C = $root.StoryGetCommentS2C.decode(reader, reader.uint32());
                break;
            case 65:
                message.storyChangeNameS2C = $root.StoryChangeNameS2C.decode(reader, reader.uint32());
                break;
            case 66:
                message.gamerNotifyBuildInfoS2C = $root.GamerNotifyBuildInfoS2C.decode(reader, reader.uint32());
                break;
            case 67:
                message.buildLevelUpS2C = $root.BuildLevelUpS2C.decode(reader, reader.uint32());
                break;
            case 68:
                message.buildEndOfLevelUpS2C = $root.BuildEndOfLevelUpS2C.decode(reader, reader.uint32());
                break;
            case 69:
                message.buildBreakUpS2C = $root.BuildBreakUpS2C.decode(reader, reader.uint32());
                break;
            case 70:
                message.buildSpeedUpS2C = $root.BuildSpeedUpS2C.decode(reader, reader.uint32());
                break;
            case 71:
                message.buildGetProductS2C = $root.BuildGetProductS2C.decode(reader, reader.uint32());
                break;
            case 72:
                message.actorEnterBuildS2C = $root.ActorEnterBuildS2C.decode(reader, reader.uint32());
                break;
            case 73:
                message.actorLeaveBuildS2C = $root.ActorLeaveBuildS2C.decode(reader, reader.uint32());
                break;
            case 74:
                message.gamerNotifyGashaponInfoS2C = $root.GamerNotifyGashaponInfoS2C.decode(reader, reader.uint32());
                break;
            case 75:
                message.gamerExtractGashaponS2C = $root.GamerExtractGashaponS2C.decode(reader, reader.uint32());
                break;
            case 76:
                message.storyExtractGashaponS2C = $root.StoryExtractGashaponS2C.decode(reader, reader.uint32());
                break;
            case 77:
                message.gamerGetAllowanceS2C = $root.GamerGetAllowanceS2C.decode(reader, reader.uint32());
                break;
            case 78:
                message.getStoryExtractInfoS2C = $root.GetStoryExtractInfoS2C.decode(reader, reader.uint32());
                break;
            case 79:
                message.cleanStoryExtractCDS2C = $root.CleanStoryExtractCDS2C.decode(reader, reader.uint32());
                break;
            case 80:
                message.purchaseStoryExtractNumS2C = $root.PurchaseStoryExtractNumS2C.decode(reader, reader.uint32());
                break;
            case 81:
                message.gamerNotifyIntelligenceS2C = $root.GamerNotifyIntelligenceS2C.decode(reader, reader.uint32());
                break;
            case 82:
                message.gamerGetIntelligenceS2C = $root.GamerGetIntelligenceS2C.decode(reader, reader.uint32());
                break;
            case 83:
                message.gamerChangeIntelligenceStateS2C = $root.GamerChangeIntelligenceStateS2C.decode(reader, reader.uint32());
                break;
            case 84:
                message.gamerIntelligenceParseS2C = $root.GamerIntelligenceParseS2C.decode(reader, reader.uint32());
                break;
            case 85:
                message.studioS2C = $root.StudioS2C.decode(reader, reader.uint32());
                break;
            case 86:
                message.studioStorySelectS2C = $root.StudioStorySelectS2C.decode(reader, reader.uint32());
                break;
            case 87:
                message.studioActorSelectS2C = $root.StudioActorSelectS2C.decode(reader, reader.uint32());
                break;
            case 88:
                message.studioMatchingDisplayEndS2C = $root.StudioMatchingDisplayEndS2C.decode(reader, reader.uint32());
                break;
            case 89:
                message.gamerNotifyStudioEventS2C = $root.GamerNotifyStudioEventS2C.decode(reader, reader.uint32());
                break;
            case 90:
                message.studioEventOptionSelectS2C = $root.StudioEventOptionSelectS2C.decode(reader, reader.uint32());
                break;
            case 91:
                message.studioStartS2C = $root.StudioStartS2C.decode(reader, reader.uint32());
                break;
            case 92:
                message.studioNextStepS2C = $root.StudioNextStepS2C.decode(reader, reader.uint32());
                break;
            case 93:
                message.gamerNotifyStudioFirstRewardS2C = $root.GamerNotifyStudioFirstRewardS2C.decode(reader, reader.uint32());
                break;
            case 94:
                message.studioContinuedListS2C = $root.StudioContinuedListS2C.decode(reader, reader.uint32());
                break;
            case 95:
                message.studioContinuedReceiveS2C = $root.StudioContinuedReceiveS2C.decode(reader, reader.uint32());
                break;
            case 96:
                message.studioContinuedReceiveAllS2C = $root.StudioContinuedReceiveAllS2C.decode(reader, reader.uint32());
                break;
            case 97:
                message.gamerNotifyActivitiesS2C = $root.GamerNotifyActivitiesS2C.decode(reader, reader.uint32());
                break;
            case 98:
                message.getActivityRewardS2C = $root.GetActivityRewardS2C.decode(reader, reader.uint32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };
    S2C.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };
    S2C.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        if (message.gamerLoginS2C != null && message.hasOwnProperty("gamerLoginS2C")) {
            var error = $root.GamerLoginS2C.verify(message.gamerLoginS2C);
            if (error)
                return "gamerLoginS2C." + error;
        }
        if (message.gamerLoginGetDataS2C != null && message.hasOwnProperty("gamerLoginGetDataS2C")) {
            var error = $root.GamerLoginGetDataS2C.verify(message.gamerLoginGetDataS2C);
            if (error)
                return "gamerLoginGetDataS2C." + error;
        }
        if (message.serverTimeS2C != null && message.hasOwnProperty("serverTimeS2C")) {
            var error = $root.ServerTimeS2C.verify(message.serverTimeS2C);
            if (error)
                return "serverTimeS2C." + error;
        }
        if (message.gamerNotifyLoginOtherS2C != null && message.hasOwnProperty("gamerNotifyLoginOtherS2C")) {
            var error = $root.GamerNotifyLoginOtherS2C.verify(message.gamerNotifyLoginOtherS2C);
            if (error)
                return "gamerNotifyLoginOtherS2C." + error;
        }
        if (message.gamerSubChatChannelS2C != null && message.hasOwnProperty("gamerSubChatChannelS2C")) {
            var error = $root.GamerSubChatChannelS2C.verify(message.gamerSubChatChannelS2C);
            if (error)
                return "gamerSubChatChannelS2C." + error;
        }
        if (message.gamerNotifyExpLevelS2C != null && message.hasOwnProperty("gamerNotifyExpLevelS2C")) {
            var error = $root.GamerNotifyExpLevelS2C.verify(message.gamerNotifyExpLevelS2C);
            if (error)
                return "gamerNotifyExpLevelS2C." + error;
        }
        if (message.gamerFriendChatS2C != null && message.hasOwnProperty("gamerFriendChatS2C")) {
            var error = $root.GamerFriendChatS2C.verify(message.gamerFriendChatS2C);
            if (error)
                return "gamerFriendChatS2C." + error;
        }
        if (message.gamerWorldChatS2C != null && message.hasOwnProperty("gamerWorldChatS2C")) {
            var error = $root.GamerWorldChatS2C.verify(message.gamerWorldChatS2C);
            if (error)
                return "gamerWorldChatS2C." + error;
        }
        if (message.gamerTestChatS2C != null && message.hasOwnProperty("gamerTestChatS2C")) {
            var error = $root.GamerTestChatS2C.verify(message.gamerTestChatS2C);
            if (error)
                return "gamerTestChatS2C." + error;
        }
        if (message.gamerClubRequestS2C != null && message.hasOwnProperty("gamerClubRequestS2C")) {
            var error = $root.GamerClubRequestS2C.verify(message.gamerClubRequestS2C);
            if (error)
                return "gamerClubRequestS2C." + error;
        }
        if (message.gamerNotifyNewChatS2C != null && message.hasOwnProperty("gamerNotifyNewChatS2C")) {
            var error = $root.GamerNotifyNewChatS2C.verify(message.gamerNotifyNewChatS2C);
            if (error)
                return "gamerNotifyNewChatS2C." + error;
        }
        if (message.gamerNewFriendReqS2C != null && message.hasOwnProperty("gamerNewFriendReqS2C")) {
            var error = $root.GamerNewFriendReqS2C.verify(message.gamerNewFriendReqS2C);
            if (error)
                return "gamerNewFriendReqS2C." + error;
        }
        if (message.gamerNotifyNewFriendReqS2C != null && message.hasOwnProperty("gamerNotifyNewFriendReqS2C")) {
            var error = $root.GamerNotifyNewFriendReqS2C.verify(message.gamerNotifyNewFriendReqS2C);
            if (error)
                return "gamerNotifyNewFriendReqS2C." + error;
        }
        if (message.gamerProcessFriendReqS2C != null && message.hasOwnProperty("gamerProcessFriendReqS2C")) {
            var error = $root.GamerProcessFriendReqS2C.verify(message.gamerProcessFriendReqS2C);
            if (error)
                return "gamerProcessFriendReqS2C." + error;
        }
        if (message.gamerNotifyNewFriendS2C != null && message.hasOwnProperty("gamerNotifyNewFriendS2C")) {
            var error = $root.GamerNotifyNewFriendS2C.verify(message.gamerNotifyNewFriendS2C);
            if (error)
                return "gamerNotifyNewFriendS2C." + error;
        }
        if (message.gamerNotifyMailS2C != null && message.hasOwnProperty("gamerNotifyMailS2C")) {
            var error = $root.GamerNotifyMailS2C.verify(message.gamerNotifyMailS2C);
            if (error)
                return "gamerNotifyMailS2C." + error;
        }
        if (message.gamerNotifyNewMailS2C != null && message.hasOwnProperty("gamerNotifyNewMailS2C")) {
            var error = $root.GamerNotifyNewMailS2C.verify(message.gamerNotifyNewMailS2C);
            if (error)
                return "gamerNotifyNewMailS2C." + error;
        }
        if (message.gamerGetMailS2C != null && message.hasOwnProperty("gamerGetMailS2C")) {
            var error = $root.GamerGetMailS2C.verify(message.gamerGetMailS2C);
            if (error)
                return "gamerGetMailS2C." + error;
        }
        if (message.gamerDelMailS2C != null && message.hasOwnProperty("gamerDelMailS2C")) {
            var error = $root.GamerDelMailS2C.verify(message.gamerDelMailS2C);
            if (error)
                return "gamerDelMailS2C." + error;
        }
        if (message.gamerDelHaveReadMailS2C != null && message.hasOwnProperty("gamerDelHaveReadMailS2C")) {
            var error = $root.GamerDelHaveReadMailS2C.verify(message.gamerDelHaveReadMailS2C);
            if (error)
                return "gamerDelHaveReadMailS2C." + error;
        }
        if (message.gamerOneKeyRcvMailRewardS2C != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardS2C")) {
            var error = $root.GamerOneKeyRcvMailRewardS2C.verify(message.gamerOneKeyRcvMailRewardS2C);
            if (error)
                return "gamerOneKeyRcvMailRewardS2C." + error;
        }
        if (message.gamerChangeMailStateS2C != null && message.hasOwnProperty("gamerChangeMailStateS2C")) {
            var error = $root.GamerChangeMailStateS2C.verify(message.gamerChangeMailStateS2C);
            if (error)
                return "gamerChangeMailStateS2C." + error;
        }
        if (message.gamerMatchS2C != null && message.hasOwnProperty("gamerMatchS2C")) {
            var error = $root.GamerMatchS2C.verify(message.gamerMatchS2C);
            if (error)
                return "gamerMatchS2C." + error;
        }
        if (message.gamerNotifyMatchInfoS2C != null && message.hasOwnProperty("gamerNotifyMatchInfoS2C")) {
            var error = $root.GamerNotifyMatchInfoS2C.verify(message.gamerNotifyMatchInfoS2C);
            if (error)
                return "gamerNotifyMatchInfoS2C." + error;
        }
        if (message.gamerPVPSyncS2C != null && message.hasOwnProperty("gamerPVPSyncS2C")) {
            var error = $root.GamerPVPSyncS2C.verify(message.gamerPVPSyncS2C);
            if (error)
                return "gamerPVPSyncS2C." + error;
        }
        if (message.gamerNotifyPVPSyncS2C != null && message.hasOwnProperty("gamerNotifyPVPSyncS2C")) {
            var error = $root.GamerNotifyPVPSyncS2C.verify(message.gamerNotifyPVPSyncS2C);
            if (error)
                return "gamerNotifyPVPSyncS2C." + error;
        }
        if (message.gamerNotifyNewPVPResultS2C != null && message.hasOwnProperty("gamerNotifyNewPVPResultS2C")) {
            var error = $root.GamerNotifyNewPVPResultS2C.verify(message.gamerNotifyNewPVPResultS2C);
            if (error)
                return "gamerNotifyNewPVPResultS2C." + error;
        }
        if (message.gamerNotifyIconChangeS2C != null && message.hasOwnProperty("gamerNotifyIconChangeS2C")) {
            var error = $root.GamerNotifyIconChangeS2C.verify(message.gamerNotifyIconChangeS2C);
            if (error)
                return "gamerNotifyIconChangeS2C." + error;
        }
        if (message.gamerGetRealTimeRankS2C != null && message.hasOwnProperty("gamerGetRealTimeRankS2C")) {
            var error = $root.GamerGetRealTimeRankS2C.verify(message.gamerGetRealTimeRankS2C);
            if (error)
                return "gamerGetRealTimeRankS2C." + error;
        }
        if (message.gamerCheckPVPBattleS2C != null && message.hasOwnProperty("gamerCheckPVPBattleS2C")) {
            var error = $root.GamerCheckPVPBattleS2C.verify(message.gamerCheckPVPBattleS2C);
            if (error)
                return "gamerCheckPVPBattleS2C." + error;
        }
        if (message.gamerUploadWXInfoS2C != null && message.hasOwnProperty("gamerUploadWXInfoS2C")) {
            var error = $root.GamerUploadWXInfoS2C.verify(message.gamerUploadWXInfoS2C);
            if (error)
                return "gamerUploadWXInfoS2C." + error;
        }
        if (message.createLeagueS2C != null && message.hasOwnProperty("createLeagueS2C")) {
            var error = $root.CreateLeagueS2C.verify(message.createLeagueS2C);
            if (error)
                return "createLeagueS2C." + error;
        }
        if (message.gamerNotifyLeagueDataS2C != null && message.hasOwnProperty("gamerNotifyLeagueDataS2C")) {
            var error = $root.GamerNotifyLeagueDataS2C.verify(message.gamerNotifyLeagueDataS2C);
            if (error)
                return "gamerNotifyLeagueDataS2C." + error;
        }
        if (message.gamerNotifyLeagueGamerOnlineS2C != null && message.hasOwnProperty("gamerNotifyLeagueGamerOnlineS2C")) {
            var error = $root.GamerNotifyLeagueGamerOnlineS2C.verify(message.gamerNotifyLeagueGamerOnlineS2C);
            if (error)
                return "gamerNotifyLeagueGamerOnlineS2C." + error;
        }
        if (message.gamerGetBackpackS2C != null && message.hasOwnProperty("gamerGetBackpackS2C")) {
            var error = $root.GamerGetBackpackS2C.verify(message.gamerGetBackpackS2C);
            if (error)
                return "gamerGetBackpackS2C." + error;
        }
        if (message.gamerNotifyItemS2C != null && message.hasOwnProperty("gamerNotifyItemS2C")) {
            var error = $root.GamerNotifyItemS2C.verify(message.gamerNotifyItemS2C);
            if (error)
                return "gamerNotifyItemS2C." + error;
        }
        if (message.gamerSellItemS2C != null && message.hasOwnProperty("gamerSellItemS2C")) {
            var error = $root.GamerSellItemS2C.verify(message.gamerSellItemS2C);
            if (error)
                return "gamerSellItemS2C." + error;
        }
        if (message.gamerUseItemS2C != null && message.hasOwnProperty("gamerUseItemS2C")) {
            var error = $root.GamerUseItemS2C.verify(message.gamerUseItemS2C);
            if (error)
                return "gamerUseItemS2C." + error;
        }
        if (message.gamerCompoundItemS2C != null && message.hasOwnProperty("gamerCompoundItemS2C")) {
            var error = $root.GamerCompoundItemS2C.verify(message.gamerCompoundItemS2C);
            if (error)
                return "gamerCompoundItemS2C." + error;
        }
        if (message.gamerSplitItemS2C != null && message.hasOwnProperty("gamerSplitItemS2C")) {
            var error = $root.GamerSplitItemS2C.verify(message.gamerSplitItemS2C);
            if (error)
                return "gamerSplitItemS2C." + error;
        }
        if (message.gamerNotifyItemChangeS2C != null && message.hasOwnProperty("gamerNotifyItemChangeS2C")) {
            var error = $root.GamerNotifyItemChangeS2C.verify(message.gamerNotifyItemChangeS2C);
            if (error)
                return "gamerNotifyItemChangeS2C." + error;
        }
        if (message.gamerGetActorListS2C != null && message.hasOwnProperty("gamerGetActorListS2C")) {
            var error = $root.GamerGetActorListS2C.verify(message.gamerGetActorListS2C);
            if (error)
                return "gamerGetActorListS2C." + error;
        }
        if (message.gamerChangeActorNameS2C != null && message.hasOwnProperty("gamerChangeActorNameS2C")) {
            var error = $root.GamerChangeActorNameS2C.verify(message.gamerChangeActorNameS2C);
            if (error)
                return "gamerChangeActorNameS2C." + error;
        }
        if (message.gamerActorUpLevelS2C != null && message.hasOwnProperty("gamerActorUpLevelS2C")) {
            var error = $root.GamerActorUpLevelS2C.verify(message.gamerActorUpLevelS2C);
            if (error)
                return "gamerActorUpLevelS2C." + error;
        }
        if (message.gamerNotifyActorChangeS2C != null && message.hasOwnProperty("gamerNotifyActorChangeS2C")) {
            var error = $root.GamerNotifyActorChangeS2C.verify(message.gamerNotifyActorChangeS2C);
            if (error)
                return "gamerNotifyActorChangeS2C." + error;
        }
        if (message.gamerGetActorSetListS2C != null && message.hasOwnProperty("gamerGetActorSetListS2C")) {
            var error = $root.GamerGetActorSetListS2C.verify(message.gamerGetActorSetListS2C);
            if (error)
                return "gamerGetActorSetListS2C." + error;
        }
        if (message.gamerGetActorSetRewardS2C != null && message.hasOwnProperty("gamerGetActorSetRewardS2C")) {
            var error = $root.GamerGetActorSetRewardS2C.verify(message.gamerGetActorSetRewardS2C);
            if (error)
                return "gamerGetActorSetRewardS2C." + error;
        }
        if (message.gamerNotifyActorSetChangeS2C != null && message.hasOwnProperty("gamerNotifyActorSetChangeS2C")) {
            var error = $root.GamerNotifyActorSetChangeS2C.verify(message.gamerNotifyActorSetChangeS2C);
            if (error)
                return "gamerNotifyActorSetChangeS2C." + error;
        }
        if (message.gamerActorSendGiftS2C != null && message.hasOwnProperty("gamerActorSendGiftS2C")) {
            var error = $root.GamerActorSendGiftS2C.verify(message.gamerActorSendGiftS2C);
            if (error)
                return "gamerActorSendGiftS2C." + error;
        }
        if (message.gamerActorLabelUpLevelS2C != null && message.hasOwnProperty("gamerActorLabelUpLevelS2C")) {
            var error = $root.GamerActorLabelUpLevelS2C.verify(message.gamerActorLabelUpLevelS2C);
            if (error)
                return "gamerActorLabelUpLevelS2C." + error;
        }
        if (message.gamerActorOpenNewLabelS2C != null && message.hasOwnProperty("gamerActorOpenNewLabelS2C")) {
            var error = $root.GamerActorOpenNewLabelS2C.verify(message.gamerActorOpenNewLabelS2C);
            if (error)
                return "gamerActorOpenNewLabelS2C." + error;
        }
        if (message.gamerActorBuyNewLabelS2C != null && message.hasOwnProperty("gamerActorBuyNewLabelS2C")) {
            var error = $root.GamerActorBuyNewLabelS2C.verify(message.gamerActorBuyNewLabelS2C);
            if (error)
                return "gamerActorBuyNewLabelS2C." + error;
        }
        if (message.gamerActorAdNewLabelS2C != null && message.hasOwnProperty("gamerActorAdNewLabelS2C")) {
            var error = $root.GamerActorAdNewLabelS2C.verify(message.gamerActorAdNewLabelS2C);
            if (error)
                return "gamerActorAdNewLabelS2C." + error;
        }
        if (message.gamerActorFriendshipUpLevelS2C != null && message.hasOwnProperty("gamerActorFriendshipUpLevelS2C")) {
            var error = $root.GamerActorFriendshipUpLevelS2C.verify(message.gamerActorFriendshipUpLevelS2C);
            if (error)
                return "gamerActorFriendshipUpLevelS2C." + error;
        }
        if (message.gamerActorFriendshipTaskReportS2C != null && message.hasOwnProperty("gamerActorFriendshipTaskReportS2C")) {
            var error = $root.GamerActorFriendshipTaskReportS2C.verify(message.gamerActorFriendshipTaskReportS2C);
            if (error)
                return "gamerActorFriendshipTaskReportS2C." + error;
        }
        if (message.gamerActorSkillUpLevelS2C != null && message.hasOwnProperty("gamerActorSkillUpLevelS2C")) {
            var error = $root.GamerActorSkillUpLevelS2C.verify(message.gamerActorSkillUpLevelS2C);
            if (error)
                return "gamerActorSkillUpLevelS2C." + error;
        }
        if (message.gMS2C != null && message.hasOwnProperty("gMS2C")) {
            var error = $root.GMS2C.verify(message.gMS2C);
            if (error)
                return "gMS2C." + error;
        }
        if (message.gamerNotifyStoryListS2C != null && message.hasOwnProperty("gamerNotifyStoryListS2C")) {
            var error = $root.GamerNotifyStoryListS2C.verify(message.gamerNotifyStoryListS2C);
            if (error)
                return "gamerNotifyStoryListS2C." + error;
        }
        if (message.storyGiveLikeS2C != null && message.hasOwnProperty("storyGiveLikeS2C")) {
            var error = $root.StoryGiveLikeS2C.verify(message.storyGiveLikeS2C);
            if (error)
                return "storyGiveLikeS2C." + error;
        }
        if (message.storyCommentS2C != null && message.hasOwnProperty("storyCommentS2C")) {
            var error = $root.StoryCommentS2C.verify(message.storyCommentS2C);
            if (error)
                return "storyCommentS2C." + error;
        }
        if (message.storyReadCommentS2C != null && message.hasOwnProperty("storyReadCommentS2C")) {
            var error = $root.StoryReadCommentS2C.verify(message.storyReadCommentS2C);
            if (error)
                return "storyReadCommentS2C." + error;
        }
        if (message.storyGetCommentS2C != null && message.hasOwnProperty("storyGetCommentS2C")) {
            var error = $root.StoryGetCommentS2C.verify(message.storyGetCommentS2C);
            if (error)
                return "storyGetCommentS2C." + error;
        }
        if (message.storyChangeNameS2C != null && message.hasOwnProperty("storyChangeNameS2C")) {
            var error = $root.StoryChangeNameS2C.verify(message.storyChangeNameS2C);
            if (error)
                return "storyChangeNameS2C." + error;
        }
        if (message.gamerNotifyBuildInfoS2C != null && message.hasOwnProperty("gamerNotifyBuildInfoS2C")) {
            var error = $root.GamerNotifyBuildInfoS2C.verify(message.gamerNotifyBuildInfoS2C);
            if (error)
                return "gamerNotifyBuildInfoS2C." + error;
        }
        if (message.buildLevelUpS2C != null && message.hasOwnProperty("buildLevelUpS2C")) {
            var error = $root.BuildLevelUpS2C.verify(message.buildLevelUpS2C);
            if (error)
                return "buildLevelUpS2C." + error;
        }
        if (message.buildEndOfLevelUpS2C != null && message.hasOwnProperty("buildEndOfLevelUpS2C")) {
            var error = $root.BuildEndOfLevelUpS2C.verify(message.buildEndOfLevelUpS2C);
            if (error)
                return "buildEndOfLevelUpS2C." + error;
        }
        if (message.buildBreakUpS2C != null && message.hasOwnProperty("buildBreakUpS2C")) {
            var error = $root.BuildBreakUpS2C.verify(message.buildBreakUpS2C);
            if (error)
                return "buildBreakUpS2C." + error;
        }
        if (message.buildSpeedUpS2C != null && message.hasOwnProperty("buildSpeedUpS2C")) {
            var error = $root.BuildSpeedUpS2C.verify(message.buildSpeedUpS2C);
            if (error)
                return "buildSpeedUpS2C." + error;
        }
        if (message.buildGetProductS2C != null && message.hasOwnProperty("buildGetProductS2C")) {
            var error = $root.BuildGetProductS2C.verify(message.buildGetProductS2C);
            if (error)
                return "buildGetProductS2C." + error;
        }
        if (message.actorEnterBuildS2C != null && message.hasOwnProperty("actorEnterBuildS2C")) {
            var error = $root.ActorEnterBuildS2C.verify(message.actorEnterBuildS2C);
            if (error)
                return "actorEnterBuildS2C." + error;
        }
        if (message.actorLeaveBuildS2C != null && message.hasOwnProperty("actorLeaveBuildS2C")) {
            var error = $root.ActorLeaveBuildS2C.verify(message.actorLeaveBuildS2C);
            if (error)
                return "actorLeaveBuildS2C." + error;
        }
        if (message.gamerNotifyGashaponInfoS2C != null && message.hasOwnProperty("gamerNotifyGashaponInfoS2C")) {
            var error = $root.GamerNotifyGashaponInfoS2C.verify(message.gamerNotifyGashaponInfoS2C);
            if (error)
                return "gamerNotifyGashaponInfoS2C." + error;
        }
        if (message.gamerExtractGashaponS2C != null && message.hasOwnProperty("gamerExtractGashaponS2C")) {
            var error = $root.GamerExtractGashaponS2C.verify(message.gamerExtractGashaponS2C);
            if (error)
                return "gamerExtractGashaponS2C." + error;
        }
        if (message.storyExtractGashaponS2C != null && message.hasOwnProperty("storyExtractGashaponS2C")) {
            var error = $root.StoryExtractGashaponS2C.verify(message.storyExtractGashaponS2C);
            if (error)
                return "storyExtractGashaponS2C." + error;
        }
        if (message.gamerGetAllowanceS2C != null && message.hasOwnProperty("gamerGetAllowanceS2C")) {
            var error = $root.GamerGetAllowanceS2C.verify(message.gamerGetAllowanceS2C);
            if (error)
                return "gamerGetAllowanceS2C." + error;
        }
        if (message.getStoryExtractInfoS2C != null && message.hasOwnProperty("getStoryExtractInfoS2C")) {
            var error = $root.GetStoryExtractInfoS2C.verify(message.getStoryExtractInfoS2C);
            if (error)
                return "getStoryExtractInfoS2C." + error;
        }
        if (message.cleanStoryExtractCDS2C != null && message.hasOwnProperty("cleanStoryExtractCDS2C")) {
            var error = $root.CleanStoryExtractCDS2C.verify(message.cleanStoryExtractCDS2C);
            if (error)
                return "cleanStoryExtractCDS2C." + error;
        }
        if (message.purchaseStoryExtractNumS2C != null && message.hasOwnProperty("purchaseStoryExtractNumS2C")) {
            var error = $root.PurchaseStoryExtractNumS2C.verify(message.purchaseStoryExtractNumS2C);
            if (error)
                return "purchaseStoryExtractNumS2C." + error;
        }
        if (message.gamerNotifyIntelligenceS2C != null && message.hasOwnProperty("gamerNotifyIntelligenceS2C")) {
            var error = $root.GamerNotifyIntelligenceS2C.verify(message.gamerNotifyIntelligenceS2C);
            if (error)
                return "gamerNotifyIntelligenceS2C." + error;
        }
        if (message.gamerGetIntelligenceS2C != null && message.hasOwnProperty("gamerGetIntelligenceS2C")) {
            var error = $root.GamerGetIntelligenceS2C.verify(message.gamerGetIntelligenceS2C);
            if (error)
                return "gamerGetIntelligenceS2C." + error;
        }
        if (message.gamerChangeIntelligenceStateS2C != null && message.hasOwnProperty("gamerChangeIntelligenceStateS2C")) {
            var error = $root.GamerChangeIntelligenceStateS2C.verify(message.gamerChangeIntelligenceStateS2C);
            if (error)
                return "gamerChangeIntelligenceStateS2C." + error;
        }
        if (message.gamerIntelligenceParseS2C != null && message.hasOwnProperty("gamerIntelligenceParseS2C")) {
            var error = $root.GamerIntelligenceParseS2C.verify(message.gamerIntelligenceParseS2C);
            if (error)
                return "gamerIntelligenceParseS2C." + error;
        }
        if (message.studioS2C != null && message.hasOwnProperty("studioS2C")) {
            var error = $root.StudioS2C.verify(message.studioS2C);
            if (error)
                return "studioS2C." + error;
        }
        if (message.studioStorySelectS2C != null && message.hasOwnProperty("studioStorySelectS2C")) {
            var error = $root.StudioStorySelectS2C.verify(message.studioStorySelectS2C);
            if (error)
                return "studioStorySelectS2C." + error;
        }
        if (message.studioActorSelectS2C != null && message.hasOwnProperty("studioActorSelectS2C")) {
            var error = $root.StudioActorSelectS2C.verify(message.studioActorSelectS2C);
            if (error)
                return "studioActorSelectS2C." + error;
        }
        if (message.studioMatchingDisplayEndS2C != null && message.hasOwnProperty("studioMatchingDisplayEndS2C")) {
            var error = $root.StudioMatchingDisplayEndS2C.verify(message.studioMatchingDisplayEndS2C);
            if (error)
                return "studioMatchingDisplayEndS2C." + error;
        }
        if (message.gamerNotifyStudioEventS2C != null && message.hasOwnProperty("gamerNotifyStudioEventS2C")) {
            var error = $root.GamerNotifyStudioEventS2C.verify(message.gamerNotifyStudioEventS2C);
            if (error)
                return "gamerNotifyStudioEventS2C." + error;
        }
        if (message.studioEventOptionSelectS2C != null && message.hasOwnProperty("studioEventOptionSelectS2C")) {
            var error = $root.StudioEventOptionSelectS2C.verify(message.studioEventOptionSelectS2C);
            if (error)
                return "studioEventOptionSelectS2C." + error;
        }
        if (message.studioStartS2C != null && message.hasOwnProperty("studioStartS2C")) {
            var error = $root.StudioStartS2C.verify(message.studioStartS2C);
            if (error)
                return "studioStartS2C." + error;
        }
        if (message.studioNextStepS2C != null && message.hasOwnProperty("studioNextStepS2C")) {
            var error = $root.StudioNextStepS2C.verify(message.studioNextStepS2C);
            if (error)
                return "studioNextStepS2C." + error;
        }
        if (message.gamerNotifyStudioFirstRewardS2C != null && message.hasOwnProperty("gamerNotifyStudioFirstRewardS2C")) {
            var error = $root.GamerNotifyStudioFirstRewardS2C.verify(message.gamerNotifyStudioFirstRewardS2C);
            if (error)
                return "gamerNotifyStudioFirstRewardS2C." + error;
        }
        if (message.studioContinuedListS2C != null && message.hasOwnProperty("studioContinuedListS2C")) {
            var error = $root.StudioContinuedListS2C.verify(message.studioContinuedListS2C);
            if (error)
                return "studioContinuedListS2C." + error;
        }
        if (message.studioContinuedReceiveS2C != null && message.hasOwnProperty("studioContinuedReceiveS2C")) {
            var error = $root.StudioContinuedReceiveS2C.verify(message.studioContinuedReceiveS2C);
            if (error)
                return "studioContinuedReceiveS2C." + error;
        }
        if (message.studioContinuedReceiveAllS2C != null && message.hasOwnProperty("studioContinuedReceiveAllS2C")) {
            var error = $root.StudioContinuedReceiveAllS2C.verify(message.studioContinuedReceiveAllS2C);
            if (error)
                return "studioContinuedReceiveAllS2C." + error;
        }
        if (message.gamerNotifyActivitiesS2C != null && message.hasOwnProperty("gamerNotifyActivitiesS2C")) {
            var error = $root.GamerNotifyActivitiesS2C.verify(message.gamerNotifyActivitiesS2C);
            if (error)
                return "gamerNotifyActivitiesS2C." + error;
        }
        if (message.getActivityRewardS2C != null && message.hasOwnProperty("getActivityRewardS2C")) {
            var error = $root.GetActivityRewardS2C.verify(message.getActivityRewardS2C);
            if (error)
                return "getActivityRewardS2C." + error;
        }
        return null;
    };
    S2C.fromObject = function fromObject(object) {
        if (object instanceof $root.S2C)
            return object;
        var message = new $root.S2C();
        if (object.error != null)
            message.error = object.error | 0;
        if (object.key != null)
            message.key = String(object.key);
        if (object.gamerLoginS2C != null) {
            if (typeof object.gamerLoginS2C !== "object")
                throw TypeError(".S2C.gamerLoginS2C: object expected");
            message.gamerLoginS2C = $root.GamerLoginS2C.fromObject(object.gamerLoginS2C);
        }
        if (object.gamerLoginGetDataS2C != null) {
            if (typeof object.gamerLoginGetDataS2C !== "object")
                throw TypeError(".S2C.gamerLoginGetDataS2C: object expected");
            message.gamerLoginGetDataS2C = $root.GamerLoginGetDataS2C.fromObject(object.gamerLoginGetDataS2C);
        }
        if (object.serverTimeS2C != null) {
            if (typeof object.serverTimeS2C !== "object")
                throw TypeError(".S2C.serverTimeS2C: object expected");
            message.serverTimeS2C = $root.ServerTimeS2C.fromObject(object.serverTimeS2C);
        }
        if (object.gamerNotifyLoginOtherS2C != null) {
            if (typeof object.gamerNotifyLoginOtherS2C !== "object")
                throw TypeError(".S2C.gamerNotifyLoginOtherS2C: object expected");
            message.gamerNotifyLoginOtherS2C = $root.GamerNotifyLoginOtherS2C.fromObject(object.gamerNotifyLoginOtherS2C);
        }
        if (object.gamerSubChatChannelS2C != null) {
            if (typeof object.gamerSubChatChannelS2C !== "object")
                throw TypeError(".S2C.gamerSubChatChannelS2C: object expected");
            message.gamerSubChatChannelS2C = $root.GamerSubChatChannelS2C.fromObject(object.gamerSubChatChannelS2C);
        }
        if (object.gamerNotifyExpLevelS2C != null) {
            if (typeof object.gamerNotifyExpLevelS2C !== "object")
                throw TypeError(".S2C.gamerNotifyExpLevelS2C: object expected");
            message.gamerNotifyExpLevelS2C = $root.GamerNotifyExpLevelS2C.fromObject(object.gamerNotifyExpLevelS2C);
        }
        if (object.gamerFriendChatS2C != null) {
            if (typeof object.gamerFriendChatS2C !== "object")
                throw TypeError(".S2C.gamerFriendChatS2C: object expected");
            message.gamerFriendChatS2C = $root.GamerFriendChatS2C.fromObject(object.gamerFriendChatS2C);
        }
        if (object.gamerWorldChatS2C != null) {
            if (typeof object.gamerWorldChatS2C !== "object")
                throw TypeError(".S2C.gamerWorldChatS2C: object expected");
            message.gamerWorldChatS2C = $root.GamerWorldChatS2C.fromObject(object.gamerWorldChatS2C);
        }
        if (object.gamerTestChatS2C != null) {
            if (typeof object.gamerTestChatS2C !== "object")
                throw TypeError(".S2C.gamerTestChatS2C: object expected");
            message.gamerTestChatS2C = $root.GamerTestChatS2C.fromObject(object.gamerTestChatS2C);
        }
        if (object.gamerClubRequestS2C != null) {
            if (typeof object.gamerClubRequestS2C !== "object")
                throw TypeError(".S2C.gamerClubRequestS2C: object expected");
            message.gamerClubRequestS2C = $root.GamerClubRequestS2C.fromObject(object.gamerClubRequestS2C);
        }
        if (object.gamerNotifyNewChatS2C != null) {
            if (typeof object.gamerNotifyNewChatS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewChatS2C: object expected");
            message.gamerNotifyNewChatS2C = $root.GamerNotifyNewChatS2C.fromObject(object.gamerNotifyNewChatS2C);
        }
        if (object.gamerNewFriendReqS2C != null) {
            if (typeof object.gamerNewFriendReqS2C !== "object")
                throw TypeError(".S2C.gamerNewFriendReqS2C: object expected");
            message.gamerNewFriendReqS2C = $root.GamerNewFriendReqS2C.fromObject(object.gamerNewFriendReqS2C);
        }
        if (object.gamerNotifyNewFriendReqS2C != null) {
            if (typeof object.gamerNotifyNewFriendReqS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewFriendReqS2C: object expected");
            message.gamerNotifyNewFriendReqS2C = $root.GamerNotifyNewFriendReqS2C.fromObject(object.gamerNotifyNewFriendReqS2C);
        }
        if (object.gamerProcessFriendReqS2C != null) {
            if (typeof object.gamerProcessFriendReqS2C !== "object")
                throw TypeError(".S2C.gamerProcessFriendReqS2C: object expected");
            message.gamerProcessFriendReqS2C = $root.GamerProcessFriendReqS2C.fromObject(object.gamerProcessFriendReqS2C);
        }
        if (object.gamerNotifyNewFriendS2C != null) {
            if (typeof object.gamerNotifyNewFriendS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewFriendS2C: object expected");
            message.gamerNotifyNewFriendS2C = $root.GamerNotifyNewFriendS2C.fromObject(object.gamerNotifyNewFriendS2C);
        }
        if (object.gamerNotifyMailS2C != null) {
            if (typeof object.gamerNotifyMailS2C !== "object")
                throw TypeError(".S2C.gamerNotifyMailS2C: object expected");
            message.gamerNotifyMailS2C = $root.GamerNotifyMailS2C.fromObject(object.gamerNotifyMailS2C);
        }
        if (object.gamerNotifyNewMailS2C != null) {
            if (typeof object.gamerNotifyNewMailS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewMailS2C: object expected");
            message.gamerNotifyNewMailS2C = $root.GamerNotifyNewMailS2C.fromObject(object.gamerNotifyNewMailS2C);
        }
        if (object.gamerGetMailS2C != null) {
            if (typeof object.gamerGetMailS2C !== "object")
                throw TypeError(".S2C.gamerGetMailS2C: object expected");
            message.gamerGetMailS2C = $root.GamerGetMailS2C.fromObject(object.gamerGetMailS2C);
        }
        if (object.gamerDelMailS2C != null) {
            if (typeof object.gamerDelMailS2C !== "object")
                throw TypeError(".S2C.gamerDelMailS2C: object expected");
            message.gamerDelMailS2C = $root.GamerDelMailS2C.fromObject(object.gamerDelMailS2C);
        }
        if (object.gamerDelHaveReadMailS2C != null) {
            if (typeof object.gamerDelHaveReadMailS2C !== "object")
                throw TypeError(".S2C.gamerDelHaveReadMailS2C: object expected");
            message.gamerDelHaveReadMailS2C = $root.GamerDelHaveReadMailS2C.fromObject(object.gamerDelHaveReadMailS2C);
        }
        if (object.gamerOneKeyRcvMailRewardS2C != null) {
            if (typeof object.gamerOneKeyRcvMailRewardS2C !== "object")
                throw TypeError(".S2C.gamerOneKeyRcvMailRewardS2C: object expected");
            message.gamerOneKeyRcvMailRewardS2C = $root.GamerOneKeyRcvMailRewardS2C.fromObject(object.gamerOneKeyRcvMailRewardS2C);
        }
        if (object.gamerChangeMailStateS2C != null) {
            if (typeof object.gamerChangeMailStateS2C !== "object")
                throw TypeError(".S2C.gamerChangeMailStateS2C: object expected");
            message.gamerChangeMailStateS2C = $root.GamerChangeMailStateS2C.fromObject(object.gamerChangeMailStateS2C);
        }
        if (object.gamerMatchS2C != null) {
            if (typeof object.gamerMatchS2C !== "object")
                throw TypeError(".S2C.gamerMatchS2C: object expected");
            message.gamerMatchS2C = $root.GamerMatchS2C.fromObject(object.gamerMatchS2C);
        }
        if (object.gamerNotifyMatchInfoS2C != null) {
            if (typeof object.gamerNotifyMatchInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyMatchInfoS2C: object expected");
            message.gamerNotifyMatchInfoS2C = $root.GamerNotifyMatchInfoS2C.fromObject(object.gamerNotifyMatchInfoS2C);
        }
        if (object.gamerPVPSyncS2C != null) {
            if (typeof object.gamerPVPSyncS2C !== "object")
                throw TypeError(".S2C.gamerPVPSyncS2C: object expected");
            message.gamerPVPSyncS2C = $root.GamerPVPSyncS2C.fromObject(object.gamerPVPSyncS2C);
        }
        if (object.gamerNotifyPVPSyncS2C != null) {
            if (typeof object.gamerNotifyPVPSyncS2C !== "object")
                throw TypeError(".S2C.gamerNotifyPVPSyncS2C: object expected");
            message.gamerNotifyPVPSyncS2C = $root.GamerNotifyPVPSyncS2C.fromObject(object.gamerNotifyPVPSyncS2C);
        }
        if (object.gamerNotifyNewPVPResultS2C != null) {
            if (typeof object.gamerNotifyNewPVPResultS2C !== "object")
                throw TypeError(".S2C.gamerNotifyNewPVPResultS2C: object expected");
            message.gamerNotifyNewPVPResultS2C = $root.GamerNotifyNewPVPResultS2C.fromObject(object.gamerNotifyNewPVPResultS2C);
        }
        if (object.gamerNotifyIconChangeS2C != null) {
            if (typeof object.gamerNotifyIconChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyIconChangeS2C: object expected");
            message.gamerNotifyIconChangeS2C = $root.GamerNotifyIconChangeS2C.fromObject(object.gamerNotifyIconChangeS2C);
        }
        if (object.gamerGetRealTimeRankS2C != null) {
            if (typeof object.gamerGetRealTimeRankS2C !== "object")
                throw TypeError(".S2C.gamerGetRealTimeRankS2C: object expected");
            message.gamerGetRealTimeRankS2C = $root.GamerGetRealTimeRankS2C.fromObject(object.gamerGetRealTimeRankS2C);
        }
        if (object.gamerCheckPVPBattleS2C != null) {
            if (typeof object.gamerCheckPVPBattleS2C !== "object")
                throw TypeError(".S2C.gamerCheckPVPBattleS2C: object expected");
            message.gamerCheckPVPBattleS2C = $root.GamerCheckPVPBattleS2C.fromObject(object.gamerCheckPVPBattleS2C);
        }
        if (object.gamerUploadWXInfoS2C != null) {
            if (typeof object.gamerUploadWXInfoS2C !== "object")
                throw TypeError(".S2C.gamerUploadWXInfoS2C: object expected");
            message.gamerUploadWXInfoS2C = $root.GamerUploadWXInfoS2C.fromObject(object.gamerUploadWXInfoS2C);
        }
        if (object.createLeagueS2C != null) {
            if (typeof object.createLeagueS2C !== "object")
                throw TypeError(".S2C.createLeagueS2C: object expected");
            message.createLeagueS2C = $root.CreateLeagueS2C.fromObject(object.createLeagueS2C);
        }
        if (object.gamerNotifyLeagueDataS2C != null) {
            if (typeof object.gamerNotifyLeagueDataS2C !== "object")
                throw TypeError(".S2C.gamerNotifyLeagueDataS2C: object expected");
            message.gamerNotifyLeagueDataS2C = $root.GamerNotifyLeagueDataS2C.fromObject(object.gamerNotifyLeagueDataS2C);
        }
        if (object.gamerNotifyLeagueGamerOnlineS2C != null) {
            if (typeof object.gamerNotifyLeagueGamerOnlineS2C !== "object")
                throw TypeError(".S2C.gamerNotifyLeagueGamerOnlineS2C: object expected");
            message.gamerNotifyLeagueGamerOnlineS2C = $root.GamerNotifyLeagueGamerOnlineS2C.fromObject(object.gamerNotifyLeagueGamerOnlineS2C);
        }
        if (object.gamerGetBackpackS2C != null) {
            if (typeof object.gamerGetBackpackS2C !== "object")
                throw TypeError(".S2C.gamerGetBackpackS2C: object expected");
            message.gamerGetBackpackS2C = $root.GamerGetBackpackS2C.fromObject(object.gamerGetBackpackS2C);
        }
        if (object.gamerNotifyItemS2C != null) {
            if (typeof object.gamerNotifyItemS2C !== "object")
                throw TypeError(".S2C.gamerNotifyItemS2C: object expected");
            message.gamerNotifyItemS2C = $root.GamerNotifyItemS2C.fromObject(object.gamerNotifyItemS2C);
        }
        if (object.gamerSellItemS2C != null) {
            if (typeof object.gamerSellItemS2C !== "object")
                throw TypeError(".S2C.gamerSellItemS2C: object expected");
            message.gamerSellItemS2C = $root.GamerSellItemS2C.fromObject(object.gamerSellItemS2C);
        }
        if (object.gamerUseItemS2C != null) {
            if (typeof object.gamerUseItemS2C !== "object")
                throw TypeError(".S2C.gamerUseItemS2C: object expected");
            message.gamerUseItemS2C = $root.GamerUseItemS2C.fromObject(object.gamerUseItemS2C);
        }
        if (object.gamerCompoundItemS2C != null) {
            if (typeof object.gamerCompoundItemS2C !== "object")
                throw TypeError(".S2C.gamerCompoundItemS2C: object expected");
            message.gamerCompoundItemS2C = $root.GamerCompoundItemS2C.fromObject(object.gamerCompoundItemS2C);
        }
        if (object.gamerSplitItemS2C != null) {
            if (typeof object.gamerSplitItemS2C !== "object")
                throw TypeError(".S2C.gamerSplitItemS2C: object expected");
            message.gamerSplitItemS2C = $root.GamerSplitItemS2C.fromObject(object.gamerSplitItemS2C);
        }
        if (object.gamerNotifyItemChangeS2C != null) {
            if (typeof object.gamerNotifyItemChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyItemChangeS2C: object expected");
            message.gamerNotifyItemChangeS2C = $root.GamerNotifyItemChangeS2C.fromObject(object.gamerNotifyItemChangeS2C);
        }
        if (object.gamerGetActorListS2C != null) {
            if (typeof object.gamerGetActorListS2C !== "object")
                throw TypeError(".S2C.gamerGetActorListS2C: object expected");
            message.gamerGetActorListS2C = $root.GamerGetActorListS2C.fromObject(object.gamerGetActorListS2C);
        }
        if (object.gamerChangeActorNameS2C != null) {
            if (typeof object.gamerChangeActorNameS2C !== "object")
                throw TypeError(".S2C.gamerChangeActorNameS2C: object expected");
            message.gamerChangeActorNameS2C = $root.GamerChangeActorNameS2C.fromObject(object.gamerChangeActorNameS2C);
        }
        if (object.gamerActorUpLevelS2C != null) {
            if (typeof object.gamerActorUpLevelS2C !== "object")
                throw TypeError(".S2C.gamerActorUpLevelS2C: object expected");
            message.gamerActorUpLevelS2C = $root.GamerActorUpLevelS2C.fromObject(object.gamerActorUpLevelS2C);
        }
        if (object.gamerNotifyActorChangeS2C != null) {
            if (typeof object.gamerNotifyActorChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyActorChangeS2C: object expected");
            message.gamerNotifyActorChangeS2C = $root.GamerNotifyActorChangeS2C.fromObject(object.gamerNotifyActorChangeS2C);
        }
        if (object.gamerGetActorSetListS2C != null) {
            if (typeof object.gamerGetActorSetListS2C !== "object")
                throw TypeError(".S2C.gamerGetActorSetListS2C: object expected");
            message.gamerGetActorSetListS2C = $root.GamerGetActorSetListS2C.fromObject(object.gamerGetActorSetListS2C);
        }
        if (object.gamerGetActorSetRewardS2C != null) {
            if (typeof object.gamerGetActorSetRewardS2C !== "object")
                throw TypeError(".S2C.gamerGetActorSetRewardS2C: object expected");
            message.gamerGetActorSetRewardS2C = $root.GamerGetActorSetRewardS2C.fromObject(object.gamerGetActorSetRewardS2C);
        }
        if (object.gamerNotifyActorSetChangeS2C != null) {
            if (typeof object.gamerNotifyActorSetChangeS2C !== "object")
                throw TypeError(".S2C.gamerNotifyActorSetChangeS2C: object expected");
            message.gamerNotifyActorSetChangeS2C = $root.GamerNotifyActorSetChangeS2C.fromObject(object.gamerNotifyActorSetChangeS2C);
        }
        if (object.gamerActorSendGiftS2C != null) {
            if (typeof object.gamerActorSendGiftS2C !== "object")
                throw TypeError(".S2C.gamerActorSendGiftS2C: object expected");
            message.gamerActorSendGiftS2C = $root.GamerActorSendGiftS2C.fromObject(object.gamerActorSendGiftS2C);
        }
        if (object.gamerActorLabelUpLevelS2C != null) {
            if (typeof object.gamerActorLabelUpLevelS2C !== "object")
                throw TypeError(".S2C.gamerActorLabelUpLevelS2C: object expected");
            message.gamerActorLabelUpLevelS2C = $root.GamerActorLabelUpLevelS2C.fromObject(object.gamerActorLabelUpLevelS2C);
        }
        if (object.gamerActorOpenNewLabelS2C != null) {
            if (typeof object.gamerActorOpenNewLabelS2C !== "object")
                throw TypeError(".S2C.gamerActorOpenNewLabelS2C: object expected");
            message.gamerActorOpenNewLabelS2C = $root.GamerActorOpenNewLabelS2C.fromObject(object.gamerActorOpenNewLabelS2C);
        }
        if (object.gamerActorBuyNewLabelS2C != null) {
            if (typeof object.gamerActorBuyNewLabelS2C !== "object")
                throw TypeError(".S2C.gamerActorBuyNewLabelS2C: object expected");
            message.gamerActorBuyNewLabelS2C = $root.GamerActorBuyNewLabelS2C.fromObject(object.gamerActorBuyNewLabelS2C);
        }
        if (object.gamerActorAdNewLabelS2C != null) {
            if (typeof object.gamerActorAdNewLabelS2C !== "object")
                throw TypeError(".S2C.gamerActorAdNewLabelS2C: object expected");
            message.gamerActorAdNewLabelS2C = $root.GamerActorAdNewLabelS2C.fromObject(object.gamerActorAdNewLabelS2C);
        }
        if (object.gamerActorFriendshipUpLevelS2C != null) {
            if (typeof object.gamerActorFriendshipUpLevelS2C !== "object")
                throw TypeError(".S2C.gamerActorFriendshipUpLevelS2C: object expected");
            message.gamerActorFriendshipUpLevelS2C = $root.GamerActorFriendshipUpLevelS2C.fromObject(object.gamerActorFriendshipUpLevelS2C);
        }
        if (object.gamerActorFriendshipTaskReportS2C != null) {
            if (typeof object.gamerActorFriendshipTaskReportS2C !== "object")
                throw TypeError(".S2C.gamerActorFriendshipTaskReportS2C: object expected");
            message.gamerActorFriendshipTaskReportS2C = $root.GamerActorFriendshipTaskReportS2C.fromObject(object.gamerActorFriendshipTaskReportS2C);
        }
        if (object.gamerActorSkillUpLevelS2C != null) {
            if (typeof object.gamerActorSkillUpLevelS2C !== "object")
                throw TypeError(".S2C.gamerActorSkillUpLevelS2C: object expected");
            message.gamerActorSkillUpLevelS2C = $root.GamerActorSkillUpLevelS2C.fromObject(object.gamerActorSkillUpLevelS2C);
        }
        if (object.gMS2C != null) {
            if (typeof object.gMS2C !== "object")
                throw TypeError(".S2C.gMS2C: object expected");
            message.gMS2C = $root.GMS2C.fromObject(object.gMS2C);
        }
        if (object.gamerNotifyStoryListS2C != null) {
            if (typeof object.gamerNotifyStoryListS2C !== "object")
                throw TypeError(".S2C.gamerNotifyStoryListS2C: object expected");
            message.gamerNotifyStoryListS2C = $root.GamerNotifyStoryListS2C.fromObject(object.gamerNotifyStoryListS2C);
        }
        if (object.storyGiveLikeS2C != null) {
            if (typeof object.storyGiveLikeS2C !== "object")
                throw TypeError(".S2C.storyGiveLikeS2C: object expected");
            message.storyGiveLikeS2C = $root.StoryGiveLikeS2C.fromObject(object.storyGiveLikeS2C);
        }
        if (object.storyCommentS2C != null) {
            if (typeof object.storyCommentS2C !== "object")
                throw TypeError(".S2C.storyCommentS2C: object expected");
            message.storyCommentS2C = $root.StoryCommentS2C.fromObject(object.storyCommentS2C);
        }
        if (object.storyReadCommentS2C != null) {
            if (typeof object.storyReadCommentS2C !== "object")
                throw TypeError(".S2C.storyReadCommentS2C: object expected");
            message.storyReadCommentS2C = $root.StoryReadCommentS2C.fromObject(object.storyReadCommentS2C);
        }
        if (object.storyGetCommentS2C != null) {
            if (typeof object.storyGetCommentS2C !== "object")
                throw TypeError(".S2C.storyGetCommentS2C: object expected");
            message.storyGetCommentS2C = $root.StoryGetCommentS2C.fromObject(object.storyGetCommentS2C);
        }
        if (object.storyChangeNameS2C != null) {
            if (typeof object.storyChangeNameS2C !== "object")
                throw TypeError(".S2C.storyChangeNameS2C: object expected");
            message.storyChangeNameS2C = $root.StoryChangeNameS2C.fromObject(object.storyChangeNameS2C);
        }
        if (object.gamerNotifyBuildInfoS2C != null) {
            if (typeof object.gamerNotifyBuildInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyBuildInfoS2C: object expected");
            message.gamerNotifyBuildInfoS2C = $root.GamerNotifyBuildInfoS2C.fromObject(object.gamerNotifyBuildInfoS2C);
        }
        if (object.buildLevelUpS2C != null) {
            if (typeof object.buildLevelUpS2C !== "object")
                throw TypeError(".S2C.buildLevelUpS2C: object expected");
            message.buildLevelUpS2C = $root.BuildLevelUpS2C.fromObject(object.buildLevelUpS2C);
        }
        if (object.buildEndOfLevelUpS2C != null) {
            if (typeof object.buildEndOfLevelUpS2C !== "object")
                throw TypeError(".S2C.buildEndOfLevelUpS2C: object expected");
            message.buildEndOfLevelUpS2C = $root.BuildEndOfLevelUpS2C.fromObject(object.buildEndOfLevelUpS2C);
        }
        if (object.buildBreakUpS2C != null) {
            if (typeof object.buildBreakUpS2C !== "object")
                throw TypeError(".S2C.buildBreakUpS2C: object expected");
            message.buildBreakUpS2C = $root.BuildBreakUpS2C.fromObject(object.buildBreakUpS2C);
        }
        if (object.buildSpeedUpS2C != null) {
            if (typeof object.buildSpeedUpS2C !== "object")
                throw TypeError(".S2C.buildSpeedUpS2C: object expected");
            message.buildSpeedUpS2C = $root.BuildSpeedUpS2C.fromObject(object.buildSpeedUpS2C);
        }
        if (object.buildGetProductS2C != null) {
            if (typeof object.buildGetProductS2C !== "object")
                throw TypeError(".S2C.buildGetProductS2C: object expected");
            message.buildGetProductS2C = $root.BuildGetProductS2C.fromObject(object.buildGetProductS2C);
        }
        if (object.actorEnterBuildS2C != null) {
            if (typeof object.actorEnterBuildS2C !== "object")
                throw TypeError(".S2C.actorEnterBuildS2C: object expected");
            message.actorEnterBuildS2C = $root.ActorEnterBuildS2C.fromObject(object.actorEnterBuildS2C);
        }
        if (object.actorLeaveBuildS2C != null) {
            if (typeof object.actorLeaveBuildS2C !== "object")
                throw TypeError(".S2C.actorLeaveBuildS2C: object expected");
            message.actorLeaveBuildS2C = $root.ActorLeaveBuildS2C.fromObject(object.actorLeaveBuildS2C);
        }
        if (object.gamerNotifyGashaponInfoS2C != null) {
            if (typeof object.gamerNotifyGashaponInfoS2C !== "object")
                throw TypeError(".S2C.gamerNotifyGashaponInfoS2C: object expected");
            message.gamerNotifyGashaponInfoS2C = $root.GamerNotifyGashaponInfoS2C.fromObject(object.gamerNotifyGashaponInfoS2C);
        }
        if (object.gamerExtractGashaponS2C != null) {
            if (typeof object.gamerExtractGashaponS2C !== "object")
                throw TypeError(".S2C.gamerExtractGashaponS2C: object expected");
            message.gamerExtractGashaponS2C = $root.GamerExtractGashaponS2C.fromObject(object.gamerExtractGashaponS2C);
        }
        if (object.storyExtractGashaponS2C != null) {
            if (typeof object.storyExtractGashaponS2C !== "object")
                throw TypeError(".S2C.storyExtractGashaponS2C: object expected");
            message.storyExtractGashaponS2C = $root.StoryExtractGashaponS2C.fromObject(object.storyExtractGashaponS2C);
        }
        if (object.gamerGetAllowanceS2C != null) {
            if (typeof object.gamerGetAllowanceS2C !== "object")
                throw TypeError(".S2C.gamerGetAllowanceS2C: object expected");
            message.gamerGetAllowanceS2C = $root.GamerGetAllowanceS2C.fromObject(object.gamerGetAllowanceS2C);
        }
        if (object.getStoryExtractInfoS2C != null) {
            if (typeof object.getStoryExtractInfoS2C !== "object")
                throw TypeError(".S2C.getStoryExtractInfoS2C: object expected");
            message.getStoryExtractInfoS2C = $root.GetStoryExtractInfoS2C.fromObject(object.getStoryExtractInfoS2C);
        }
        if (object.cleanStoryExtractCDS2C != null) {
            if (typeof object.cleanStoryExtractCDS2C !== "object")
                throw TypeError(".S2C.cleanStoryExtractCDS2C: object expected");
            message.cleanStoryExtractCDS2C = $root.CleanStoryExtractCDS2C.fromObject(object.cleanStoryExtractCDS2C);
        }
        if (object.purchaseStoryExtractNumS2C != null) {
            if (typeof object.purchaseStoryExtractNumS2C !== "object")
                throw TypeError(".S2C.purchaseStoryExtractNumS2C: object expected");
            message.purchaseStoryExtractNumS2C = $root.PurchaseStoryExtractNumS2C.fromObject(object.purchaseStoryExtractNumS2C);
        }
        if (object.gamerNotifyIntelligenceS2C != null) {
            if (typeof object.gamerNotifyIntelligenceS2C !== "object")
                throw TypeError(".S2C.gamerNotifyIntelligenceS2C: object expected");
            message.gamerNotifyIntelligenceS2C = $root.GamerNotifyIntelligenceS2C.fromObject(object.gamerNotifyIntelligenceS2C);
        }
        if (object.gamerGetIntelligenceS2C != null) {
            if (typeof object.gamerGetIntelligenceS2C !== "object")
                throw TypeError(".S2C.gamerGetIntelligenceS2C: object expected");
            message.gamerGetIntelligenceS2C = $root.GamerGetIntelligenceS2C.fromObject(object.gamerGetIntelligenceS2C);
        }
        if (object.gamerChangeIntelligenceStateS2C != null) {
            if (typeof object.gamerChangeIntelligenceStateS2C !== "object")
                throw TypeError(".S2C.gamerChangeIntelligenceStateS2C: object expected");
            message.gamerChangeIntelligenceStateS2C = $root.GamerChangeIntelligenceStateS2C.fromObject(object.gamerChangeIntelligenceStateS2C);
        }
        if (object.gamerIntelligenceParseS2C != null) {
            if (typeof object.gamerIntelligenceParseS2C !== "object")
                throw TypeError(".S2C.gamerIntelligenceParseS2C: object expected");
            message.gamerIntelligenceParseS2C = $root.GamerIntelligenceParseS2C.fromObject(object.gamerIntelligenceParseS2C);
        }
        if (object.studioS2C != null) {
            if (typeof object.studioS2C !== "object")
                throw TypeError(".S2C.studioS2C: object expected");
            message.studioS2C = $root.StudioS2C.fromObject(object.studioS2C);
        }
        if (object.studioStorySelectS2C != null) {
            if (typeof object.studioStorySelectS2C !== "object")
                throw TypeError(".S2C.studioStorySelectS2C: object expected");
            message.studioStorySelectS2C = $root.StudioStorySelectS2C.fromObject(object.studioStorySelectS2C);
        }
        if (object.studioActorSelectS2C != null) {
            if (typeof object.studioActorSelectS2C !== "object")
                throw TypeError(".S2C.studioActorSelectS2C: object expected");
            message.studioActorSelectS2C = $root.StudioActorSelectS2C.fromObject(object.studioActorSelectS2C);
        }
        if (object.studioMatchingDisplayEndS2C != null) {
            if (typeof object.studioMatchingDisplayEndS2C !== "object")
                throw TypeError(".S2C.studioMatchingDisplayEndS2C: object expected");
            message.studioMatchingDisplayEndS2C = $root.StudioMatchingDisplayEndS2C.fromObject(object.studioMatchingDisplayEndS2C);
        }
        if (object.gamerNotifyStudioEventS2C != null) {
            if (typeof object.gamerNotifyStudioEventS2C !== "object")
                throw TypeError(".S2C.gamerNotifyStudioEventS2C: object expected");
            message.gamerNotifyStudioEventS2C = $root.GamerNotifyStudioEventS2C.fromObject(object.gamerNotifyStudioEventS2C);
        }
        if (object.studioEventOptionSelectS2C != null) {
            if (typeof object.studioEventOptionSelectS2C !== "object")
                throw TypeError(".S2C.studioEventOptionSelectS2C: object expected");
            message.studioEventOptionSelectS2C = $root.StudioEventOptionSelectS2C.fromObject(object.studioEventOptionSelectS2C);
        }
        if (object.studioStartS2C != null) {
            if (typeof object.studioStartS2C !== "object")
                throw TypeError(".S2C.studioStartS2C: object expected");
            message.studioStartS2C = $root.StudioStartS2C.fromObject(object.studioStartS2C);
        }
        if (object.studioNextStepS2C != null) {
            if (typeof object.studioNextStepS2C !== "object")
                throw TypeError(".S2C.studioNextStepS2C: object expected");
            message.studioNextStepS2C = $root.StudioNextStepS2C.fromObject(object.studioNextStepS2C);
        }
        if (object.gamerNotifyStudioFirstRewardS2C != null) {
            if (typeof object.gamerNotifyStudioFirstRewardS2C !== "object")
                throw TypeError(".S2C.gamerNotifyStudioFirstRewardS2C: object expected");
            message.gamerNotifyStudioFirstRewardS2C = $root.GamerNotifyStudioFirstRewardS2C.fromObject(object.gamerNotifyStudioFirstRewardS2C);
        }
        if (object.studioContinuedListS2C != null) {
            if (typeof object.studioContinuedListS2C !== "object")
                throw TypeError(".S2C.studioContinuedListS2C: object expected");
            message.studioContinuedListS2C = $root.StudioContinuedListS2C.fromObject(object.studioContinuedListS2C);
        }
        if (object.studioContinuedReceiveS2C != null) {
            if (typeof object.studioContinuedReceiveS2C !== "object")
                throw TypeError(".S2C.studioContinuedReceiveS2C: object expected");
            message.studioContinuedReceiveS2C = $root.StudioContinuedReceiveS2C.fromObject(object.studioContinuedReceiveS2C);
        }
        if (object.studioContinuedReceiveAllS2C != null) {
            if (typeof object.studioContinuedReceiveAllS2C !== "object")
                throw TypeError(".S2C.studioContinuedReceiveAllS2C: object expected");
            message.studioContinuedReceiveAllS2C = $root.StudioContinuedReceiveAllS2C.fromObject(object.studioContinuedReceiveAllS2C);
        }
        if (object.gamerNotifyActivitiesS2C != null) {
            if (typeof object.gamerNotifyActivitiesS2C !== "object")
                throw TypeError(".S2C.gamerNotifyActivitiesS2C: object expected");
            message.gamerNotifyActivitiesS2C = $root.GamerNotifyActivitiesS2C.fromObject(object.gamerNotifyActivitiesS2C);
        }
        if (object.getActivityRewardS2C != null) {
            if (typeof object.getActivityRewardS2C !== "object")
                throw TypeError(".S2C.getActivityRewardS2C: object expected");
            message.getActivityRewardS2C = $root.GetActivityRewardS2C.fromObject(object.getActivityRewardS2C);
        }
        return message;
    };
    S2C.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.error = 0;
            object.key = "";
            object.gamerLoginS2C = null;
            object.gamerLoginGetDataS2C = null;
            object.serverTimeS2C = null;
            object.gamerNotifyLoginOtherS2C = null;
            object.gamerSubChatChannelS2C = null;
            object.gamerNotifyExpLevelS2C = null;
            object.gamerFriendChatS2C = null;
            object.gamerWorldChatS2C = null;
            object.gamerTestChatS2C = null;
            object.gamerClubRequestS2C = null;
            object.gamerNotifyNewChatS2C = null;
            object.gamerNewFriendReqS2C = null;
            object.gamerNotifyNewFriendReqS2C = null;
            object.gamerProcessFriendReqS2C = null;
            object.gamerNotifyNewFriendS2C = null;
            object.gamerNotifyMailS2C = null;
            object.gamerNotifyNewMailS2C = null;
            object.gamerGetMailS2C = null;
            object.gamerDelMailS2C = null;
            object.gamerDelHaveReadMailS2C = null;
            object.gamerOneKeyRcvMailRewardS2C = null;
            object.gamerChangeMailStateS2C = null;
            object.gamerMatchS2C = null;
            object.gamerNotifyMatchInfoS2C = null;
            object.gamerPVPSyncS2C = null;
            object.gamerNotifyPVPSyncS2C = null;
            object.gamerNotifyNewPVPResultS2C = null;
            object.gamerNotifyIconChangeS2C = null;
            object.gamerGetRealTimeRankS2C = null;
            object.gamerCheckPVPBattleS2C = null;
            object.gamerUploadWXInfoS2C = null;
            object.createLeagueS2C = null;
            object.gamerNotifyLeagueDataS2C = null;
            object.gamerNotifyLeagueGamerOnlineS2C = null;
            object.gamerGetBackpackS2C = null;
            object.gamerNotifyItemS2C = null;
            object.gamerSellItemS2C = null;
            object.gamerUseItemS2C = null;
            object.gamerCompoundItemS2C = null;
            object.gamerSplitItemS2C = null;
            object.gamerNotifyItemChangeS2C = null;
            object.gamerGetActorListS2C = null;
            object.gamerChangeActorNameS2C = null;
            object.gamerActorUpLevelS2C = null;
            object.gamerNotifyActorChangeS2C = null;
            object.gamerGetActorSetListS2C = null;
            object.gamerGetActorSetRewardS2C = null;
            object.gamerNotifyActorSetChangeS2C = null;
            object.gamerActorSendGiftS2C = null;
            object.gamerActorLabelUpLevelS2C = null;
            object.gamerActorOpenNewLabelS2C = null;
            object.gamerActorBuyNewLabelS2C = null;
            object.gamerActorAdNewLabelS2C = null;
            object.gamerActorFriendshipUpLevelS2C = null;
            object.gamerActorFriendshipTaskReportS2C = null;
            object.gamerActorSkillUpLevelS2C = null;
            object.gMS2C = null;
            object.gamerNotifyStoryListS2C = null;
            object.storyGiveLikeS2C = null;
            object.storyCommentS2C = null;
            object.storyReadCommentS2C = null;
            object.storyGetCommentS2C = null;
            object.storyChangeNameS2C = null;
            object.gamerNotifyBuildInfoS2C = null;
            object.buildLevelUpS2C = null;
            object.buildEndOfLevelUpS2C = null;
            object.buildBreakUpS2C = null;
            object.buildSpeedUpS2C = null;
            object.buildGetProductS2C = null;
            object.actorEnterBuildS2C = null;
            object.actorLeaveBuildS2C = null;
            object.gamerNotifyGashaponInfoS2C = null;
            object.gamerExtractGashaponS2C = null;
            object.storyExtractGashaponS2C = null;
            object.gamerGetAllowanceS2C = null;
            object.getStoryExtractInfoS2C = null;
            object.cleanStoryExtractCDS2C = null;
            object.purchaseStoryExtractNumS2C = null;
            object.gamerNotifyIntelligenceS2C = null;
            object.gamerGetIntelligenceS2C = null;
            object.gamerChangeIntelligenceStateS2C = null;
            object.gamerIntelligenceParseS2C = null;
            object.studioS2C = null;
            object.studioStorySelectS2C = null;
            object.studioActorSelectS2C = null;
            object.studioMatchingDisplayEndS2C = null;
            object.gamerNotifyStudioEventS2C = null;
            object.studioEventOptionSelectS2C = null;
            object.studioStartS2C = null;
            object.studioNextStepS2C = null;
            object.gamerNotifyStudioFirstRewardS2C = null;
            object.studioContinuedListS2C = null;
            object.studioContinuedReceiveS2C = null;
            object.studioContinuedReceiveAllS2C = null;
            object.gamerNotifyActivitiesS2C = null;
            object.getActivityRewardS2C = null;
        }
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.gamerLoginS2C != null && message.hasOwnProperty("gamerLoginS2C"))
            object.gamerLoginS2C = $root.GamerLoginS2C.toObject(message.gamerLoginS2C, options);
        if (message.gamerLoginGetDataS2C != null && message.hasOwnProperty("gamerLoginGetDataS2C"))
            object.gamerLoginGetDataS2C = $root.GamerLoginGetDataS2C.toObject(message.gamerLoginGetDataS2C, options);
        if (message.serverTimeS2C != null && message.hasOwnProperty("serverTimeS2C"))
            object.serverTimeS2C = $root.ServerTimeS2C.toObject(message.serverTimeS2C, options);
        if (message.gamerNotifyLoginOtherS2C != null && message.hasOwnProperty("gamerNotifyLoginOtherS2C"))
            object.gamerNotifyLoginOtherS2C = $root.GamerNotifyLoginOtherS2C.toObject(message.gamerNotifyLoginOtherS2C, options);
        if (message.gamerSubChatChannelS2C != null && message.hasOwnProperty("gamerSubChatChannelS2C"))
            object.gamerSubChatChannelS2C = $root.GamerSubChatChannelS2C.toObject(message.gamerSubChatChannelS2C, options);
        if (message.gamerNotifyExpLevelS2C != null && message.hasOwnProperty("gamerNotifyExpLevelS2C"))
            object.gamerNotifyExpLevelS2C = $root.GamerNotifyExpLevelS2C.toObject(message.gamerNotifyExpLevelS2C, options);
        if (message.gamerFriendChatS2C != null && message.hasOwnProperty("gamerFriendChatS2C"))
            object.gamerFriendChatS2C = $root.GamerFriendChatS2C.toObject(message.gamerFriendChatS2C, options);
        if (message.gamerWorldChatS2C != null && message.hasOwnProperty("gamerWorldChatS2C"))
            object.gamerWorldChatS2C = $root.GamerWorldChatS2C.toObject(message.gamerWorldChatS2C, options);
        if (message.gamerTestChatS2C != null && message.hasOwnProperty("gamerTestChatS2C"))
            object.gamerTestChatS2C = $root.GamerTestChatS2C.toObject(message.gamerTestChatS2C, options);
        if (message.gamerClubRequestS2C != null && message.hasOwnProperty("gamerClubRequestS2C"))
            object.gamerClubRequestS2C = $root.GamerClubRequestS2C.toObject(message.gamerClubRequestS2C, options);
        if (message.gamerNotifyNewChatS2C != null && message.hasOwnProperty("gamerNotifyNewChatS2C"))
            object.gamerNotifyNewChatS2C = $root.GamerNotifyNewChatS2C.toObject(message.gamerNotifyNewChatS2C, options);
        if (message.gamerNewFriendReqS2C != null && message.hasOwnProperty("gamerNewFriendReqS2C"))
            object.gamerNewFriendReqS2C = $root.GamerNewFriendReqS2C.toObject(message.gamerNewFriendReqS2C, options);
        if (message.gamerNotifyNewFriendReqS2C != null && message.hasOwnProperty("gamerNotifyNewFriendReqS2C"))
            object.gamerNotifyNewFriendReqS2C = $root.GamerNotifyNewFriendReqS2C.toObject(message.gamerNotifyNewFriendReqS2C, options);
        if (message.gamerProcessFriendReqS2C != null && message.hasOwnProperty("gamerProcessFriendReqS2C"))
            object.gamerProcessFriendReqS2C = $root.GamerProcessFriendReqS2C.toObject(message.gamerProcessFriendReqS2C, options);
        if (message.gamerNotifyNewFriendS2C != null && message.hasOwnProperty("gamerNotifyNewFriendS2C"))
            object.gamerNotifyNewFriendS2C = $root.GamerNotifyNewFriendS2C.toObject(message.gamerNotifyNewFriendS2C, options);
        if (message.gamerNotifyMailS2C != null && message.hasOwnProperty("gamerNotifyMailS2C"))
            object.gamerNotifyMailS2C = $root.GamerNotifyMailS2C.toObject(message.gamerNotifyMailS2C, options);
        if (message.gamerNotifyNewMailS2C != null && message.hasOwnProperty("gamerNotifyNewMailS2C"))
            object.gamerNotifyNewMailS2C = $root.GamerNotifyNewMailS2C.toObject(message.gamerNotifyNewMailS2C, options);
        if (message.gamerGetMailS2C != null && message.hasOwnProperty("gamerGetMailS2C"))
            object.gamerGetMailS2C = $root.GamerGetMailS2C.toObject(message.gamerGetMailS2C, options);
        if (message.gamerDelMailS2C != null && message.hasOwnProperty("gamerDelMailS2C"))
            object.gamerDelMailS2C = $root.GamerDelMailS2C.toObject(message.gamerDelMailS2C, options);
        if (message.gamerDelHaveReadMailS2C != null && message.hasOwnProperty("gamerDelHaveReadMailS2C"))
            object.gamerDelHaveReadMailS2C = $root.GamerDelHaveReadMailS2C.toObject(message.gamerDelHaveReadMailS2C, options);
        if (message.gamerOneKeyRcvMailRewardS2C != null && message.hasOwnProperty("gamerOneKeyRcvMailRewardS2C"))
            object.gamerOneKeyRcvMailRewardS2C = $root.GamerOneKeyRcvMailRewardS2C.toObject(message.gamerOneKeyRcvMailRewardS2C, options);
        if (message.gamerChangeMailStateS2C != null && message.hasOwnProperty("gamerChangeMailStateS2C"))
            object.gamerChangeMailStateS2C = $root.GamerChangeMailStateS2C.toObject(message.gamerChangeMailStateS2C, options);
        if (message.gamerMatchS2C != null && message.hasOwnProperty("gamerMatchS2C"))
            object.gamerMatchS2C = $root.GamerMatchS2C.toObject(message.gamerMatchS2C, options);
        if (message.gamerNotifyMatchInfoS2C != null && message.hasOwnProperty("gamerNotifyMatchInfoS2C"))
            object.gamerNotifyMatchInfoS2C = $root.GamerNotifyMatchInfoS2C.toObject(message.gamerNotifyMatchInfoS2C, options);
        if (message.gamerPVPSyncS2C != null && message.hasOwnProperty("gamerPVPSyncS2C"))
            object.gamerPVPSyncS2C = $root.GamerPVPSyncS2C.toObject(message.gamerPVPSyncS2C, options);
        if (message.gamerNotifyPVPSyncS2C != null && message.hasOwnProperty("gamerNotifyPVPSyncS2C"))
            object.gamerNotifyPVPSyncS2C = $root.GamerNotifyPVPSyncS2C.toObject(message.gamerNotifyPVPSyncS2C, options);
        if (message.gamerNotifyNewPVPResultS2C != null && message.hasOwnProperty("gamerNotifyNewPVPResultS2C"))
            object.gamerNotifyNewPVPResultS2C = $root.GamerNotifyNewPVPResultS2C.toObject(message.gamerNotifyNewPVPResultS2C, options);
        if (message.gamerNotifyIconChangeS2C != null && message.hasOwnProperty("gamerNotifyIconChangeS2C"))
            object.gamerNotifyIconChangeS2C = $root.GamerNotifyIconChangeS2C.toObject(message.gamerNotifyIconChangeS2C, options);
        if (message.gamerGetRealTimeRankS2C != null && message.hasOwnProperty("gamerGetRealTimeRankS2C"))
            object.gamerGetRealTimeRankS2C = $root.GamerGetRealTimeRankS2C.toObject(message.gamerGetRealTimeRankS2C, options);
        if (message.gamerCheckPVPBattleS2C != null && message.hasOwnProperty("gamerCheckPVPBattleS2C"))
            object.gamerCheckPVPBattleS2C = $root.GamerCheckPVPBattleS2C.toObject(message.gamerCheckPVPBattleS2C, options);
        if (message.gamerUploadWXInfoS2C != null && message.hasOwnProperty("gamerUploadWXInfoS2C"))
            object.gamerUploadWXInfoS2C = $root.GamerUploadWXInfoS2C.toObject(message.gamerUploadWXInfoS2C, options);
        if (message.createLeagueS2C != null && message.hasOwnProperty("createLeagueS2C"))
            object.createLeagueS2C = $root.CreateLeagueS2C.toObject(message.createLeagueS2C, options);
        if (message.gamerNotifyLeagueDataS2C != null && message.hasOwnProperty("gamerNotifyLeagueDataS2C"))
            object.gamerNotifyLeagueDataS2C = $root.GamerNotifyLeagueDataS2C.toObject(message.gamerNotifyLeagueDataS2C, options);
        if (message.gamerNotifyLeagueGamerOnlineS2C != null && message.hasOwnProperty("gamerNotifyLeagueGamerOnlineS2C"))
            object.gamerNotifyLeagueGamerOnlineS2C = $root.GamerNotifyLeagueGamerOnlineS2C.toObject(message.gamerNotifyLeagueGamerOnlineS2C, options);
        if (message.gamerGetBackpackS2C != null && message.hasOwnProperty("gamerGetBackpackS2C"))
            object.gamerGetBackpackS2C = $root.GamerGetBackpackS2C.toObject(message.gamerGetBackpackS2C, options);
        if (message.gamerNotifyItemS2C != null && message.hasOwnProperty("gamerNotifyItemS2C"))
            object.gamerNotifyItemS2C = $root.GamerNotifyItemS2C.toObject(message.gamerNotifyItemS2C, options);
        if (message.gamerSellItemS2C != null && message.hasOwnProperty("gamerSellItemS2C"))
            object.gamerSellItemS2C = $root.GamerSellItemS2C.toObject(message.gamerSellItemS2C, options);
        if (message.gamerUseItemS2C != null && message.hasOwnProperty("gamerUseItemS2C"))
            object.gamerUseItemS2C = $root.GamerUseItemS2C.toObject(message.gamerUseItemS2C, options);
        if (message.gamerCompoundItemS2C != null && message.hasOwnProperty("gamerCompoundItemS2C"))
            object.gamerCompoundItemS2C = $root.GamerCompoundItemS2C.toObject(message.gamerCompoundItemS2C, options);
        if (message.gamerSplitItemS2C != null && message.hasOwnProperty("gamerSplitItemS2C"))
            object.gamerSplitItemS2C = $root.GamerSplitItemS2C.toObject(message.gamerSplitItemS2C, options);
        if (message.gamerNotifyItemChangeS2C != null && message.hasOwnProperty("gamerNotifyItemChangeS2C"))
            object.gamerNotifyItemChangeS2C = $root.GamerNotifyItemChangeS2C.toObject(message.gamerNotifyItemChangeS2C, options);
        if (message.gamerGetActorListS2C != null && message.hasOwnProperty("gamerGetActorListS2C"))
            object.gamerGetActorListS2C = $root.GamerGetActorListS2C.toObject(message.gamerGetActorListS2C, options);
        if (message.gamerChangeActorNameS2C != null && message.hasOwnProperty("gamerChangeActorNameS2C"))
            object.gamerChangeActorNameS2C = $root.GamerChangeActorNameS2C.toObject(message.gamerChangeActorNameS2C, options);
        if (message.gamerActorUpLevelS2C != null && message.hasOwnProperty("gamerActorUpLevelS2C"))
            object.gamerActorUpLevelS2C = $root.GamerActorUpLevelS2C.toObject(message.gamerActorUpLevelS2C, options);
        if (message.gamerNotifyActorChangeS2C != null && message.hasOwnProperty("gamerNotifyActorChangeS2C"))
            object.gamerNotifyActorChangeS2C = $root.GamerNotifyActorChangeS2C.toObject(message.gamerNotifyActorChangeS2C, options);
        if (message.gamerGetActorSetListS2C != null && message.hasOwnProperty("gamerGetActorSetListS2C"))
            object.gamerGetActorSetListS2C = $root.GamerGetActorSetListS2C.toObject(message.gamerGetActorSetListS2C, options);
        if (message.gamerGetActorSetRewardS2C != null && message.hasOwnProperty("gamerGetActorSetRewardS2C"))
            object.gamerGetActorSetRewardS2C = $root.GamerGetActorSetRewardS2C.toObject(message.gamerGetActorSetRewardS2C, options);
        if (message.gamerNotifyActorSetChangeS2C != null && message.hasOwnProperty("gamerNotifyActorSetChangeS2C"))
            object.gamerNotifyActorSetChangeS2C = $root.GamerNotifyActorSetChangeS2C.toObject(message.gamerNotifyActorSetChangeS2C, options);
        if (message.gamerActorSendGiftS2C != null && message.hasOwnProperty("gamerActorSendGiftS2C"))
            object.gamerActorSendGiftS2C = $root.GamerActorSendGiftS2C.toObject(message.gamerActorSendGiftS2C, options);
        if (message.gamerActorLabelUpLevelS2C != null && message.hasOwnProperty("gamerActorLabelUpLevelS2C"))
            object.gamerActorLabelUpLevelS2C = $root.GamerActorLabelUpLevelS2C.toObject(message.gamerActorLabelUpLevelS2C, options);
        if (message.gamerActorOpenNewLabelS2C != null && message.hasOwnProperty("gamerActorOpenNewLabelS2C"))
            object.gamerActorOpenNewLabelS2C = $root.GamerActorOpenNewLabelS2C.toObject(message.gamerActorOpenNewLabelS2C, options);
        if (message.gamerActorBuyNewLabelS2C != null && message.hasOwnProperty("gamerActorBuyNewLabelS2C"))
            object.gamerActorBuyNewLabelS2C = $root.GamerActorBuyNewLabelS2C.toObject(message.gamerActorBuyNewLabelS2C, options);
        if (message.gamerActorAdNewLabelS2C != null && message.hasOwnProperty("gamerActorAdNewLabelS2C"))
            object.gamerActorAdNewLabelS2C = $root.GamerActorAdNewLabelS2C.toObject(message.gamerActorAdNewLabelS2C, options);
        if (message.gamerActorFriendshipUpLevelS2C != null && message.hasOwnProperty("gamerActorFriendshipUpLevelS2C"))
            object.gamerActorFriendshipUpLevelS2C = $root.GamerActorFriendshipUpLevelS2C.toObject(message.gamerActorFriendshipUpLevelS2C, options);
        if (message.gamerActorFriendshipTaskReportS2C != null && message.hasOwnProperty("gamerActorFriendshipTaskReportS2C"))
            object.gamerActorFriendshipTaskReportS2C = $root.GamerActorFriendshipTaskReportS2C.toObject(message.gamerActorFriendshipTaskReportS2C, options);
        if (message.gamerActorSkillUpLevelS2C != null && message.hasOwnProperty("gamerActorSkillUpLevelS2C"))
            object.gamerActorSkillUpLevelS2C = $root.GamerActorSkillUpLevelS2C.toObject(message.gamerActorSkillUpLevelS2C, options);
        if (message.gMS2C != null && message.hasOwnProperty("gMS2C"))
            object.gMS2C = $root.GMS2C.toObject(message.gMS2C, options);
        if (message.gamerNotifyStoryListS2C != null && message.hasOwnProperty("gamerNotifyStoryListS2C"))
            object.gamerNotifyStoryListS2C = $root.GamerNotifyStoryListS2C.toObject(message.gamerNotifyStoryListS2C, options);
        if (message.storyGiveLikeS2C != null && message.hasOwnProperty("storyGiveLikeS2C"))
            object.storyGiveLikeS2C = $root.StoryGiveLikeS2C.toObject(message.storyGiveLikeS2C, options);
        if (message.storyCommentS2C != null && message.hasOwnProperty("storyCommentS2C"))
            object.storyCommentS2C = $root.StoryCommentS2C.toObject(message.storyCommentS2C, options);
        if (message.storyReadCommentS2C != null && message.hasOwnProperty("storyReadCommentS2C"))
            object.storyReadCommentS2C = $root.StoryReadCommentS2C.toObject(message.storyReadCommentS2C, options);
        if (message.storyGetCommentS2C != null && message.hasOwnProperty("storyGetCommentS2C"))
            object.storyGetCommentS2C = $root.StoryGetCommentS2C.toObject(message.storyGetCommentS2C, options);
        if (message.storyChangeNameS2C != null && message.hasOwnProperty("storyChangeNameS2C"))
            object.storyChangeNameS2C = $root.StoryChangeNameS2C.toObject(message.storyChangeNameS2C, options);
        if (message.gamerNotifyBuildInfoS2C != null && message.hasOwnProperty("gamerNotifyBuildInfoS2C"))
            object.gamerNotifyBuildInfoS2C = $root.GamerNotifyBuildInfoS2C.toObject(message.gamerNotifyBuildInfoS2C, options);
        if (message.buildLevelUpS2C != null && message.hasOwnProperty("buildLevelUpS2C"))
            object.buildLevelUpS2C = $root.BuildLevelUpS2C.toObject(message.buildLevelUpS2C, options);
        if (message.buildEndOfLevelUpS2C != null && message.hasOwnProperty("buildEndOfLevelUpS2C"))
            object.buildEndOfLevelUpS2C = $root.BuildEndOfLevelUpS2C.toObject(message.buildEndOfLevelUpS2C, options);
        if (message.buildBreakUpS2C != null && message.hasOwnProperty("buildBreakUpS2C"))
            object.buildBreakUpS2C = $root.BuildBreakUpS2C.toObject(message.buildBreakUpS2C, options);
        if (message.buildSpeedUpS2C != null && message.hasOwnProperty("buildSpeedUpS2C"))
            object.buildSpeedUpS2C = $root.BuildSpeedUpS2C.toObject(message.buildSpeedUpS2C, options);
        if (message.buildGetProductS2C != null && message.hasOwnProperty("buildGetProductS2C"))
            object.buildGetProductS2C = $root.BuildGetProductS2C.toObject(message.buildGetProductS2C, options);
        if (message.actorEnterBuildS2C != null && message.hasOwnProperty("actorEnterBuildS2C"))
            object.actorEnterBuildS2C = $root.ActorEnterBuildS2C.toObject(message.actorEnterBuildS2C, options);
        if (message.actorLeaveBuildS2C != null && message.hasOwnProperty("actorLeaveBuildS2C"))
            object.actorLeaveBuildS2C = $root.ActorLeaveBuildS2C.toObject(message.actorLeaveBuildS2C, options);
        if (message.gamerNotifyGashaponInfoS2C != null && message.hasOwnProperty("gamerNotifyGashaponInfoS2C"))
            object.gamerNotifyGashaponInfoS2C = $root.GamerNotifyGashaponInfoS2C.toObject(message.gamerNotifyGashaponInfoS2C, options);
        if (message.gamerExtractGashaponS2C != null && message.hasOwnProperty("gamerExtractGashaponS2C"))
            object.gamerExtractGashaponS2C = $root.GamerExtractGashaponS2C.toObject(message.gamerExtractGashaponS2C, options);
        if (message.storyExtractGashaponS2C != null && message.hasOwnProperty("storyExtractGashaponS2C"))
            object.storyExtractGashaponS2C = $root.StoryExtractGashaponS2C.toObject(message.storyExtractGashaponS2C, options);
        if (message.gamerGetAllowanceS2C != null && message.hasOwnProperty("gamerGetAllowanceS2C"))
            object.gamerGetAllowanceS2C = $root.GamerGetAllowanceS2C.toObject(message.gamerGetAllowanceS2C, options);
        if (message.getStoryExtractInfoS2C != null && message.hasOwnProperty("getStoryExtractInfoS2C"))
            object.getStoryExtractInfoS2C = $root.GetStoryExtractInfoS2C.toObject(message.getStoryExtractInfoS2C, options);
        if (message.cleanStoryExtractCDS2C != null && message.hasOwnProperty("cleanStoryExtractCDS2C"))
            object.cleanStoryExtractCDS2C = $root.CleanStoryExtractCDS2C.toObject(message.cleanStoryExtractCDS2C, options);
        if (message.purchaseStoryExtractNumS2C != null && message.hasOwnProperty("purchaseStoryExtractNumS2C"))
            object.purchaseStoryExtractNumS2C = $root.PurchaseStoryExtractNumS2C.toObject(message.purchaseStoryExtractNumS2C, options);
        if (message.gamerNotifyIntelligenceS2C != null && message.hasOwnProperty("gamerNotifyIntelligenceS2C"))
            object.gamerNotifyIntelligenceS2C = $root.GamerNotifyIntelligenceS2C.toObject(message.gamerNotifyIntelligenceS2C, options);
        if (message.gamerGetIntelligenceS2C != null && message.hasOwnProperty("gamerGetIntelligenceS2C"))
            object.gamerGetIntelligenceS2C = $root.GamerGetIntelligenceS2C.toObject(message.gamerGetIntelligenceS2C, options);
        if (message.gamerChangeIntelligenceStateS2C != null && message.hasOwnProperty("gamerChangeIntelligenceStateS2C"))
            object.gamerChangeIntelligenceStateS2C = $root.GamerChangeIntelligenceStateS2C.toObject(message.gamerChangeIntelligenceStateS2C, options);
        if (message.gamerIntelligenceParseS2C != null && message.hasOwnProperty("gamerIntelligenceParseS2C"))
            object.gamerIntelligenceParseS2C = $root.GamerIntelligenceParseS2C.toObject(message.gamerIntelligenceParseS2C, options);
        if (message.studioS2C != null && message.hasOwnProperty("studioS2C"))
            object.studioS2C = $root.StudioS2C.toObject(message.studioS2C, options);
        if (message.studioStorySelectS2C != null && message.hasOwnProperty("studioStorySelectS2C"))
            object.studioStorySelectS2C = $root.StudioStorySelectS2C.toObject(message.studioStorySelectS2C, options);
        if (message.studioActorSelectS2C != null && message.hasOwnProperty("studioActorSelectS2C"))
            object.studioActorSelectS2C = $root.StudioActorSelectS2C.toObject(message.studioActorSelectS2C, options);
        if (message.studioMatchingDisplayEndS2C != null && message.hasOwnProperty("studioMatchingDisplayEndS2C"))
            object.studioMatchingDisplayEndS2C = $root.StudioMatchingDisplayEndS2C.toObject(message.studioMatchingDisplayEndS2C, options);
        if (message.gamerNotifyStudioEventS2C != null && message.hasOwnProperty("gamerNotifyStudioEventS2C"))
            object.gamerNotifyStudioEventS2C = $root.GamerNotifyStudioEventS2C.toObject(message.gamerNotifyStudioEventS2C, options);
        if (message.studioEventOptionSelectS2C != null && message.hasOwnProperty("studioEventOptionSelectS2C"))
            object.studioEventOptionSelectS2C = $root.StudioEventOptionSelectS2C.toObject(message.studioEventOptionSelectS2C, options);
        if (message.studioStartS2C != null && message.hasOwnProperty("studioStartS2C"))
            object.studioStartS2C = $root.StudioStartS2C.toObject(message.studioStartS2C, options);
        if (message.studioNextStepS2C != null && message.hasOwnProperty("studioNextStepS2C"))
            object.studioNextStepS2C = $root.StudioNextStepS2C.toObject(message.studioNextStepS2C, options);
        if (message.gamerNotifyStudioFirstRewardS2C != null && message.hasOwnProperty("gamerNotifyStudioFirstRewardS2C"))
            object.gamerNotifyStudioFirstRewardS2C = $root.GamerNotifyStudioFirstRewardS2C.toObject(message.gamerNotifyStudioFirstRewardS2C, options);
        if (message.studioContinuedListS2C != null && message.hasOwnProperty("studioContinuedListS2C"))
            object.studioContinuedListS2C = $root.StudioContinuedListS2C.toObject(message.studioContinuedListS2C, options);
        if (message.studioContinuedReceiveS2C != null && message.hasOwnProperty("studioContinuedReceiveS2C"))
            object.studioContinuedReceiveS2C = $root.StudioContinuedReceiveS2C.toObject(message.studioContinuedReceiveS2C, options);
        if (message.studioContinuedReceiveAllS2C != null && message.hasOwnProperty("studioContinuedReceiveAllS2C"))
            object.studioContinuedReceiveAllS2C = $root.StudioContinuedReceiveAllS2C.toObject(message.studioContinuedReceiveAllS2C, options);
        if (message.gamerNotifyActivitiesS2C != null && message.hasOwnProperty("gamerNotifyActivitiesS2C"))
            object.gamerNotifyActivitiesS2C = $root.GamerNotifyActivitiesS2C.toObject(message.gamerNotifyActivitiesS2C, options);
        if (message.getActivityRewardS2C != null && message.hasOwnProperty("getActivityRewardS2C"))
            object.getActivityRewardS2C = $root.GetActivityRewardS2C.toObject(message.getActivityRewardS2C, options);
        return object;
    };
    S2C.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    return S2C;
})();
module.exports = $root;
window.proto = $root;